@using DevilDaggersInfo.Common
@using DevilDaggersInfo.Core.Replay
@using DevilDaggersInfo.Core.Replay.Events
@using DevilDaggersInfo.Core.Replay.Events.Interfaces
@using DevilDaggersInfo.Razor.ReplayEditor.Enums
@using DevilDaggersInfo.Razor.ReplayEditor.Services
@using DevilDaggersInfo.Razor.ReplayEditor.Store.State
@using Fluxor
@inherits FluxorComponent
@inject IState<ReplayBinaryState> ReplayBinaryState
@inject IState<ReplayEditorState> ReplayEditorState
@inject StateFacade StateFacade

@{
	ReplayBinary<LocalReplayBinaryHeader> replayBinary = ReplayBinaryState.Value.ReplayBinary;
	int startTick = ReplayEditorState.Value.StartTick;
	int endTick = ReplayEditorState.Value.EndTick;

	bool f = startTick <= 0;
	bool l = endTick >= replayBinary.EventsData.TickCount - 1;
	const string disabledStyle = "disabled:opacity-50 cursor-default btn-disabled";
	const string enabledStyle = "btn-gray";
}

<h2 class="text-red text-xl pt-4 pb-2">Ticks @startTick - @endTick (@((startTick / 60f).ToString(StringFormats.TimeFormat)) - @((endTick / 60f).ToString(StringFormats.TimeFormat)))</h2>

<div class="flex">
	<div class="w-10 h-10 mx-1">
		<button disabled="@f" class="@(f ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(0, 60)">@MarkupStrings.NavStart</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@f" class="@(f ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(startTick - 300, endTick - 300)">@MarkupStrings.NavPrevDouble</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@f" class="@(f ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(startTick - 60, endTick - 60)">@MarkupStrings.NavPrev</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@l" class="@(l ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(startTick + 60, endTick + 60)">@MarkupStrings.NavNext</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@l" class="@(l ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(startTick + 300, endTick + 300)">@MarkupStrings.NavNextDouble</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@l" class="@(l ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(replayBinary.EventsData.TickCount - 60, replayBinary.EventsData.TickCount)">@MarkupStrings.NavEnd</button>
	</div>
</div>

<div class="p-1">
	<div>
		@if (ReplayEditorState.Value.ShowTicksWithoutEvents)
		{
			<input type="checkbox" @onchange="StateFacade.ToggleShowTicksWithoutEvents" checked />
		}
		else
		{
			<input type="checkbox" @onchange="StateFacade.ToggleShowTicksWithoutEvents" />
		}

		<span class="p-1">Show ticks without events</span>
	</div>

	<div class="grid grid-cols-4 max-w-[1024px]">
		@foreach (SwitchableEventType switchableEventType in Enum.GetValues<SwitchableEventType>())
		{
			@if (!ReplayEditorState.Value.ShownEventTypes.ContainsKey(switchableEventType))
			{
				<span class="text-red">ERROR: Invalid state; ShownEventTypes does not contain @switchableEventType.</span>
				continue;
			}

			<div>
				@if (ReplayEditorState.Value.ShownEventTypes[switchableEventType])
				{
					<input type="checkbox" @onchange="() => StateFacade.ToggleShowEventTypes(switchableEventType)" checked />
				}
				else
				{
					<input type="checkbox" @onchange="() => StateFacade.ToggleShowEventTypes(switchableEventType)" />
				}

				<span class="p-1">Show @(switchableEventType)s</span>
			</div>
		}
	</div>

	<button class="btn btn-gray" @onclick="StateFacade.EnableAllEventTypes">Enable all</button>
	<button class="btn btn-gray" @onclick="StateFacade.DisableAllEventTypes">Disable all</button>
</div>

<div class="grid gap-4 grid-cols-12 max-w-[1366px]">
	<span class="font-bold text-right">Tick</span>
	<span class="font-bold text-right">Time</span>
	<span class="font-bold col-span-10">Inputs</span>
</div>

@{
	bool separator = false;

	// Ranges don't work on IReadOnlyList<T>, so create an array.
	IEvent[] eventsArray = replayBinary.EventsData.Events.ToArray();
	@for (int i = startTick; i < Math.Min(replayBinary.EventsData.TickCount, endTick); i++)
	{
		IEnumerable<IEvent> events;
		int start = replayBinary.EventsData.EventOffsetsPerTick[i];
		if (i >= replayBinary.EventsData.TickCount)
		{
			events = eventsArray[start..];
		}
		else
		{
			int end = replayBinary.EventsData.EventOffsetsPerTick[i + 1];
			events = eventsArray[start..end];
		}

		foreach (KeyValuePair<SwitchableEventType, bool> kvp in ReplayEditorState.Value.ShownEventTypes)
		{
			if (kvp.Value)
				continue;

			events = kvp.Key switch
			{
				SwitchableEventType.BoidSpawnEvent => events.Where(e => e is not BoidSpawnEvent),
				SwitchableEventType.DaggerSpawnEvent => events.Where(e => e is not DaggerSpawnEvent),
				SwitchableEventType.EntityOrientationEvent => events.Where(e => e is not EntityOrientationEvent),
				SwitchableEventType.EntityPositionEvent => events.Where(e => e is not EntityPositionEvent),
				SwitchableEventType.EntityTargetEvent => events.Where(e => e is not EntityTargetEvent),
				SwitchableEventType.GemEvent => events.Where(e => e is not GemEvent),
				SwitchableEventType.HitEvent => events.Where(e => e is not HitEvent),
				SwitchableEventType.LeviathanSpawnEvent => events.Where(e => e is not LeviathanSpawnEvent),
				SwitchableEventType.PedeSpawnEvent => events.Where(e => e is not PedeSpawnEvent),
				SwitchableEventType.SpiderEggSpawnEvent => events.Where(e => e is not SpiderEggSpawnEvent),
				SwitchableEventType.SpiderSpawnEvent => events.Where(e => e is not SpiderSpawnEvent),
				SwitchableEventType.SquidSpawnEvent => events.Where(e => e is not SquidSpawnEvent),
				SwitchableEventType.ThornSpawnEvent => events.Where(e => e is not ThornSpawnEvent),
				SwitchableEventType.TransmuteEvent => events.Where(e => e is not TransmuteEvent),
				_ => events,
			};
		}

		if (!(!ReplayEditorState.Value.ShowTicksWithoutEvents && !events.Any(e => e is not IInputsEvent)))
		{
			separator = false;
			<ReplayTick TickIndex="i" Events="events.ToList()" />
		}
		else if (!separator)
		{
			separator = true;
			<span class="text-center text-sm text-gray">[Hidden ticks]</span>
		}
	}
}
