@using DevilDaggersInfo.Common
@using DevilDaggersInfo.Common.Extensions
@using DevilDaggersInfo.Core.Replay
@using DevilDaggersInfo.Core.Replay.Events
@using DevilDaggersInfo.Core.Wiki
@using DevilDaggersInfo.Core.Wiki.Enums
@using DevilDaggersInfo.Core.Wiki.Objects
@using DevilDaggersInfo.Razor.ReplayEditor.Services
@using DevilDaggersInfo.Razor.ReplayEditor.Store.State
@using Fluxor
@inherits FluxorComponent
@inject IState<ReplayBinaryState> ReplayBinaryState
@inject IState<ReplayEditorState> ReplayEditorState
@inject StateFacade StateFacade

@{
	ReplayBinary replayBinary = ReplayBinaryState.Value.ReplayBinary;
	int startTick = ReplayEditorState.Value.StartTick;
	int endTick = ReplayEditorState.Value.EndTick;

	bool f = startTick <= 0;
	bool l = endTick >= replayBinary.EventsPerTick.Count - 1;
	const string disabledStyle = "disabled:opacity-50 cursor-default btn-disabled";
	const string enabledStyle = "btn-gray-light";

	Death? death = Deaths.GetDeathByLeaderboardType(GameVersion.V3_2, (byte)replayBinary.Header.DeathType);
}

<h2 class="text-red text-2xl pt-4 pb-2 font-goethe">Header</h2>

<div class="grid grid-cols-2 gap-x-2 max-w-md">
	<div>Version</div>
	<div>@replayBinary.Header.Version</div>
	<div>Timestamp</div>
	<div>@replayBinary.Header.TimestampSinceGameRelease</div>
	<div>Time</div>
	<div>@replayBinary.Header.Time.ToString(StringFormats.TimeFormat)</div>
	<div>Start Time</div>
	<div>@replayBinary.Header.StartTime.ToString(StringFormats.TimeFormat)</div>
	<div>Kills</div>
	<div>@replayBinary.Header.Kills</div>
	<div>Gems</div>
	<div>@replayBinary.Header.Gems</div>
	<div>Daggers Hit</div>
	<div>@replayBinary.Header.DaggersHit</div>
	<div>Daggers Fired</div>
	<div>@replayBinary.Header.DaggersFired</div>
	<div>Death Type</div>
	@if (death.HasValue)
	{
		<div style="color: @death.Value.Color.HexCode">@death.Value.Name</div>
	}
	else
	{
		<div>Invalid death type</div>
	}
	<div>Player ID</div>
	<div>@replayBinary.Header.PlayerId</div>
	<div>Player Name</div>
	<div>@replayBinary.Header.Username</div>
	<div>Spawnset MD5</div>
	<div>@replayBinary.Header.SpawnsetMd5.ByteArrayToHexString()</div>
</div>

<h2 class="text-red text-2xl pt-4 pb-2 font-goethe">Events @startTick - @endTick (@((startTick / 60f).ToString(StringFormats.TimeFormat)) - @((endTick / 60f).ToString(StringFormats.TimeFormat)))</h2>

<div class="flex">
	<div class="w-10 h-10 mx-1">
		<button disabled="@f" class="@(f ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(0, 60)">|</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@f" class="@(f ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(startTick - 300, endTick - 300)">--</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@f" class="@(f ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(startTick - 60, endTick - 60)">-</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@l" class="@(l ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(startTick + 60, endTick + 60)">+</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@l" class="@(l ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(startTick + 300, endTick + 300)">++</button>
	</div>
	<div class="w-10 h-10 mx-1">
		<button disabled="@l" class="@(l ? disabledStyle : enabledStyle) btn" @onclick="() => StateFacade.SelectTickRange(replayBinary.EventsPerTick.Count - 60, replayBinary.EventsPerTick.Count)">|</button>
	</div>
</div>

<div class="grid gap-4 grid-cols-7 max-w-xl">
	<span class="font-bold text-right">Tick</span>
	<span class="font-bold text-right">Time</span>
	<span class="font-bold col-span-4">Inputs</span>
	<span class="font-bold">Show events</span>
</div>

@for (int i = startTick; i < Math.Min(replayBinary.EventsPerTick.Count, endTick); i++)
{
	<ReplayTick TickIndex="i" Events="replayBinary.EventsPerTick[i]" />
}
