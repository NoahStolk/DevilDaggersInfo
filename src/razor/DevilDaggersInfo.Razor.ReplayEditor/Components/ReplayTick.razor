@using DevilDaggersInfo.Common
@using DevilDaggersInfo.Core.Replay.Enums
@using DevilDaggersInfo.Core.Replay.Events
@using DevilDaggersInfo.Razor.ReplayEditor.Services
@using DevilDaggersInfo.Razor.ReplayEditor.Store.State
@using Fluxor
@inject StateFacade StateFacade
@inject IState<ReplayEditorState> ReplayEditorState

@{
	IInputsEvent? input = Events.FirstOrDefault(e => e is InputsEvent or InitialInputsEvent) as IInputsEvent;
	bool isOpen = ReplayEditorState.Value.OpenedTicks.Contains(TickIndex);
	int eventCount = Events.Count(e => !HideActualEvent(e));
	string eventsString = eventCount == 1 ? "event" : "events";
}

<div class="grid gap-4 grid-cols-8 max-w-xl">
	<span class="text-right">@TickIndex</span>
	<span class="text-right">@((TickIndex / 60f).ToString(StringFormats.TimeFormat))</span>

	<div class="col-span-4">
		@if (input != null)
		{
			<span class="@(input.Forward ? "text-red" : null)">W</span>
			<span class="@(input.Left ? "text-red" : null)">A</span>
			<span class="@(input.Backward ? "text-red" : null)">S</span>
			<span class="@(input.Right ? "text-red" : null)">D</span>
			<span class="@(GetJumpColor(input.Jump))">[Jump]</span>
			<span class="@(input.Shoot ? "text-red" : null)">L</span>
			<span class="@(input.ShootHoming ? "text-red" : null)">R</span>
			<span class="@(input.MouseX != 0 ? "text-red" : null)">X: @input.MouseX</span>
			<span class="@(input.MouseY != 0 ? "text-red" : null)">Y: @input.MouseY</span>
		}
		else if (Events.Any(e => e is EndEvent))
		{
			<span class="text-red">End of replay</span>
		}
	</div>

	<button class="col-span-2 btn btn-gray" @onclick="() => StateFacade.ToggleTick(TickIndex)">@(isOpen ? $"Hide {eventCount} {eventsString}" : $"Show {eventCount} {eventsString}")</button>
</div>

@if (isOpen)
{
	<ul class="pl-4">
		@foreach (IEvent e in Events)
		{
			if (HideActualEvent(e))
				continue;

			<li class="list-disc">@e.ToString()</li>
		}
	</ul>
}

@code
{
	[Parameter]
	[EditorRequired]
	public int TickIndex { get; set; }

	[Parameter]
	[EditorRequired]
	public List<IEvent> Events { get; set; } = null!;

	private static string? GetJumpColor(JumpType jumpType) => jumpType switch
	{
		JumpType.PreciseHop => "text-red",
		JumpType.Hop => "text-orange",
		_ => null,
	};

	private static bool HideActualEvent(IEvent e)
		=> e is IInputsEvent or EndEvent;
}
