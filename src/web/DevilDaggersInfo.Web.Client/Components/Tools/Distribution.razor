@using DevilDaggersInfo.Web.Client.Enums
@using DevilDaggersInfo.Web.Shared.Dto.Public.Tools
@using DevilDaggersInfo.Web.Shared.Enums

@if (_distribution == null)
{
	<span>Unavailable</span>
	<span></span>
	<span></span>
	<span></span>
}
else
{
	<div>
		@{
			string apiCall = $"/api/tools/{ToolName}/file?publishMethod={PublishMethod}&buildType={BuildType}&version={_distribution.VersionNumber}";
			string fileName = $"{ToolName}{_distribution.VersionNumber}.zip";
			<a class="btn btn-download px-2 py-1" href="@apiCall" download="@fileName" role="button" target="_top">Download @DisplayName @_distribution.VersionNumber</a>
		}
	</div>
	<div>@FileSizeUtils.Format(_distribution.FileSize)</div>
	<div>@OperatingSystems</div>
	<div>
		@if (Prerequisites.HasFlag(ToolDistributionPrerequisites.DotNet6DesktopRuntime))
		{
			<span>Requires <a href="//dotnet.microsoft.com/en-us/download/dotnet/6.0">.NET 6 desktop runtime installation</a></span>
		}
		@if (Prerequisites.HasFlag(ToolDistributionPrerequisites.DotNet6Runtime))
		{
			<span>Requires <a href="//dotnet.microsoft.com/en-us/download/dotnet/6.0">.NET 6 runtime installation</a></span>
		}
	</div>
}

@code
{
	private GetToolDistribution? _distribution;

	[Parameter]
	[EditorRequired]
	public string ToolName { get; set; } = null!;

	[Parameter]
	[EditorRequired]
	public ToolPublishMethod PublishMethod { get; set; }

	[Parameter]
	[EditorRequired]
	public ToolBuildType BuildType { get; set; }

	[Parameter]
	[EditorRequired]
	public string DisplayName { get; set; } = null!;

	[Parameter]
	[EditorRequired]
	public string OperatingSystems { get; set; } = null!;

	[Parameter]
	public ToolDistributionPrerequisites Prerequisites { get; set; }

	[Inject]
	public PublicApiHttpClient Http { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_distribution = await Http.GetLatestToolDistribution(ToolName, PublishMethod, BuildType);
		}
		catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
		{
		}
	}
}
