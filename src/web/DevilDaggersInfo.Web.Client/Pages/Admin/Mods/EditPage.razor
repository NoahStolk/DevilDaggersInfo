@page "/admin/mods/edit/{Id:int}"
@inherits BaseAdminModPage
@using DevilDaggersInfo.Core.Mod.Utils

<AdminAuthorizer Base="this" RequiredRole="@Roles.Mods">
	<AdminEdit Name="Mod" OverviewUrl="/admin/mods" ApiCall="Http.EditModById" Model="_editMod" Id="Id" OnPopulate="async (ec) => await PopulateAsync(ec)">
		<InputWrapper Label="Name"><InputText class="admin-input" @bind-Value="@_editMod.Name" /></InputWrapper>
		<InputWrapper Label="Author(s)"><MultiSearchDropdown Values="@_playerNames" @bind-Value="@_editMod.PlayerIds" /></InputWrapper>
		<InputWrapper Label="Trailer URL"><InputText class="admin-input" @bind-Value="_editMod.TrailerUrl" /></InputWrapper>
		<InputWrapper Label="HTML description"><InputTextArea class="admin-input w-full h-64" @bind-Value="@_editMod.HtmlDescription" /></InputWrapper>
		<InputWrapper Label="Mod types (only for non-hosted)"><MultiSearchDropdown Values="@ModTypes" @bind-Value="@_editMod.ModTypes" /></InputWrapper>
		<InputWrapper Label="URL (only for non-hosted)"><InputText class="admin-input" @bind-Value="@_editMod.Url" /></InputWrapper>
		<InputWrapper Label="Hidden"><InputCheckbox @bind-Value="@_editMod.IsHidden" /></InputWrapper>
		<InputWrapper Label="Binaries to delete"><MultiSelectList Values="@_binaryNames" OnToggleAction="StateHasChanged" @bind-Value="@_editMod.BinariesToDelete" /></InputWrapper>
		<InputWrapper Label="Binaries"><InputFile @onclick="() => _editMod.Binaries.Clear()" OnChange="LoadBinaries" multiple /></InputWrapper>
		<InputWrapper Label="Screenshots to delete"><MultiSelectList Values="@_screenshotNames" OnToggleAction="StateHasChanged" @bind-Value="@_editMod.ScreenshotsToDelete" /></InputWrapper>
		<InputWrapper Label="Screenshots"><InputFile @onclick="() => _editMod.Screenshots.Clear()" OnChange="LoadScreenshots" multiple /></InputWrapper>
	</AdminEdit>
</AdminAuthorizer>

@if (_editMod.BinariesToDelete.Count > 0)
{
	<p class="text-red">Binaries to delete</p>
	<ul class="pl-4">
		@foreach (string binaryName in _editMod.BinariesToDelete)
		{
			<li class="list-disc">@binaryName</li>
		}
	</ul>
}
@if (_editMod.Binaries.Count > 0 || _binaryFileSizeErrors.Count > 0)
{
	<p class="text-red">Binaries to upload</p>
	<ul class="pl-4">
		@foreach (string binaryName in _editMod.Binaries.Select(kvp => kvp.Key))
		{
			<li class="list-disc">@binaryName (will be renamed to @(BinaryFileNameUtils.SanitizeModBinaryFileName(binaryName, _editMod.Name ?? string.Empty)))</li>
		}
		@foreach (string fileSizeError in _binaryFileSizeErrors)
		{
			<li class="list-disc text-red">@fileSizeError</li>
		}
	</ul>
}
@if (_editMod.ScreenshotsToDelete.Count > 0)
{
	<p class="text-red">Screenshots to delete</p>
	<ul class="pl-4">
		@foreach (string screenshot in _editMod.ScreenshotsToDelete)
		{
			<li class="list-disc">@screenshot</li>
		}
	</ul>
}
@if (_editMod.Screenshots.Count > 0 || _screenshotFileSizeErrors.Count > 0)
{
	<p class="text-red">Screenshots to upload</p>
	<ul class="pl-4">
		@{
			foreach (string screenshot in _editMod.Screenshots.OrderBy(kvp => kvp.Key).Select(kvp => kvp.Key))
			{
				<li class="list-disc">@screenshot</li>
			}
			foreach (string fileSizeError in _screenshotFileSizeErrors)
			{
				<li class="list-disc text-red">@fileSizeError</li>
			}
		}
	</ul>
}
