@page
@model DevilDaggersWebsite.Pages.EnemiesModel
@using DevilDaggersWebsite.Utils
@using DevilDaggersWebsite.Models.Game
@{
	string boxShadow = "0 0px 2px 2px";
	ViewData["Title"] = "Enemies";
}

<header>
	<h1>@ViewData["Title"]</h1>
</header>

<main role="main">
	<h2 class="text-center hidden-xs">Summary</h2>
	<div class="">
		<div class="flex-container flex-center hidden-xs" style="flex-direction: column; max-width: 960px; margin-left: auto; margin-right: auto;">
			<div class="enemies-summary-row-top flex-container">
				<div>Enemy</div>
				<div>HP</div>
				<div>Gems</div>
				<div>Death type</div>
				<div>Spawned by</div>
			</div>
			@foreach (Enemy enemy in GameUtils.Enemies)
			{
				<div class="enemies-summary-row-top flex-container">
					<div>@RazorUtils.GetEnemyLayoutAnchor(enemy)</div>
					<div class='text-right'>@enemy.HP</div>
					<div class='text-right'>@enemy.Gems</div>
					<div style='color: #@enemy.Death.ColorCode'>@enemy.Death.Name</div>
					<div>
						@if (enemy.SpawnedBy.Length == 0)
						{
							@:Game
						}
						else
						{
							foreach (Enemy e in enemy.SpawnedBy)
							{
								<span>@RazorUtils.GetEnemyLayoutAnchor(e)</span>
							}
						}
					</div>
				</div>
			}
		</div>
	</div>

	<h2 class="text-center">Details</h2>
	<div class="flex-container flex-center enemy-container">
		@foreach (Enemy enemy in GameUtils.Enemies)
		{
			<div class="enemy" id="@(enemy.Name.Replace(" ", string.Empty))" style="-webkit-box-shadow: @boxShadow #@(enemy.ColorCode); -moz-box-shadow: @boxShadow #@(enemy.ColorCode); box-shadow: @boxShadow #@(enemy.ColorCode);">
				<div class="enemy-row flex-container">
					<div>Enemy</div>
					<div class="text-right" style='color: #@enemy.ColorCode'>@enemy.Name</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Image</div>
					<div><img class="img-responsive pull-right" src='~/Images/Enemies/@(enemy.Name).jpg' /></div>
				</div>
				<div class="enemy-row flex-container">
					<div>HP</div>
					<div class="text-right">@enemy.HP @((enemy.HitPartCount != 1) ? "(" + enemy.HP / enemy.HitPartCount + " x " + enemy.HitPartCount + ")" : "")</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Gems</div>
					<div class="text-right">@enemy.Gems</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Death type</div>
					<div class="text-right" style='color: #@enemy.Death.ColorCode'>@enemy.Death.Name</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Spawned by</div>
					<div class="text-right">
						@if (enemy.SpawnedBy.Length == 0)
						{
							<span style='color: #DDDDDD;'>Game</span>
						}
						else
						{
							foreach (Enemy e in enemy.SpawnedBy)
							{
								<span>@RazorUtils.GetEnemyLayoutAnchor(e)</span>
							}
						}
					</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Behaviour</div>
					<div>
						<ul>
							@{
								string[] strings = GameUtils.EnemyInfo[enemy].Split('\n');
								foreach (string s in strings)
								{
									<li>@RazorUtils.GetLayout(s)</li>
								}
							}
						</ul>
					</div>
				</div>
			</div>
		}
	</div>

	<h2 class="text-center">Damage Stats</h2>
	<p class="text-center">All of this information assumes 100% shot accuracy, and may not be relevant in some cases.</p>
	<div class="flex-container flex-center" style="flex-direction: column;">
		<div class="damage-stats-row-top flex-container">
			<div>Enemy</div>
			<div>Spray (seconds)</div>
			<div>Shots</div>
			<div>Homing daggers</div>
		</div>
		<div class="damage-stats-row flex-container hidden-xs">
			<div>Name</div>
			<div>HP</div>
			@{
				for (int i = 0; i < 3; i++)
				{
					foreach (Upgrade upgrade in GameUtils.Upgrades)
					{
						if (i != 2 || (i == 2 && upgrade.HomingShot != null))
						{
							<div class="hidden-sm hidden-md">
								@RazorUtils.GetUpgradeLayoutAnchor(upgrade)
							</div>
						}
					}
				}
			}
		</div>
		@foreach (Enemy enemy in GameUtils.Enemies)
		{
			<div class="damage-stats-row damage-stats-row-main flex-container hidden-xs">
				<div>@RazorUtils.GetEnemyLayoutAnchor(enemy)</div>
				<div class="text-right">@enemy.HP</div>
				@for (int i = 0; i < 3; i++)
				{
					foreach (Upgrade upgrade in GameUtils.Upgrades)
					{
						switch (i)
						{
							case 0:
								<div class="hidden-sm hidden-md text-right">@((enemy.HP / upgrade.DefaultSpray).ToString("0.0000"))</div>
								break;
							case 1:
								<div class="hidden-sm hidden-md text-right">@Math.Ceiling(enemy.HP / upgrade.DefaultShot)</div>
								break;
							case 2:
								if (upgrade.Level == 3)
								{
									<div class="hidden-sm hidden-md text-right">@(enemy.Homing3 == null ? RazorUtils.NAString : Html.Raw(enemy.Homing3.Value.ToString("0.##")))</div>
								}
								else if (upgrade.Level == 4)
								{
									<div class="hidden-sm hidden-md text-right">@(enemy.Homing4 == null ? RazorUtils.NAString : Html.Raw(enemy.Homing4.Value.ToString("0.##")))</div>
								}
								break;
						}
					}
				}

				@foreach (Upgrade upgrade in GameUtils.Upgrades)
				{
					<div class="hidden-lg text-right">
						@RazorUtils.GetUpgradeLayoutAnchor(upgrade)
					</div>
				}
			</div>

			<div class="visible-xs">
				<div class="damage-stats-row damage-stats-row-main flex-container">
					<div>Name</div>
					<div class="text-right">@RazorUtils.GetEnemyLayoutAnchor(enemy)</div>
				</div>
				<div class="damage-stats-row flex-container">
					<div>HP</div>
					<div class="text-right">@enemy.HP</div>
				</div>

				@for (int i = 0; i < 3; i++)
				{
					foreach (Upgrade upgrade in GameUtils.Upgrades)
					{
						switch (i)
						{
							case 0:
								<div class="damage-stats-row flex-container">
									<div>@RazorUtils.GetUpgradeLayoutAnchor(upgrade) spray (seconds)</div>
									<div class="text-right">@((enemy.HP / upgrade.DefaultSpray).ToString("0.0000"))</div>
								</div>
								break;
							case 1:
								<div class="damage-stats-row flex-container">
									<div>@RazorUtils.GetUpgradeLayoutAnchor(upgrade) shots</div>
									<div class="text-right">@Math.Ceiling(enemy.HP / upgrade.DefaultShot)</div>
								</div>
								break;
							case 2:
								<div class="damage-stats-row flex-container">
									@if (upgrade.Level == 3)
									{
										<div>@RazorUtils.GetUpgradeLayoutAnchor(upgrade) homing daggers</div>
										<div class="text-right">@(enemy.Homing3 == null ? RazorUtils.NAString : Html.Raw(enemy.Homing3.Value.ToString("0.##")))</div>
									}
									else if (upgrade.Level == 4)
									{
										<div>@RazorUtils.GetUpgradeLayoutAnchor(upgrade) homing daggers</div>
										<div class="text-right">@(enemy.Homing4 == null ? RazorUtils.NAString : Html.Raw(enemy.Homing4.Value.ToString("0.##")))</div>
									}
								</div>
								break;
						}
					}
				}
			</div>

			@for (int i = 0; i < 3; i++)
			{
				<div class="damage-stats-row flex-container hidden-xs hidden-lg">
					<div>@(i == 0 ? "Spray (seconds)" : i == 1 ? "Shots" : "Homing daggers")</div>
					<div></div>
					@foreach (Upgrade upgrade in GameUtils.Upgrades)
					{
						switch (i)
						{
							case 0:
								<div class="text-right">@((enemy.HP / upgrade.DefaultSpray).ToString("0.0000"))</div>
								break;
							case 1:
								<div class="text-right">@Math.Ceiling(enemy.HP / upgrade.DefaultShot)</div>
								break;
							case 2:
								if (upgrade.Level == 3)
								{
									<div class="text-right">@(enemy.Homing3 == null ? RazorUtils.NAString : Html.Raw(enemy.Homing3.Value.ToString("0.##")))</div>
								}
								else if (upgrade.Level == 4)
								{
									<div class="text-right">@(enemy.Homing4 == null ? RazorUtils.NAString : Html.Raw(enemy.Homing4.Value.ToString("0.##")))</div>
								}
								else
								{
									<div class="text-right">@RazorUtils.NAString</div>
								}
								break;
						}
					}
				</div>
			}

			if (enemy.HitPartCount != 1)
			{
				<div class="damage-stats-row damage-stats-row-main flex-container hidden-xs">
					<div>@RazorUtils.GetEnemyLayoutAnchor(enemy) (Gem)</div>
					<div class="text-right">@(enemy.HP / enemy.HitPartCount)</div>
					@for (int i = 0; i < 3; i++)
					{
						foreach (Upgrade upgrade in GameUtils.Upgrades)
						{
							switch (i)
							{
								case 0:
									<div class="hidden-sm hidden-md text-right">@((enemy.HP / upgrade.DefaultSpray / enemy.HitPartCount).ToString("0.0000"))</div>
									break;
								case 1:
									<div class="hidden-sm hidden-md text-right">@Math.Ceiling(enemy.HP / upgrade.DefaultShot / enemy.HitPartCount)</div>
									break;
								case 2:
									if (upgrade.Level == 3)
									{
										<div class="hidden-sm hidden-md text-right">@(enemy.Homing3 == null ? RazorUtils.NAString : Html.Raw((enemy.Homing3 / enemy.HitPartCount).Value.ToString("0.##")))</div>
									}
									else if (upgrade.Level == 4)
									{
										<div class="hidden-sm hidden-md text-right">@(enemy.Homing4 == null ? RazorUtils.NAString : Html.Raw((enemy.Homing4 / enemy.HitPartCount).Value.ToString("0.##")))</div>
									}
									break;
							}
						}
					}

					@foreach (Upgrade upgrade in GameUtils.Upgrades)
					{
						<div class="hidden-lg text-right">
							@RazorUtils.GetUpgradeLayoutAnchor(upgrade)
						</div>
					}
				</div>

				<div class="visible-xs">
					<div class="damage-stats-row damage-stats-row-main flex-container">
						<div>Name</div>
						<div class="text-right">@RazorUtils.GetEnemyLayoutAnchor(enemy) (Gem)</div>
					</div>
					<div class="damage-stats-row flex-container">
						<div>HP</div>
						<div class="text-right">@(enemy.HP / enemy.HitPartCount)</div>
					</div>

					@for (int i = 0; i < 3; i++)
					{
						foreach (Upgrade upgrade in GameUtils.Upgrades)
						{
							switch (i)
							{
								case 0:
									<div class="damage-stats-row flex-container">
										<div>@RazorUtils.GetUpgradeLayoutAnchor(upgrade) spray (seconds)</div>
										<div class="text-right">@((enemy.HP / upgrade.DefaultSpray / enemy.HitPartCount).ToString("0.0000"))</div>
									</div>
									break;
								case 1:
									<div class="damage-stats-row flex-container">
										<div>@RazorUtils.GetUpgradeLayoutAnchor(upgrade) shots</div>
										<div class="text-right">@Math.Ceiling(enemy.HP / upgrade.DefaultShot / enemy.HitPartCount)</div>
									</div>
									break;
								case 2:
									<div class="damage-stats-row flex-container">
										@if (upgrade.Level == 3)
										{
											<div>@RazorUtils.GetUpgradeLayoutAnchor(upgrade) homing daggers</div>
											<div class="text-right">@(enemy.Homing3 == null ? RazorUtils.NAString : Html.Raw((enemy.Homing3 / enemy.HitPartCount).Value.ToString("0.##")))</div>
										}
										else if (upgrade.Level == 4)
										{
											<div>@RazorUtils.GetUpgradeLayoutAnchor(upgrade) homing daggers</div>
											<div class="text-right">@(enemy.Homing4 == null ? RazorUtils.NAString : Html.Raw((enemy.Homing4 / enemy.HitPartCount).Value.ToString("0.##")))</div>
										}
									</div>
									break;
							}
						}
					}
				</div>

				@for (int i = 0; i < 3; i++)
				{
					<div class="damage-stats-row flex-container hidden-xs hidden-lg">
						<div>@(i == 0 ? "Spray (seconds)" : i == 1 ? "Shots" : "Homing daggers")</div>
						<div></div>
						@foreach (Upgrade upgrade in GameUtils.Upgrades)
						{
							switch (i)
							{
								case 0:
									<div class="text-right">@((enemy.HP / upgrade.DefaultSpray / enemy.HitPartCount).ToString("0.0000"))</div>
									break;
								case 1:
									<div class="text-right">@Math.Ceiling(enemy.HP / upgrade.DefaultShot / enemy.HitPartCount)</div>
									break;
								case 2:
									if (upgrade.Level == 3)
									{
										<div class="text-right">@(enemy.Homing3 == null ? RazorUtils.NAString : Html.Raw((enemy.Homing3 / enemy.HitPartCount).Value.ToString("0.##")))</div>
									}
									else if (upgrade.Level == 4)
									{
										<div class="text-right">@(enemy.Homing4 == null ? RazorUtils.NAString : Html.Raw((enemy.Homing4 / enemy.HitPartCount).Value.ToString("0.##"))))</div>
									}
									else
									{
										<div class="text-right">@RazorUtils.NAString</div>
									}
									break;
							}
						}
					</div>
				}
			}
		}
	</div>

	<h2 class="text-center">Homing daggers</h2>
	<ul>
		@RazorUtils.GetLayout(@"
		<li>All homing daggers cause 10 damage to most enemies.</li>
		<li>Leviathan, The Orb, Spider Egg I, and Spider Egg II only take 1 damage from homing daggers.</li>
		<li>The Orb, Spider Egg I, and Spider Egg II are the only enemies that are not targeted by any homing daggers.</li>
		<li>Level 4 homing daggers cause splash damage. This means that when they're destroyed, they create a little explosion that can cause damage (most likely 10) to near enemies. For example, you only need one Level 4 homing dagger to kill a Squid II, as the explosion will destroy the other gem.</li>
		<li>Not sure why you need 3 Level 4 homing daggers to kill a Squid III gem, but only 1 Level 3 homing dagger... Seems like a bug.</li>
		<li>Also not sure why you need 10 Level 4 homing daggers to kill a single Transmuted Skull I, while one single Level 3 homing dagger can kill 4 of them... Probably another bug.</li>")
	</ul>
</main>