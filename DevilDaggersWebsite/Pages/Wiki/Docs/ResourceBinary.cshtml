@page
@model DevilDaggersWebsite.Pages.Wiki.Docs.ResourceBinaryModel
@{
	ViewData["Title"] = "Resource Binary";
}

<header>
	<h1>@ViewData["Title"]</h1>
</header>

<main role="main">
	<h2>Format</h2>

	<p>
		The internal structure of resource binaries consists of 3 parts:
	</p>
	<ul>
		<li>Header buffer (12 bytes)</li>
		<li>Table of contents (TOC) buffer (variable amount of bytes)</li>
		<li>Chunk data buffer (variable amount of bytes)</li>
	</ul>

	<h3>Header buffer</h3>
	<p>
		Fixed-length buffer of 12 bytes. Contains the length of the TOC buffer, as well as format identifiers.
	</p>
	<p>
		The header buffer for the default spawnset looks like this:
	</p>
	<div>@await Html.PartialAsync("_BinaryFieldCollection", Model.Header)</div>

	<h3>TOC buffer</h3>
	<p>
		Variable-length buffer that lists all the chunks (assets). Here are the first 3 entries in the TOC buffer for the resource file 'dd':
	</p>
	<div>@await Html.PartialAsync("_BinaryFieldCollection", Model.FirstTocEntry)</div>
	<div>@await Html.PartialAsync("_BinaryFieldCollection", Model.SecondTocEntry)</div>
	<div>@await Html.PartialAsync("_BinaryFieldCollection", Model.ThirdTocEntry)</div>
	<p>
		The first byte represent the chunk type. Here's the list of chunk types:
	</p>
	<ul>
		<li>0x01 - Model</li>
		<li>0x02 - Texture</li>
		<li>0x10 - Shader</li>
		<li>0x11 - Unused/Empty (probably an obsolete way to distinguish vertex shaders from fragment shaders, but they are now in the same chunk)</li>
		<li>0x20 - Audio</li>
		<li>0x80 - Model binding</li>
	</ul>
	<p>
		As you can see, the second TOC entry represents an empty chunk. These were probably meant for fragment shader entries in the TOC buffer but now seem to be unused. Shaders are now 1 chunk containing 2 files (a vertex shader and a fragment shader), but it might not have been like this during development.
	</p>

	<p>
		The rest of the documentation is still being worked on.
	</p>

	<h2>Files</h2>

	<p>
		There are 3 files in Devil Daggers which use this format. These are 'core', 'audio', and 'dd'.
	</p>

	<ul>
		<li><span class="path">devildaggers/core/core</span> contains UI-related shaders.</li>
		<li><span class="path">devildaggers/res/audio</span> contains all audio.</li>
		<li><span class="path">devildaggers/res/dd</span> contains all other assets (models, textures, shaders).</li>
	</ul>

	<h3>audio</h3>
	<p>
		This binary consists of audio files (.wav) and a "loudness" file. It is the largest binary and makes up for almost 90% of all data.
	</p>

	<h4>Loudness</h4>
	<p>
		The loudness file is a plain text file that lists all "loudness" values for most audio. These values are numbers and represent which audio files have priority when playing, e.g. a sound with loudness 2 will be prioritized over a sound with loudness 1 by the audio engine; both sounds will still be played, but the one with the higher loudness value will sound more apparent than the other. Loudness does not correspond to volume. In other words; specifying a higher loudness value doesn't necessary make a certain audio asset louder on its own. You could say that audio assets with a higher loudness value effectively make all other audio assets with lower values more quiet.
	</p>
	<p>
		The loudness specifies the volume for 217 audio assets, 5 of these assets do not exist in the current version of the game (collectgib1loop, collectgib2loop, collectgib3loop, eyepacify, ricochetmagic5).
	</p>
	<p>
		51 audio assets have no loudness specified. When no loudness is specified, the game defaults to loudness 1.0 for these assets.
	</p>
	<p>
		Oddly enough, the binary format treats this file exactly the same as the .wav assets. Devil Daggers Asset Editor treats this file as a .ini file however.
	</p>

	<h3>dd</h3>
	<p>
		This binary consists of models, textures, shaders, and model bindings.
	</p>

	<h3>core</h3>
	<p>
		This binary consists of UI-related shaders. It is the smallest binary. Contains TOC garbage and some more garbage at the end of the file.
	</p>
</main>

@section Styles {
	<link rel='stylesheet' href='~/styles/binary.css' />
}