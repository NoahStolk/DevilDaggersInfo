@page
@model DevilDaggersWebsite.Pages.API.IndexModel
@using DevilDaggersWebsite.Models.API
@using DevilDaggersWebsite.Utils
@using NetBase.Extensions
@using System.Reflection
@{
	ViewData["Title"] = "API Overview";
}

<h1>@ViewData["Title"]</h1>

<main role="main">
	<p class="text-center">
		These are all API functions available. They are currently used in the client-side section of the website and also in <a href="Tools#DevilDaggersSurvivalEditor">DevilDaggersSurvivalEditor</a>, but feel free to use them for any tool or application you've made yourself. This table is automatically generated, so it will always be up to date.
	</p>
</main>

<div class="row text-bold">
	<div class="col-xs-2">Name</div>
	<div class="col-xs-5">Description</div>
	<div class="col-xs-2">Return type</div>
	<div class="col-xs-1">Parameters</div>
	<div class="col-xs-2">Optional parameters</div>
</div>

@{
	foreach (ApiFunction api in Model.ApiFunctions)
	{
		List<string> parameters = new List<string>();
		List<string> optionalParameters = new List<string>();
		foreach (ParameterInfo pInfo in api.Parameters)
		{
			if (pInfo.IsOptional)
			{
				optionalParameters.Add(pInfo.Name);
			}
			else
			{
				parameters.Add(pInfo.Name);
			}
		}
		<div class="row">
			<div class="col-xs-2"><a asp-page=@api.Name>@api.Name</a></div>
			<div class="col-xs-5">@api.FormattedDescription</div>
			<div class="col-xs-2">@api.Attribute.ReturnType</div>
			<div class="col-xs-1 api-parameter">@(parameters.Count != 0 ? Html.Raw(parameters.ItemsAppended<string>(", ")) : RazorUtils.NAString)</div>
			<div class="col-xs-2 api-parameter-optional">@(optionalParameters.Count != 0 ? Html.Raw(optionalParameters.ItemsAppended<string>(", ")) : RazorUtils.NAString)</div>
		</div>
	}
}