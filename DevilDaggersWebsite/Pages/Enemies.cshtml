@page
@model DevilDaggersWebsite.Pages.EnemiesModel
@using DevilDaggersWebsite.Utils
@using DevilDaggersWebsite.Models.Game
@{
	string boxShadow = "0 0px 2px 2px";
	ViewData["Title"] = "Enemies";
	GameHelper.Squid1.Info = new List<string>
{
"Spawns at the edge of the arena",
"Moves slowly and rotates clockwise",
"Spawns 10 Skull Is and 1 Skull II every 20 seconds (starting 3 seconds after its initial appearance)"
};
	GameHelper.Squid2.Info = new List<string>
{
"Spawns at the edge of the arena",
"Moves slowly and rotates clockwise",
"Spawns 10 Skull Is and 1 Skull III every 20 seconds (starting 3 seconds after its initial appearance)"
};
	GameHelper.Squid3.Info = new List<string>
{
"Spawns at the edge of the arena",
"Moves slowly and rotates clockwise",
"Spawns 15 Skull Is and 1 Skull IV every 20 seconds (starting 3 seconds after its initial appearance)"
};
	GameHelper.Centipede.Info = new List<string>
{
"Emerges and flies idly for a while, then starts chasing the player",
"Regularly dives down and moves underground for a while"
};
	GameHelper.Gigapede.Info = new List<string>
{
"Emerges and starts chasing the player immediately"
};
	GameHelper.Ghostpede.Info = new List<string>
{
"Emerges and starts flying in circles high above the arena",
"Attracts and consumes all homing daggers, making them useless"
};
	GameHelper.Leviathan.Info = new List<string>
{
"Attracts and transmutes all skulls every 20 seconds",
"Rotates counter-clockwise",
"Drops The Orb after dying"
};
	GameHelper.Thorn.Info = new List<string>
{
"Takes up space"
};
	GameHelper.Spider1.Info = new List<string>
{
"Spawns at the edge of the arena and starts lifting its head, then faces the player",
"Attracts and consumes gems when facing the player, ejecting them as Spider Egg I one at a time",
"Hides its head when shot and left unharmed for 1 second",
"Begins moving randomly in an unpredictable jittery fashion after initially raising its head"
};
	GameHelper.Spider2.Info = new List<string>
{
"Spawns at the edge of the arena and starts lifting its head (though much slower than Spider I), then faces the player",
"Attracts and consumes gems when facing the player, ejecting them as Spider Egg II one at a time",
"Hides its head when shot and left unharmed for 1 second",
"Begins moving randomly in an unpredictable jittery fashion after initially raising its head (though barely noticeable due to its size)"
};
	GameHelper.Skull1.Info = new List<string>
{
"Slowly chases the player"
};
	GameHelper.Skull2.Info = new List<string>
{
"Moves randomly"
};
	GameHelper.Skull3.Info = new List<string>
{
"Chases the player fast"
};
	GameHelper.Skull4.Info = new List<string>
{
"Chases the player fast"
};
	GameHelper.TransmutedSkull1.Info = new List<string>
{
"Slowly chases the player"
};
	GameHelper.TransmutedSkull2.Info = new List<string>
{
"Moves randomly"
};
	GameHelper.TransmutedSkull3.Info = new List<string>
{
"Chases the player fast"
};
	GameHelper.TransmutedSkull4.Info = new List<string>
{
"Chases the player fast"
};
	GameHelper.SpiderEgg1.Info = new List<string>
{
"Hatches into 5 Spiderlings after 10 seconds"
};
	GameHelper.SpiderEgg2.Info = new List<string>
{
"Hatches into 5 Spiderlings after 10 seconds"
};
	GameHelper.Spiderling.Info = new List<string>
{
"Darts towards the player in bursts with random offsets"
};
	GameHelper.TheOrb.Info = new List<string>
{
"Behaves like an eyeball, will look at the player, then attract and transmute all skulls every 2.5 seconds",
"Becomes stunned under constant fire, cannot look or attract skulls while stunned"
};
}

<header>
	<h1>@ViewData["Title"]</h1>
</header>

<main role="main">
	<h2 class="text-center">Summary</h2>
	<table class="enemies-table" data-show-toggle="false" data-expand-first="false">
		<thead>
			<tr>
				<th>Name</th>
				<th>HP</th>
				<th>Gems</th>
				<th data-breakpoints="xs">Death type</th>
				<th data-breakpoints="xs">Spawned by</th>
			</tr>
		</thead>
		<tbody>
			@foreach (Enemy enemy in GameHelper.Enemies)
			{
				<tr>
					<td>@Html.Raw(RazorUtils.GetEnemyLayoutAnchor(enemy))</td>
					<td class='text-right'>@enemy.HP</td>
					<td class='text-right'>@enemy.Gems</td>
					<td style='color: #@enemy.Death.ColorCode'>@enemy.Death.Name</td>
					<td>
						@if (enemy.SpawnedBy.Length == 0)
						{
							@:Game
						}
						else
						{
							foreach (Enemy e in enemy.SpawnedBy)
							{
								@Html.Raw(RazorUtils.GetEnemyLayoutAnchor(e) + " ")
							}
						}
					</td>
				</tr>
			}
		</tbody>
	</table>

	<h2 class="text-center">Damage Stats</h2>
	<p class="text-center">All of this information assumes 100% shot accuracy, and may not be relevant in some cases.</p>
	<table class="enemies-table" data-show-toggle="false" data-expand-first="false">
		<thead>
			<tr>
				<th colspan='2'>Enemy</th>
				<th class="hidden-xs" colspan='4'>Stream (seconds)</th>
				<th class="hidden-xs" colspan='4'>Shots</th>
				<th class="hidden-xs" colspan='2'>Homing daggers</th>
				<th class="visible-xs">Stream (seconds)</th>
				<th class="visible-xs">Shots</th>
				<th class="visible-xs">Homing daggers</th>
			</tr>
			<tr>
				<th>Name</th>
				<th>HP</th>
				@{
					for (int i = 0; i < 3; i++)
					{
						foreach (Upgrade upgrade in GameHelper.Upgrades)
						{
							if (i != 2 || (i == 2 && upgrade.HomingShot != null))
							{
								<th @((upgrade != GameHelper.Level4) ? "data-breakpoints=xs" : "")><span style='color: #@upgrade.ColorCode;'>@Html.Raw(RazorUtils.GetUpgradeLayoutAnchor(upgrade))</span></th>
							}
						}
					}
				}
			</tr>
		</thead>
		<tbody>
			@foreach (Enemy enemy in GameHelper.Enemies)
			{
				<tr>
					<td>@Html.Raw(RazorUtils.GetEnemyLayoutAnchor(enemy))</td>
					<td class='text-right'>@enemy.HP</td>
					@for (int i = 0; i < 3; i++)
					{
						foreach (Upgrade upgrade in GameHelper.Upgrades)
						{
							switch (i)
							{
								case 0:
									<td class='text-right'>@string.Format("{0:0.0000}", enemy.HP / upgrade.DefaultSpray)</td>
									break;
								case 1:
									<td class='text-right'>@Math.Ceiling(enemy.HP / upgrade.DefaultShot)</td>
									break;
								case 2:
									if (upgrade.Level == 3)
									{
										<td class='text-right'>@(enemy.Homing3 == null ? "N/A" : enemy.Homing3.ToString())</td>
									}
									else if (upgrade.Level == 4)
									{
										<td class='text-right'>@(enemy.Homing4 == null ? "N/A" : enemy.Homing4.ToString())</td>
									}
									break;
							}
						}
					}
				</tr>
				if (enemy.HitPartCount != 1)
				{
					<tr>
						<td><a href="#@enemy.Name.Replace(" ", string.Empty)" style="color: #@enemy.ColorCode">@enemy.Name (Gem)</a></td>
						<td class='text-right'>@(enemy.HP / enemy.HitPartCount)</td>
						@for (int i = 0; i < 3; i++)
						{
							foreach (Upgrade upgrade in GameHelper.Upgrades)
							{
								switch (i)
								{
									case 0:
										<td class='text-right'>@string.Format("{0:0.0000}", enemy.HP / upgrade.DefaultSpray / enemy.HitPartCount)</td>
										break;
									case 1:
										<td class='text-right'>@Math.Ceiling(enemy.HP / upgrade.DefaultShot / enemy.HitPartCount)</td>
										break;
									case 2:
										if (upgrade.Level == 3)
										{
											<td class='text-right'>@(enemy.Homing3 == null ? "N/A" : (enemy.Homing3 / enemy.HitPartCount).ToString())</td>
										}
										else if (upgrade.Level == 4)
										{
											<td class='text-right'>@(enemy.Homing4 == null ? "N/A" : (enemy.Homing4 / enemy.HitPartCount).ToString())</td>
										}
										break;
								}
							}
						}
					</tr>
				}
			}
		</tbody>
	</table>

	<h2 class="text-center">Details</h2>
	<div class="flex-container flex-center upgrade-container">
		@foreach (Enemy enemy in GameHelper.Enemies)
		{
			<div class="upgrade" id="@enemy.Name.Replace(" ", string.Empty)" style="-webkit-box-shadow: @boxShadow #@(enemy.ColorCode); -moz-box-shadow: @boxShadow #@(enemy.ColorCode); box-shadow: @boxShadow #@(enemy.ColorCode);">
				<div class="upgrade-row flex-container">
					<div>Name</div>
					<div class="text-right" style='color: #@enemy.ColorCode'>@enemy.Name</div>
				</div>
				<div class="upgrade-row flex-container">
					<div>Image</div>
					<div><img class="img-responsive pull-right" src='~/Images/Enemies/@(enemy.Name).jpg' /></div>
				</div>
				<div class="upgrade-row flex-container">
					<div>HP</div>
					<div class="text-right">@enemy.HP @((enemy.HitPartCount != 1) ? "(" + enemy.HP / enemy.HitPartCount + " x " + enemy.HitPartCount + ")" : "")</div>
				</div>
				<div class="upgrade-row flex-container">
					<div>Gems</div>
					<div class="text-right">@enemy.Gems</div>
				</div>
				<div class="upgrade-row flex-container">
					<div>Death type</div>
					<div class="text-right" style='color: #@enemy.Death.ColorCode'>@enemy.Death.Name</div>
				</div>
				<div class="upgrade-row flex-container">
					<div>Spawned by</div>
					<div class="text-right">
						@if (enemy.SpawnedBy.Length == 0)
						{
							<span style='color: #DDDDDD;'>Game</span>
						}
						else
						{
							foreach (Enemy e in enemy.SpawnedBy)
							{
								<span>@Html.Raw(RazorUtils.GetEnemyLayoutAnchor(e))</span>
							}
						}
					</div>
				</div>
				<div class="upgrade-row flex-container">
					<div>Behaviour</div>
					<div>
						<ul>
							@for (int i = 0; i < enemy.Info.Count; i++)
							{
								<li>
									@Html.Raw(RazorUtils.GetLayout(enemy.Info[i]))
								</li>
							}
						</ul>
					</div>
				</div>
			</div>
		}
	</div>
</main>