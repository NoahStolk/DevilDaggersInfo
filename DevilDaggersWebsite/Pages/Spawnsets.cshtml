@page
@inject CoreBase.Services.ICommonObjects CommonObjects
@using CoreBase.Code
@using DevilDaggersCore.Game
@using DevilDaggersCore.Spawnsets.Web
@using DevilDaggersWebsite.Code.Utils
@using DevilDaggersWebsite.Code.Spawnsets
@model SpawnsetsModel
@{
	ViewData["Title"] = "Spawnsets";

	int[] widths = new int[2] { 160, 160 };
}

<header>
	<h1>@ViewData["Title"]</h1>
</header>

<main role="main">
	<p class="text-center">
		Here's a list of custom spawnsets created by the community. They can be played in the real game. Read below for more information.
	</p>

	@{
		using (Html.BeginForm(FormMethod.Get))
		{
			<fieldset>
				<div class="flex-container flex-center flex-column">
					<div class="flex-container flex-center">
						<div class="input-label text-left" style="width: @(widths[0])px;">Author search:</div>
						<div style="width: @(widths[1])px;">@Html.TextBoxFor(m => m.SearchAuthor, new { @class = "input" })</div>
					</div>
					<div class="flex-container flex-center">
						<div class="input-label text-left" style="width: @(widths[0])px;">Spawnset search:</div>
						<div style="width: @(widths[1])px;">@Html.TextBoxFor(m => m.SearchName, new { @class = "input" })</div>
					</div>
				</div>

				<div class="flex-container flex-center flex-column">
					<div class="flex-container flex-center">
						<input class="btn" type="submit" value="Search" />
					</div>
				</div>
			</fieldset>
		}

		if (Model.PaginatedSpawnsetFiles != null)
		{
			int last = (int)Math.Ceiling(Model.TotalResults / (float)Model.PageSize);
			int curr = Model.PageIndex;

			<p class="text-center">
				Page @curr of @last
			</p>
			<p class="text-center">
				Showing @((curr - 1) * Model.PageSize + 1) - @(Math.Min(Model.TotalResults, curr * Model.PageSize)) of @Model.TotalResults results
			</p>

			@await Html.PartialAsync("Partials/_SpawnsetNavigationPartial", new SpawnsetNavigationSettings(Model, 20, ScreenWidthVisibility.Lg | ScreenWidthVisibility.Md | ScreenWidthVisibility.Sm))
			@await Html.PartialAsync("Partials/_SpawnsetNavigationPartial", new SpawnsetNavigationSettings(Model, 1, ScreenWidthVisibility.Xs))

			<table>
				<thead>
					<tr>
						<th class="hidden-xs" colspan="3"></th>
						<th class="hidden-xs hidden-sm hidden-md" colspan="2">Non-loop</th>
						<th class="hidden-xs hidden-sm hidden-md" colspan="3">Loop</th>
					</tr>
					<tr class="spawnsets-sort">
						<th width="500">
							<a asp-page="./Spawnsets"
							   asp-route-searchAuthor="@Model.SearchAuthor"
							   asp-route-searchName="@Model.SearchName"
							   asp-route-sortOrder="@Model.NameSort"
							   asp-route-pageIndex="@Model.PageIndex">Name</a>
						</th>
						<th width="220">
							<a asp-page="./Spawnsets"
							   asp-route-searchAuthor="@Model.SearchAuthor"
							   asp-route-searchName="@Model.SearchName"
							   asp-route-sortOrder="@Model.AuthorSort"
							   asp-route-pageIndex="@Model.PageIndex">Author</a>
						</th>
						<th class="hidden-xs" width="160">
							<a asp-page="./Spawnsets"
							   asp-route-searchAuthor="@Model.SearchAuthor"
							   asp-route-searchName="@Model.SearchName"
							   asp-route-sortOrder="@Model.LastUpdated"
							   asp-route-pageIndex="@Model.PageIndex">Last updated</a>
						</th>
						<th class="hidden-xs hidden-sm hidden-md" width="160">
							<a asp-page="./Spawnsets"
							   asp-route-searchAuthor="@Model.SearchAuthor"
							   asp-route-searchName="@Model.SearchName"
							   asp-route-sortOrder="@Model.NonLoopLength"
							   asp-route-pageIndex="@Model.PageIndex">Length</a>
						</th>
						<th class="hidden-xs hidden-sm hidden-md" width="160">
							<a asp-page="./Spawnsets"
							   asp-route-searchAuthor="@Model.SearchAuthor"
							   asp-route-searchName="@Model.SearchName"
							   asp-route-sortOrder="@Model.NonLoopSpawns"
							   asp-route-pageIndex="@Model.PageIndex">Spawns</a>
						</th>
						<th class="hidden-xs hidden-sm hidden-md" width="160">
							<a asp-page="./Spawnsets"
							   asp-route-searchAuthor="@Model.SearchAuthor"
							   asp-route-searchName="@Model.SearchName"
							   asp-route-sortOrder="@Model.LoopLength"
							   asp-route-pageIndex="@Model.PageIndex">Length (wave 1)</a>
						</th>
						<th class="hidden-xs hidden-sm hidden-md" width="160">
							<a asp-page="./Spawnsets"
							   asp-route-searchAuthor="@Model.SearchAuthor"
							   asp-route-searchName="@Model.SearchName"
							   asp-route-sortOrder="@Model.LoopSpawns"
							   asp-route-pageIndex="@Model.PageIndex">Spawns</a>
						</th>
					</tr>
				</thead>
				<tbody>
					@foreach (SpawnsetFile spawnsetFile in Model.PaginatedSpawnsetFiles)
					{
						<tr>
							<td><a asp-page="Spawnset" asp-route-spawnset="@($"{spawnsetFile.Name}_{spawnsetFile.Author}")">@spawnsetFile.Name</a></td>
							<td><a asp-page="/Spawnsets" asp-route-SearchAuthor="@spawnsetFile.Author">@spawnsetFile.Author</a></td>
							<td class="hidden-xs">
								@(spawnsetFile.settings.LastUpdated.ToString("dd MMM yyyy"))
							</td>
							<td class="hidden-xs hidden-sm hidden-md">
								@(!spawnsetFile.spawnsetData.NonLoopLength.HasValue ? RazorUtils.NAString : Html.Raw(spawnsetFile.spawnsetData.NonLoopLength.Value.ToString("0.0000")))
							</td>
							<td class="hidden-xs hidden-sm hidden-md">
								@(spawnsetFile.spawnsetData.NonLoopSpawns == 0 ? RazorUtils.NAString : Html.Raw(spawnsetFile.spawnsetData.NonLoopSpawns))
							</td>
							<td class="hidden-xs hidden-sm hidden-md">
								@(!spawnsetFile.spawnsetData.LoopLength.HasValue ? RazorUtils.NAString : Html.Raw(spawnsetFile.spawnsetData.LoopLength.Value.ToString("0.0000")))
							</td>
							<td class="hidden-xs hidden-sm hidden-md">
								@(spawnsetFile.spawnsetData.LoopSpawns == 0 ? RazorUtils.NAString : Html.Raw(spawnsetFile.spawnsetData.LoopSpawns))
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
		else
		{
			<p class="text-center">Search returned no results</p>
		}
	}

	<h2>How to play spawnsets</h2>
	<h3>The easy way</h3>
	<ol>
		<li>Download <a asp-page="/Tools/DevilDaggersSurvivalEditor">DevilDaggersSurvivalEditor</a>.</li>
		<li>Go to "File", then "Open from DevilDaggers.info".</li>
		<li>Click on the spawnset you want to play and click "Yes" when it asks you if you want it to replace the current survival file.</li>
	</ol>
	<h3>The original way</h3>
	<ol>
		<li>Select the spawnset you want to play from the list above.</li>
		<li>Click the download button.</li>
		<li>Rename the file to "survival" (no quotes). The file should not have a file extension.</li>
		<li>
			Navigate to the directory where Devil Daggers is installed and open the folder named "dd".<br />
			By default, this is <span class="dont-break-out" style="color: red;">C:\Program Files (x86)\Steam\steamapps\common\devildaggers\dd</span> on Windows.
		</li>
		<li>Replace the file called "survival" with the file you just downloaded.</li>
	</ol>
	<h3>Notes</h3>
	<ul>
		<li>You can replace the "survival" file while Devil Daggers is running. Just make sure to go back to the main menu before playing again, otherwise it won't change. The game reloads the file every time you grab the dagger in the lobby.</li>
		<li>If the currently active custom spawnset has a modified arena, replays from the official leaderboards will NOT work properly and will likely crash the game.</li>
	</ul>

	<h2>FAQ</h2>
	<div class="faq-question">Can I get banned for using custom spawnsets?</div>
	<div class="faq-answer">No, you can only get banned manually by the developer for submitting illegitimate runs to the official leaderboard.</div>
	<div class="faq-question">Can I override my real score using a custom spawnset?</div>
	<div class="faq-answer">No, the game only uploads scores done with the original V3 spawnset.</div>
	<div class="faq-question">The game doesn't submit my scores anymore even though I put the original survival file back in the dd folder. Why?</div>
	<div class="faq-answer">
		In order to be absolutely certain that the survival file is verified, follow these steps:<br />
		<ol>
			<li>Go to your Steam library.</li>
			<li>Right click on Devil Daggers.</li>
			<li>Click "Properties".</li>
			<li>Select the tab "Local files".</li>
			<li>Click "Verify integrity of game files".</li>
		</ol>
		NOTE: Keep an eye out for the "Score not submitted (error)" message. This indicates that your currently active survival file is not accepted by the official leaderboard servers.
	</div>
	<div class="faq-question">How do I make my own spawnsets?</div>
	<div class="faq-answer">Download <a asp-page="/Tools/DevilDaggersSurvivalEditor">DevilDaggersSurvivalEditor</a>.</div>
	<div class="faq-question">I've made my own custom spawnsets that I want to share with the community. Can I get them listed on here?</div>
	<div class="faq-answer">
		Yes, certainly. Send the file to <a href="mailto:@RazorUtils.ContactEmail">@RazorUtils.ContactEmail</a>, or just join the <a href="@RazorUtils.DiscordUrl">Discord server</a> and send it there.<br />
		Please include the following information:<br />
		<ul>
			<li>Spawnset name</li>
			<li>Author</li>
			<li>Description (optional)</li>
			<li>If you have an end loop, you can specify how many end waves should be shown. The default is @SpawnsetUtils.DefaultMaxWaves.</li>
		</ul>
	</div>

	<h2>How spawnsets work</h2>
	<h3>Spawns</h3>
	<ul>
		<li>@RazorUtils.GetLayout("10 enemies can be spawned in the game. These are Squid I, Squid II, Centipede, Spider I, Leviathan, Gigapede, Squid III, Thorn, Spider II, and Ghostpede (respectively). The order is defined by the survival file structure. All enemies have a one-digit ID.", GameInfo.GameVersions[GameInfo.DEFAULT_GAME_VERSION])</li>
		<li>Additionally, there is an EMPTY spawn with ID -1. This has no purpose except that the end loop starts after the last EMPTY spawn.</li>
		<li>Every enemy type has a fixed amount of gems that it drops, this is why <a asp-page="/Tools/DevilDaggersSurvivalEditor">DDSE</a> keeps track of gems so you can have a rough idea of when you will get upgrades (unless farming is done). It is recommended that you understand how <a asp-page="/Wiki/Upgrades">Hand Upgrades</a> work.</li>
		<li>Every spawn contains an enemy ID and a delay value. The enemy ID (-1 to 9) represents which enemy will be spawned. The delay value represents the amount of seconds between the current spawn and the previous spawn.</li>
		<li>The delay value supports decimal values, even though the original spawnset in the game doesn't use this. This means you can spawn an enemy, for example at 4.5 seconds.</li>
		<li>The end loop is the same set of spawns over and over again, faster every time. After every wave, each enemy spawns an added 12.5% faster.</li>
		<li>@RazorUtils.GetLayout("Every third wave of the end loop, all Gigapedes are changed into Ghostpedes. This is hardcoded within the game and cannot be changed.", GameInfo.GameVersions[GameInfo.DEFAULT_GAME_VERSION])</li>
	</ul>
	<h3>Arena</h3>
	<p>
		Note that you don't necessarily need to understand how the arena works, as the default arena works fine.
	</p>
	<ul>
		<li>The maximum arena size is 51 by 51.</li>
		<li>The player always spawns at coordinate {25, 25}.</li>
		<li>You can only have 1 tile per coordinate.</li>
		<li>The default arena size is 23 by 23 tiles at the start. This is equivalent to shrink radius 50 (technically the arena would be 25 by 25 but, because of shrinking controls, the outer tiles are already shrunk at the very beginning).</li>
		<li>The arena shrinks in size as time goes on. The default shrink start radius is 50 and the default shrink end radius is 20. The default shrink rate is 0.025. This means the default arena reaches the end radius at 1200 seconds, since (50-20)/0.025 = 1200. (Although not exactly because the shrinking radius will not hit the next tiles exactly at 1200, I haven't bothered with the math behind this, but the last tiles shrink around 1187 seconds. The shrinking technically continues for about 13 seconds but no tiles are affected by it.)</li>
		<li>The original spawnset doesn't use different tile heights, all the tiles are around height 0. (Though there are some tiny differences that are barely noticable, but for convenience we could say that all the tiles are at height 0 and that 0 is the default height.)</li>
		<li>The player can stand on tiles with height -1, but anything lower than that will result in the tile falling down immediately. All tiles below -1 are essentially the same for this reason, so <a asp-page="/Tools/DevilDaggersSurvivalEditor">DDSE</a> considers any tile with a height below -1 to be "void".</li>
		<li>The tile at coordinate {1, 0} is always invisible for some reason, but you can still walk on it.</li>
		<li>The player can be spawned on different tile heights.</li>
		<li>@RazorUtils.GetLayout("Enemies and gems do not react to different tile heights, only the player, the daggers, and some effects do (like Thorn spawn smokes, meat chunks, etc).")</li>
		<li>The maximum tile height within <a asp-page="/Tools/DevilDaggersSurvivalEditor">DDSE</a> is set to 54, because anything higher than that seems unnecessary and the main light in the game doesn't reach that far so everything is completely black.</li>
		<li>There is one particular tile which causes Devil Daggers to glitch (audio glitches, hand disappearing, crashes) whenever its height is put to a value greater than 0.4973333. This tile is always at coordinate {25, 27} (just below the player spawn).</li>
		<li>The game crashes when you get too near the edge of a full arena (outside of the regular 51 by 51 range, and I think at or around coordinate {0, 0} but I am not sure).</li>
		<li>The tiles have infinitely long hitboxes, but the texture only covers the top of it.</li>
		<li>1 tile height is equivalent to 1/4 of a tile (let's say it is a cube). So if you could stack tiles on top of each other, the first tile would be at height 0, the second at height 4, the third at height 8, and so on.</li>
		<li>The player's jump height is equivalent to 1 tile height (1/4 of a tile).</li>
		<li>The player's dagger jump height is just below 5 tile heights. So, from tile height 0, you can dagger jump on a tile with height 4, but not 5.</li>
		<li>The player's double dagger jump height is just below 8 tile heights. So, from tile height 0, you can double dagger jump on a tile with height 7, but not 8.</li>
	</ul>

	@*
		using System;

		namespace DevilDaggersEndLoop
		{
		public static class Program
		{
		public static void Main()
		{
		const float physicsTick = 1 / 60f;

		int[] loopSeconds = new int[] { 5, 8, 11, 16, 21, 22, 23, 33, 34, 35, 40, 41, 46, 51, 56 };

		double waveModifier = 0.0;
		double seconds = 451.0; // loop start

		for (int i = 0; i < 20; i++) // wave index
		{
		double enemyTimer = 0.0;
		for (int j = 0; j < loopSeconds.Length; j++)
		{
		while (enemyTimer < loopSeconds[j])
		{
		seconds += physicsTick;
		enemyTimer += physicsTick + waveModifier;
		}
		Console.WriteLine((Math.Floor(seconds * 60) / 60).ToString("0.0000"));
		}
		waveModifier += physicsTick / 8.0; // After every end wave, each enemy spawns an added 12.5% (100% / 8) faster.
		}
		}
		}
		}*@
</main>

@section Styles {
	<link rel='stylesheet' href='~/styles/spawnsets.css' />
}