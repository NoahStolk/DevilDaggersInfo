@using DevilDaggersCore
@using DevilDaggersCore.Game
@using DevilDaggersCore.Leaderboards
@using DevilDaggersWebsite.Code.Donations
@using DevilDaggersWebsite.Code.Users
@using DevilDaggersWebsite.Code.Utils
@inject CoreBase3.Services.ICommonObjects CommonObjects

<div class="leaderboard-container flex-container flex-center">
	<div class="leaderboard-title-row flex-container">
		<div class="sorter text-center" sort="rank">#</div>
		<div class="sorter text-center" sort="flag">Flag</div>
		<div class="sorter text-center" sort="username">Username</div>
		<div class="sorter text-center" sort="time">Time</div>

		<div class="sorter hidden-xs text-center" sort="e-dpi">eDPI</div>
		<div class="sorter hidden-xs text-center" sort="dpi">DPI</div>
		<div class="sorter hidden-xs text-center" sort="in-game-sens">In-game sens</div>
		<div class="sorter hidden-xs text-center" sort="fov">FOV</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="hand">Hand orientation</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="flash">Hand flash</div>
	</div>
	<div class="leaderboard-body">
		@{
			IEnumerable<Flag> flags = UserUtils.GetFlags(CommonObjects);
			IEnumerable<UserTitleCollection> titleCollections = UserUtils.GetTitleCollections(CommonObjects);
			IEnumerable<PlayerSetting> settings = UserUtils.GetPlayerSettings(CommonObjects);
			IEnumerable<Donator> unanonymousDonators = DonationList.Donators.Where(d => !d.IsAnonymous);
			foreach (Entry entry in Model.Leaderboard.Entries)
			{
				bool isUnanonymousDonator = unanonymousDonators.Any(d => d.Id == entry.Id);

				string flagCode = flags.FirstOrDefault(f => f.Id == entry.Id)?.CountryCode ?? "00";

				UserTitleCollection titles = titleCollections.FirstOrDefault(t => t.Id == entry.Id);

				PlayerSetting playerSetting = settings.FirstOrDefault(s => s.Id == entry.Id);
				if (playerSetting == null)
				{
					continue;
				}

				Dagger dagger = GameInfo.GetDaggerFromTime(entry.Time);
				Death death = GameInfo.GetDeathFromDeathType(entry.DeathType, GameInfo.GetGameVersionFromDate(Model.Leaderboard.DateTime));

				string daggerColor = dagger.Name.ToLower();
				string deathStyle = $"color: #{death.ColorCode};";

				<div class="sort" @entry.ToHtmlData(flagCode, playerSetting)>
					<div class="leaderboard-row flex-container" id="@(entry.Rank)-row">
						<div class="text-right"><span data-toggle="tooltip" title="@entry.Id" class="leaderboard-tooltip">@entry.Rank</span></div>
						<div>
							@if (flagCode == "00")
							{
								<span><img src="/images/Flags/24x24/@(flagCode).png" /></span>
							}
							else
							{
								<span class="leaderboard-tooltip" data-toggle="tooltip" title="@UserUtils.CountryNames[flagCode]"><img src="/images/Flags/24x24/@(flagCode).png" /></span>
							}
						</div>
						<div class="text-left leaderboard-username">
							<span class="@daggerColor">@entry.Username</span>
							@{
								if (titles != null)
								{
									foreach (string title in titles.Titles)
									{
										<span class="leaderboard-tooltip" data-toggle="tooltip" title="@title"><img src="/images/Icons/@(UserUtils.TitleImages[title]).png" /></span>
									}
								}
								if (isUnanonymousDonator)
								{
									string title = "Donator";
									<span class="leaderboard-tooltip" data-toggle="tooltip" title="@title"><img src="/images/Icons/@(UserUtils.TitleImages[title]).png" /></span>
								}
							}
						</div>
						<div class="text-right @daggerColor">@(entry.Time.FormatTimeInteger())</div>
						<div class="hidden-xs text-right">@(playerSetting.Edpi != null ? playerSetting.Edpi.Value.ToString(FormatUtils.MouseSensitivityFormat) : string.Empty)</div>
						<div class="hidden-xs text-right">@playerSetting.Dpi</div>
						<div class="hidden-xs text-right">@(playerSetting.InGameSens != null ? playerSetting.InGameSens.Value.ToString(FormatUtils.MouseSensitivityFormat) : string.Empty)</div>
						<div class="hidden-xs text-right">@playerSetting.Fov</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@playerSetting.RightHandedString</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@playerSetting.FlashEnabledString</div>
					</div>
					<div class="leaderboard-expand flex-container" id="@(entry.Rank)-expand">
						<div class="visible-xs">
							<div class="text-left">eDPI</div>
							<div class="text-right">@(playerSetting.Edpi != null ? playerSetting.Edpi.Value.ToString(FormatUtils.MouseSensitivityFormat) : string.Empty)</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">DPI</div>
							<div class="text-right">@playerSetting.Dpi</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">In-game sens</div>
							<div class="text-right">@(playerSetting.InGameSens != null ? playerSetting.InGameSens.Value.ToString(FormatUtils.MouseSensitivityFormat) : string.Empty)</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">FOV</div>
							<div class="text-right">@playerSetting.Fov</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Hand orientation</div>
							<div class="text-right">@playerSetting.RightHandedString</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Hand flash</div>
							<div class="text-right">@playerSetting.FlashEnabledString</div>
						</div>
						<div style="padding-top: 1em;">
							<a asp-page="../Leaderboard/Index" asp-route-UserId="@entry.Id">View more info</a>
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>