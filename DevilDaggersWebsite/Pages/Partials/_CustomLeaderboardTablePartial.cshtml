@model List<CustomLeaderboard>
@using DevilDaggersCore.Extensions
@using DevilDaggersCore.Utils
@using DevilDaggersWebsite.Code.Database
@using DevilDaggersWebsite.Code.Utils
@using System.Linq
@inject DevilDaggersWebsite.Code.Database.ApplicationDbContext dbContext

@{
	if (Model.Count == 0)
	{
		<p>No leaderboards for this category yet</p>
		return;
	}
}

<table class="custom-leaderboard-table">
	<thead>
		<tr>
			<th width="300">
				Spawnset name
			</th>
			<th width="200">
				Spawnset author
			</th>
			<th class="hidden-xs" width="100">
				Players
			</th>
			<th class="hidden-xs" width="200">
				Last played
			</th>
			<th class="hidden-xs" width="150">
				Created
			</th>
			<th class="hidden-xs hidden-sm hidden-md" width="100">
				Bronze
			</th>
			<th class="hidden-xs hidden-sm hidden-md" width="100">
				Silver
			</th>
			<th class="hidden-xs hidden-sm hidden-md" width="100">
				Golden
			</th>
			<th class="hidden-xs hidden-sm hidden-md" width="100">
				Devil
			</th>
			<th class="hidden-xs hidden-sm hidden-md" width="100">
				Homing
			</th>
			<th class="hidden-xs hidden-sm hidden-md" width="200" colspan="2">
				World record
			</th>
			@*<th class="hidden-xs hidden-sm hidden-md" width="400" colspan="4">
					Completion rate
				</th>*@
		</tr>
	</thead>
	<tbody>
		@{
			foreach (CustomLeaderboard lb in Model)
			{
				string fileName = lb.SpawnsetFileName;
				string name = Code.DataTransferObjects.SpawnsetFile.GetName(fileName);
				string author = Code.DataTransferObjects.SpawnsetFile.GetAuthor(fileName);
				List<CustomEntry> entries = dbContext.CustomEntries.Where(e => e.CustomLeaderboard == lb).OrderByMember(lb.Category.SortingPropertyName, lb.Category.Ascending).ToList();
				string wrDagger = "";
				if (entries.Count > 0)
				{
					wrDagger = lb.GetDagger(entries[0].Time);
				}
				<tr>
					<td class="leaderboard-spawnset-name">
						<a asp-page="/CustomLeaderboards/Leaderboard" asp-route-spawnset="@fileName">@name</a>
					</td>
					<td>
						<a asp-page="/Spawnsets" asp-route-SearchAuthor="@author">@author</a>
					</td>
					<td class="text-right hidden-xs">
						@dbContext.CustomEntries.Where(e => e.CustomLeaderboardId == lb.Id).Count()
					</td>
					<td class="text-right hidden-xs">
						@(lb.DateLastPlayed.HasValue ? Html.Raw(lb.DateLastPlayed.Value.ToString("dd MMM yyyy, HH:mm")) : RazorUtils.NAString)
					</td>
					<td class="text-right hidden-xs">
						@(lb.DateCreated.HasValue ? Html.Raw(lb.DateCreated.Value.ToString("dd MMM yyyy")) : RazorUtils.NAString)
					</td>
					<td class="text-right hidden-xs hidden-sm hidden-md bronze">
						@(lb.Bronze.FormatTimeInteger())
					</td>
					<td class="text-right hidden-xs hidden-sm hidden-md silver">
						@(lb.Silver.FormatTimeInteger())
					</td>
					<td class="text-right hidden-xs hidden-sm hidden-md golden">
						@(lb.Golden.FormatTimeInteger())
					</td>
					<td class="text-right hidden-xs hidden-sm hidden-md devil">
						@(lb.Devil.FormatTimeInteger())
					</td>
					<td class="text-right hidden-xs hidden-sm hidden-md homing">
						@if (lb.Homing != 0)
						{
							@(lb.Homing.FormatTimeInteger())
						}
					</td>
					<td class="@wrDagger hidden-xs hidden-sm hidden-md leaderboard-username">
						@{
							if (entries.Count == 0)
							{
								@:@RazorUtils.NAString
							}
							else
							{
								@(dbContext.Players.FirstOrDefault(p => p.Id == entries[0].PlayerId)?.Username ?? "[Player not found]")
							}
						}
					</td>
					<td class="text-right hidden-xs hidden-sm hidden-md @wrDagger">
						@{
							if (entries.Count > 0)
							{
								@(entries[0].Time.FormatTimeInteger())
							}
						}
					</td>
					@*<td class="text-right hidden-xs hidden-sm hidden-md bronze">
							@(entries.Count == 0 ? "0.00%" : (entries.Where(e => e.Time >= lb.Bronze).Count() / (float)entries.Count).ToString("0.00%"))
						</td>
						<td class="text-right hidden-xs hidden-sm hidden-md silver">
							@(entries.Count == 0 ? "0.00%" : (entries.Where(e => e.Time >= lb.Silver).Count() / (float)entries.Count).ToString("0.00%"))
						</td>
						<td class="text-right hidden-xs hidden-sm hidden-md golden">
							@(entries.Count == 0 ? "0.00%" : (entries.Where(e => e.Time >= lb.Golden).Count() / (float)entries.Count).ToString("0.00%"))
						</td>
						<td class="text-right hidden-xs hidden-sm hidden-md devil">
							@(entries.Count == 0 ? "0.00%" : (entries.Where(e => e.Time >= lb.Devil).Count() / (float)entries.Count).ToString("0.00%"))
						</td>
						@if (lb.Homing != 0)
						{
							<td class="text-right hidden-xs hidden-sm hidden-md homing">
								@(entries.Count == 0 ? "0.00%" : (entries.Where(e => e.Time >= lb.Homing).Count() / (float)entries.Count).ToString("0.00%"))
							</td>
						}*@
				</tr>
			}
		}
	</tbody>
</table>