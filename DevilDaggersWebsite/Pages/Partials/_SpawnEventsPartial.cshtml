@model SpawnEventSettings
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@using DevilDaggersCore.Game
@using DevilDaggersCore.Spawnsets
@using DevilDaggersCore.Spawnsets.Events
@using DevilDaggersCore.Spawnsets.Web
@using DevilDaggersCore.Utils
@using DevilDaggersWebsite.Code.Spawnsets
@using DevilDaggersWebsite.Code.Utils
@using System.IO
@{
	int[] widths = new int[6] { 160, 512, 144, 128, 144, 128 };

	SpawnsetFile sf = SpawnsetUtils.CreateSpawnsetFileFromSettingsFile(env, Model.SpawnsetPath);
	Spawnset spawnset;
	using (FileStream fs = new FileStream(Model.SpawnsetPath, FileMode.Open, FileAccess.Read))
	{
		if (!Spawnset.TryParse(fs, out spawnset))
		{
			return;
		}
	}

	GameVersion gameVersion = GameInfo.GameVersions[GameInfo.DefaultGameVersion];
	if (sf.Author == "Sorath")
	{
		if (sf.Name == "V1")
		{
			gameVersion = GameInfo.GameVersions["V1"];
		}
		else if (sf.Name == "V2")
		{
			gameVersion = GameInfo.GameVersions["V2"];
		}
	}

	int maxWaves = sf.settings.MaxWaves ?? SpawnsetUtils.DefaultMaxWaves;
	string wavesQuery = httpContextAccessor.HttpContext.Request.Query["waves"];
	if (int.TryParse(wavesQuery, out int t))
	{
		if (t > 0)
		{
			maxWaves = t;
		}
	}

	bool empty = true;
	foreach (Spawn spawn in spawnset.Spawns.Values)
	{
		if (spawn.SpawnsetEnemy != Spawnset.Enemies[-1])
		{
			empty = false;
			break;
		}
	}

	<div class="flex-container flex-center flex-column text-center">
		@if (spawnset.Spawns.Count > 0 && !empty)
		{
			<div class="flex-container flex-center">
				<div style="width: @(widths[0])px;">Time</div>
				<div style="width: @(widths[1])px;">Event</div>
				<div style="width: @(widths[2])px;">Gems</div>
				<div style="width: @(widths[3])px;">Total gems</div>
				<div style="width: @(widths[4])px;">Kills</div>
				<div style="width: @(widths[5])px;">Total kills</div>
			</div>

			int totalGems = 0;
			int totalKills = 0;

			foreach (AbstractEvent evt in spawnset.GenerateSpawnsetEventList(Model.SquidGushCount, Model.LeviathanBeckonCount, 25, GameInfo.GameVersions["V3"]))
			{
				int gems = 0;
				int kills = 0;

				if (evt is SpawnEvent spawnEvent)
				{
					if (spawnEvent.Enemy == Spawnset.Enemies[-1])
					{
						continue;
					}

					Enemy enemy = spawnEvent.Enemy.ToEnemy();

					gems = enemy.Gems;
					kills = enemy.RegisterKill ? 1 : 0;
				}
				else if (evt is GushEvent gushEvent)
				{
					foreach (KeyValuePair<Enemy, int> kvp in gushEvent.Enemies)
					{
						gems += kvp.Key.Gems * kvp.Value;
						kills += (kvp.Key.RegisterKill ? 1 : 0) * kvp.Value;
					}
				}

				totalGems += gems;
				totalKills += kills;

				<div class="flex-container flex-center">
					<div style="width: @(widths[0])px;" class="text-right">@evt.Seconds.ToString(FormatUtils.SpawnTimeFormat)</div>
					<div style="width: @(widths[1])px;">@(RazorUtils.GetLayout($" {evt.Name} ", gameVersion))</div>
					<div style="width: @(widths[2])px;" class="text-right">@gems</div>
					<div style="width: @(widths[3])px;" class="text-right">@totalGems</div>
					<div style="width: @(widths[4])px;" class="text-right">@kills</div>
					<div style="width: @(widths[5])px;" class="text-right">@totalKills</div>
				</div>
			}
		}
	</div>
}