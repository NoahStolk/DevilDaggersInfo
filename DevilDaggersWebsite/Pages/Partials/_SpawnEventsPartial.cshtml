@model string
@inject CoreBase.Services.ICommonObjects commonObjects
@using DevilDaggersCore.Game
@using DevilDaggersCore.Spawnset
@using DevilDaggersCore.Spawnset.Events
@using DevilDaggersWebsite.Utils
@using Newtonsoft.Json
@using System.IO
@{
	int[] widths = new int[6] { 160, 512, 144, 128, 144, 128 };

	Spawnset spawnset;
	using (FileStream fs = new FileStream(Model, FileMode.Open, FileAccess.Read))
	{
		if (!Spawnset.TryParse(fs, out spawnset))
		{
			return;
		}
	}

	bool empty = true;
	foreach (Spawn spawn in spawnset.Spawns.Values)
	{
		if (spawn.SpawnsetEnemy != Spawnset.Enemies[-1])
		{
			empty = false;
			break;
		}
	}

	bool showSpawns = (spawnset.Spawns.Count > 0 && !empty);

	int maxWaves = RazorUtils.DEFAULT_MAX_WAVES;
	string fileName = Model.Substring(Model.LastIndexOf('/') + 1, Model.LastIndexOf('_') - Model.LastIndexOf('/') - 1);
	foreach (string settingsPath in Directory.GetFiles(System.IO.Path.Combine(commonObjects.Env.WebRootPath, "spawnsets", "Settings")))
	{
		if (System.IO.Path.GetFileName(settingsPath.Substring(0, settingsPath.LastIndexOf('.'))) == fileName)
		{
			string jsonString = System.IO.File.ReadAllText(settingsPath);
			dynamic json = JsonConvert.DeserializeObject(jsonString);

			if (!int.TryParse((string)json.MaxWaves, out maxWaves))
			{
				// JSON parse failed but we don't really care
				maxWaves = RazorUtils.DEFAULT_MAX_WAVES;
			}

			break;
		}
	}

	GameVersion gameVersion = Game.GameVersions[Game.DEFAULT_GAME_VERSION];
	if (Model.Contains("V1_Sorath"))
	{
		gameVersion = Game.GameVersions["V1"];
	}
	else if (Model.Contains("V2_Sorath"))
	{
		gameVersion = Game.GameVersions["V2"];
	}

	string wavesQuery = commonObjects.HttpContextAccessor.HttpContext.Request.Query["waves"];
	if (int.TryParse(wavesQuery, out int t))
	{
		if (t > 0)
		{
			maxWaves = t;
		}
	}

	<div class="flex-container flex-center flex-column text-center">
		@if (showSpawns)
		{
			<div class="flex-container flex-center">
				<div style="width: @(widths[0])px;">Time</div>
				<div style="width: @(widths[1])px;">Event</div>
				<div style="width: @(widths[2])px;">Gems</div>
				<div style="width: @(widths[3])px;">Total gems</div>
				<div style="width: @(widths[4])px;">Kills</div>
				<div style="width: @(widths[5])px;">Total kills (minimal)</div>
			</div>

			int totalGems = 0;
			int totalKills = 0;

			foreach (AbstractEvent evt in spawnset.GenerateSpawnsetEventList(10, 10))
			{
				int gems = 0;
				int kills = 0;

				if (evt is SpawnEvent spawnEvent)
				{
					if (spawnEvent.Enemy == Spawnset.Enemies[-1])
					{
						continue;
					}

					Enemy enemy = spawnEvent.Enemy.ToEnemy();

					gems = enemy.Gems;
					kills = enemy.RegisterKill ? 1 : 0;
				}
				else if (evt is GushEvent gushEvent)
				{
					foreach (KeyValuePair<Enemy, int> kvp in gushEvent.Enemies)
					{
						gems += kvp.Key.Gems * kvp.Value;
						kills += (kvp.Key.RegisterKill ? 1 : 0) * kvp.Value;
					}
				}

				totalGems += gems;
				totalKills += kills;

				<div class="flex-container flex-center">
					<div style="width: @(widths[0])px;" class="text-right">@evt.Seconds.ToString("0.0000")</div>
					<div style="width: @(widths[1])px;">@(RazorUtils.GetLayout($" {evt.Name} ", gameVersion))</div>
					<div style="width: @(widths[2])px;" class="text-right">@gems</div>
					<div style="width: @(widths[3])px;" class="text-right">@totalGems</div>
					<div style="width: @(widths[4])px;" class="text-right">@kills</div>
					<div style="width: @(widths[5])px;" class="text-right">@totalKills</div>
				</div>
			}
		}
	</div>
}