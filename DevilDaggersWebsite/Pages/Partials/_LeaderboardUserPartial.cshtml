@using DevilDaggersCore
@using DevilDaggersCore.Game
@using DevilDaggersCore.Leaderboards
@using DevilDaggersWebsite.Code.Donations
@using DevilDaggersWebsite.Code.Users
@using DevilDaggersWebsite.Code.Utils
@using DevilDaggersWebsite.Pages.Leaderboard
@inject CoreBase3.Services.ICommonObjects CommonObjects

<div class="leaderboard-container flex-container flex-center">
	<div class="leaderboard-title-row flex-container">
		<div class="sorter text-center" sort="rank">#</div>
		<div class="sorter text-center" sort="flag">Flag</div>
		<div class="sorter text-center" sort="username">Username</div>
		<div class="sorter text-center" sort="time">Time</div>
		<div class="sorter hidden-xs text-center" sort="kills">Kills</div>
		<div class="sorter hidden-xs text-center" sort="gems">Gems</div>
		<div class="sorter hidden-xs text-center" sort="accuracy">Accuracy</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="death-type">Death type</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="total-time">Total time</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="total-kills">Total kills</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="total-gems">Total gems</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="total-accuracy">Total accuracy</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="total-deaths">Total deaths</div>
	</div>
	<div class="leaderboard-body">
		@{
			bool isHistory = Model.GetType() == typeof(HistoryModel);

			IEnumerable<Ban> bans = UserUtils.GetBans(CommonObjects);
			IEnumerable<Flag> flags = UserUtils.GetFlags(CommonObjects);
			IEnumerable<UserTitleCollection> titleCollections = UserUtils.GetTitleCollections(CommonObjects);
			foreach (Entry entry in Model.Leaderboard.Entries)
			{
				Ban ban = bans.Where(b => b.Id == entry.Id).FirstOrDefault();
				bool banned = ban != null;
				string rankString = entry.Rank.ToString();

				bool isDonator = entry.Id != 0 && DonationList.Donations.Any(d => d.DonatorId == entry.Id && !DonationList.Donators.FirstOrDefault(dd => dd.Id == d.DonatorId).IsAnonymous);
				Flag flag = flags.Where(f => f.Id == entry.Id).FirstOrDefault();
				UserTitleCollection titles = titleCollections.Where(t => t.Id == entry.Id).FirstOrDefault();

				Dagger dagger = GameInfo.GetDaggerFromTime(entry.Time);
				Death death = GameInfo.GetDeathFromDeathType(entry.DeathType, GameInfo.GetGameVersionFromDate(Model.Leaderboard.DateTime));

				string flagCode = flag == null || banned ? "00" : flag.CountryCode;
				string daggerColor = banned ? "ban" : dagger.Name.ToLower();
				string deathStyle = banned ? string.Empty : $"color: #{death.ColorCode};";
				string banString = banned ? "ban" : string.Empty;

				string shots = entry.FormatShots(isHistory);
				string accuracy = entry.Accuracy.ToString(FormatUtils.AccuracyFormat);
				string shotsTotal = entry.FormatShotsTotal(isHistory);
				string accuracyTotal = entry.AccuracyTotal.ToString(FormatUtils.AccuracyFormat);

				<div class="sort @banString" @entry.ToHtmlData(flagCode)>
					<div class="leaderboard-row flex-container" id="@(entry.Rank)-row">
						<div class="text-right">
							@if (entry.Id != 0)
							{
								<span data-toggle="tooltip" title="ID: @entry.Id" class="leaderboard-tooltip">@rankString</span>
							}
							else
							{
								<span style="color: #ff0;" data-toggle="tooltip" title="ID: ???" class="leaderboard-tooltip">@rankString</span>
							}
						</div>
						<div>
							@if (flagCode == "00")
							{
								<span><img src="/Images/Flags/24x24/@(flagCode).png" /></span>
							}
							else
							{
								<span class="leaderboard-tooltip" data-toggle="tooltip" title="@UserUtils.CountryNames[flagCode]"><img src="/Images/Flags/24x24/@(flagCode).png" /></span>
							}
						</div>
						<div class="text-left leaderboard-username">
							@{
								if (banned)
								{
									<span data-toggle="tooltip" title="@ban.Description" class="leaderboard-tooltip @daggerColor">@entry.Username</span>
								}
								else
								{
									<span class="@daggerColor">@entry.Username</span>
								}

								if (titles != null)
								{
									foreach (string title in titles.Titles)
									{
										<span class="leaderboard-tooltip" data-toggle="tooltip" title="@title"><img src="/Images/Icons/@(UserUtils.TitleImages[title]).png" /></span>
									}
								}
								if (isDonator)
								{
									string title = "Donator";
									<span class="leaderboard-tooltip" data-toggle="tooltip" title="@title"><img src="/Images/Icons/@(UserUtils.TitleImages[title]).png" /></span>
								}
							}
						</div>
						<div class="text-right @daggerColor">@((entry.Time / 10000.0).ToString(FormatUtils.LeaderboardTimeFormat))</div>
						<div class="hidden-xs text-right">@entry.Kills.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="hidden-xs text-right">@entry.Gems.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="hidden-xs text-right">
							<span data-toggle="tooltip" title="@shots" class="leaderboard-tooltip">@accuracy</span>
						</div>
						<div class="hidden-xs hidden-sm hidden-md text-center" style="@deathStyle">@death.Name</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@((entry.TimeTotal / 10000.0).ToString(FormatUtils.LeaderboardTimeLargeFormat))</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@entry.KillsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@entry.GemsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">
							<span data-toggle="tooltip" title="@shotsTotal" class="leaderboard-tooltip">@accuracyTotal</span>
						</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@entry.DeathsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="leaderboard-expand flex-container" id="@(entry.Rank)-expand">
						<div class="visible-xs">
							<div class="text-left">Kills</div>
							<div class="text-right">@entry.Kills.ToString(FormatUtils.LeaderboardIntFormat)</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">Gems</div>
							<div class="text-right">@entry.Gems.ToString(FormatUtils.LeaderboardIntFormat)</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">Accuracy</div>
							<div class="text-right">
								<span data-toggle="tooltip" title="@shots" class="leaderboard-tooltip">@accuracy</span>
							</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Death type</div>
							<div class="text-right" style="@deathStyle">@death.Name</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Total time</div>
							<div class="text-right">@((entry.TimeTotal / 10000.0).ToString(FormatUtils.LeaderboardTimeLargeFormat))</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Total kills</div>
							<div class="text-right">@entry.KillsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Total gems</div>
							<div class="text-right">@entry.GemsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Total accuracy</div>
							<div class="text-right">
								<span data-toggle="tooltip" title="@shotsTotal" class="leaderboard-tooltip">@accuracyTotal</span>
							</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Total deaths</div>
							<div class="text-right">@entry.DeathsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>