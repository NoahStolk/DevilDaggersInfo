@model string
@inject CoreBase.Services.ICommonObjects commonObjects
@using DevilDaggersCore.Game
@using DevilDaggersCore.Spawnset
@using DevilDaggersWebsite.Utils
@using Newtonsoft.Json
@using System.IO
@{
	int[] widths = new int[4] { 160, 160, 144, 128 };

	Spawnset spawnset;
	using (FileStream fs = new FileStream(Model, FileMode.Open, FileAccess.Read))
	{
		if (!Spawnset.TryParse(fs, out spawnset))
		{
			return;
		}
	}

	bool empty = true;
	foreach (Spawn spawn in spawnset.Spawns.Values)
	{
		if (spawn.Enemy != Spawnset.Enemies[-1])
		{
			empty = false;
			break;
		}
	}

	bool showSpawns = (spawnset.Spawns.Count > 0 && !empty);

	int maxWaves = RazorUtils.DEFAULT_MAX_WAVES;
	string fileName = Model.Substring(Model.LastIndexOf('/') + 1, Model.LastIndexOf('_') - Model.LastIndexOf('/') - 1);
	foreach (string settingsPath in Directory.GetFiles(System.IO.Path.Combine(commonObjects.Env.WebRootPath, "spawnsets", "Settings")))
	{
		if (System.IO.Path.GetFileName(settingsPath.Substring(0, settingsPath.LastIndexOf('.'))) == fileName)
		{
			string jsonString = System.IO.File.ReadAllText(settingsPath);
			dynamic json = JsonConvert.DeserializeObject(jsonString);

			if (!int.TryParse((string)json.MaxWaves, out maxWaves))
			{
				// JSON parse failed but we don't really care
				maxWaves = RazorUtils.DEFAULT_MAX_WAVES;
			}

			break;
		}
	}

	GameVersion gameVersion = Game.GameVersions[Game.DEFAULT_GAME_VERSION];
	if (Model.Contains("V1_Sorath"))
	{
		gameVersion = Game.GameVersions["V1"];
	}
	else if (Model.Contains("V2_Sorath"))
	{
		gameVersion = Game.GameVersions["V2"];
	}

	string wavesQuery = commonObjects.HttpContextAccessor.HttpContext.Request.Query["waves"];
	if (int.TryParse(wavesQuery, out int t))
	{
		if (t > 0)
		{
			maxWaves = t;
		}
	}

	<div class="flex-container flex-center flex-column text-center">
		@if (showSpawns)
		{
			<div class="flex-container flex-center">
				<div style="width: @(widths[0])px;">Seconds</div>
				<div style="width: @(widths[1])px;">Spawns</div>
				<div style="width: @(widths[2])px;">Gems (no farm)</div>
				<div style="width: @(widths[3])px;">Total gems</div>
			</div>

			double seconds = 0;
			int totalGems = 0;
			List<Spawn> endLoop = new List<Spawn>();

			int spawns = 0;
			foreach (Spawn spawn in spawnset.Spawns.Values)
			{
				if (spawn.Enemy != Spawnset.Enemies[-1])
				{
					spawns++;
				}

				endLoop.Add(spawn);
				if (spawn.Enemy == Spawnset.Enemies[-1])
				{
					foreach (Spawn s in endLoop)
					{
						seconds += s.Delay;
						if (s.Enemy != Spawnset.Enemies[-1])
						{
							int gems = s.Enemy.NoFarmGems;
							totalGems += gems;

							<div class="flex-container flex-center">
								<div style="width: @(widths[0])px;" class="text-right">@seconds.ToString("0.0000")</div>
								<div style="width: @(widths[1])px;">@RazorUtils.GetEnemyLayoutAnchor(s.Enemy.ToEnemy(gameVersion))</div>
								<div style="width: @(widths[2])px;" class="text-right">@gems</div>
								<div style="width: @(widths[3])px;" class="text-right">@totalGems</div>
							</div>
						}
					}
					seconds -= spawn.Delay;
					endLoop.Clear();
					endLoop.Add(spawn);
				}
			}

			if (endLoop.Count != 1 || (endLoop.Count == 1 && endLoop[0].Enemy != Spawnset.Enemies[-1]))
			{
				double waveMod = 0;
				double endGameSecond = seconds;
				for (int i = 0; i < maxWaves; i++)
				{
					if (spawns > RazorUtils.MAX_SPAWNS)
					{
						break;
					}

					<div class="text-left end-wave-separator">
						<div style="background-color: red; height: 2px; width: auto;"></div>
						<div class="hidden-xs">End wave @(i + 1)</div>
					</div>
					double enemyTimer = 0;
					double delay = 0;
					foreach (Spawn spawn in endLoop)
					{
						if (spawn.Enemy != Spawnset.Enemies[-1])
						{
							spawns++;
						}

						delay += spawn.Delay;
						while (enemyTimer < delay)
						{
							endGameSecond += (1f / 60f);
							enemyTimer += (1f / 60f) + waveMod;
						}

						if (spawn.Enemy != Spawnset.Enemies[-1])
						{
							SpawnsetEnemy finalEnemy = spawn.Enemy;
							// Change the third Gigapede into a Ghostpede
							if (finalEnemy == Spawnset.GetEnemyByName("Gigapede") && i % 3 == 2 && gameVersion == Game.GameVersions["V3"])
							{
								finalEnemy = Spawnset.GetEnemyByName("Ghostpede");
							}

							int gems = finalEnemy.NoFarmGems;
							totalGems += gems;

							<div class="flex-container flex-center">
								<div style="width: @(widths[0])px;" class="text-right">@((Math.Floor(endGameSecond * 60) / 60).ToString("0.0000"))</div>
								<div style="width: @(widths[1])px;">@RazorUtils.GetEnemyLayoutAnchor(finalEnemy.ToEnemy(gameVersion), false, Model.Contains("V3_Sorath") && spawns > 525 ? Math.Min((spawns - 525) / 10f, 100) : 0)</div>
								<div style="width: @(widths[2])px;" class="text-right">@gems</div>
								<div style="width: @(widths[3])px;" class="text-right">@totalGems</div>
							</div>
						}
					}
					waveMod += 1f / 60f / 8f;
				}
			}

			<div style="color: red; font-size: 24px;">@(endLoop.Count != 1 || (endLoop.Count == 1 && endLoop[0].Enemy != Spawnset.Enemies[-1]) ? "Goes on eternally..." : "End of spawnset")</div>
		}
	</div>
}