@model string
@inject DevilDaggersWebsite.Code.Database.ApplicationDbContext context
@inject CoreBase.Services.ICommonObjects commonObjects
@using DevilDaggersCore.Game
@using DevilDaggersCore.Spawnsets
@using DevilDaggersCore.Spawnsets.Web
@using DevilDaggersWebsite.Code.Utils
@using System.IO
@{
	int[] widths = new int[4] { 160, 160, 144, 128 };

	SpawnsetFile sf = SpawnsetUtils.CreateSpawnsetFileFromSettingsFile(context, commonObjects, Model);
	Spawnset spawnset;
	using (FileStream fs = new FileStream(Model, FileMode.Open, FileAccess.Read))
	{
		if (!Spawnset.TryParse(fs, out spawnset))
		{
			return;
		}
	}

	GameVersion gameVersion = GameInfo.GameVersions[GameInfo.DEFAULT_GAME_VERSION];
	if (sf.Author == "Sorath")
	{
		if (sf.Name == "V1")
		{
			gameVersion = GameInfo.GameVersions["V1"];
		}
		else if (sf.Name == "V2")
		{
			gameVersion = GameInfo.GameVersions["V2"];
		}
	}

	int maxWaves = sf.settings.MaxWaves ?? SpawnsetUtils.DefaultMaxWaves;
	string wavesQuery = commonObjects.HttpContextAccessor.HttpContext.Request.Query["waves"];
	if (int.TryParse(wavesQuery, out int parsed) && parsed > 0)
	{
		maxWaves = parsed;
	}

	<div class="flex-container flex-center flex-column text-center">
		@if (!spawnset.IsEmpty())
		{
			<div class="flex-container flex-center">
				<div style="width: @(widths[0])px;">Time</div>
				<div style="width: @(widths[1])px;">Enemy</div>
				<div style="width: @(widths[2])px;">Gems (no farm)</div>
				<div style="width: @(widths[3])px;">Total gems</div>
			</div>

			double totalSeconds = 0;
			int totalGems = 0;
			int endLoopIndex = spawnset.GetEndLoopStartIndex();

			foreach (Spawn spawn in spawnset.Spawns.Values.SkipLast(spawnset.Spawns.Count() - endLoopIndex))
			{
				totalSeconds += spawn.Delay;
				if (spawn.SpawnsetEnemy != Spawnset.Enemies[-1])
				{
					totalGems += spawn.SpawnsetEnemy.NoFarmGems;

					<div class="flex-container flex-center">
						<div style="width: @(widths[0])px;" class="text-right">@totalSeconds.ToString("0.0000")</div>
						<div style="width: @(widths[1])px;">@(spawn.SpawnsetEnemy.ToEnemy(gameVersion).GetLayoutAnchor())</div>
						<div style="width: @(widths[2])px;" class="text-right">@spawn.SpawnsetEnemy.NoFarmGems</div>
						<div style="width: @(widths[3])px;" class="text-right">@totalGems</div>
					</div>
				}
			}

			List<Spawn> endLoop = spawnset.Spawns.Values.Skip(endLoopIndex).ToList();

			if (endLoop.Where(s => s.SpawnsetEnemy != Spawnset.Enemies[-1]).Count() != 0)
			{
				int spawns = spawnset.Spawns.Where(s => s.Value.SpawnsetEnemy != Spawnset.Enemies[-1]).Count();

				double endGameSecond = totalSeconds;
				for (int i = 0; i < maxWaves; i++)
				{
					if (spawns > SpawnsetUtils.MaxSpawns)
					{
						break;
					}

					<div class="text-left end-wave-separator">
						<div style="background-color: red; height: 2px; width: auto;"></div>
						<div class="hidden-xs">End wave @(i + 1)</div>
					</div>
					double enemyTimer = 0;
					double delay = 0;
					foreach (Spawn spawn in endLoop)
					{
						if (spawn.SpawnsetEnemy != Spawnset.Enemies[-1])
						{
							spawns++;
						}

						delay += spawn.Delay;
						while (enemyTimer < delay)
						{
							endGameSecond += 1f / 60f;
							enemyTimer += (1f / 60f) + (1f / 60f / 8f * i);
						}

						if (spawn.SpawnsetEnemy != Spawnset.Enemies[-1])
						{
							SpawnsetEnemy finalEnemy = spawn.SpawnsetEnemy;
							// Change the third Gigapede into a Ghostpede
							if (i % 3 == 2 && gameVersion == GameInfo.GameVersions["V3"] && finalEnemy == Spawnset.GetEnemyByName("Gigapede"))
							{
								finalEnemy = Spawnset.GetEnemyByName("Ghostpede");
							}

							int gems = finalEnemy.NoFarmGems;
							totalGems += gems;

							<div class="flex-container flex-center">
								<div style="width: @(widths[0])px;" class="text-right">@((Math.Floor(endGameSecond * 60) / 60).ToString("0.0000"))</div>
								<div style="width: @(widths[1])px;">@(finalEnemy.ToEnemy(gameVersion).GetLayoutAnchor(false, Model.Contains("V3_Sorath") && spawns > 525 ? Math.Min((spawns - 525) / 10f, 100) : 0))</div>
								<div style="width: @(widths[2])px;" class="text-right">@gems</div>
								<div style="width: @(widths[3])px;" class="text-right">@totalGems</div>
							</div>
						}
					}
				}
			}

			<div style="color: var(--col-red); font-size: 24px;">@(endLoop.Count != 1 || (endLoop.Count == 1 && endLoop[0].SpawnsetEnemy != Spawnset.Enemies[-1]) ? "Goes on eternally..." : "End of spawnset")</div>
		}
	</div>
}