@page
@inject CoreBase3.Services.ICommonObjects CommonObjects
@model DevilDaggersWebsite.Pages.Leaderboard.IndexModel
@using DevilDaggersWebsite.Code.Leaderboards
@using DevilDaggersWebsite.Code.Utils
@{
	ViewData["Title"] = "Leaderboard";

	int[] widths = new int[2] { 160, 160 };
}

<header>
	<h1>@ViewData["Title"]</h1>
</header>

<main role="main">
	@await Html.PartialAsync("Partials/_LeaderboardGlobalPartial")
	<div>
		@using (Html.BeginForm(FormMethod.Get))
		{
			<fieldset>
				<div class="flex-container flex-center flex-column">
					<div class="flex-container flex-center">
						<div class="input-label text-left" style="width: @(widths[0])px;">Rank:</div>
						<div style="width: @(widths[1])px;">@Html.TextBoxFor(m => m.Rank, new { @class = "input" })</div>
					</div>
					<div class="flex-container flex-center">
						<div class="input-label text-left" style="width: @(widths[0])px;">Username:</div>
						<div style="width: @(widths[1])px;">@Html.TextBoxFor(m => m.Username, new { @class = "input" })</div>
					</div>
					<div class="flex-container flex-center">
						<div class="input-label text-left" style="width: @(widths[0])px;">User ID:</div>
						<div style="width: @(widths[1])px;">@Html.TextBoxFor(m => m.UserId, new { @class = "input" })</div>
					</div>
				</div>
				<div class="flex-container flex-center flex-column">
					<div class="flex-container flex-center">
						<input class="btn" type="submit" value="Show" />
					</div>
					<div class="flex-container flex-center leaderboard-nav-buttons">
						@{
							if (Model.LeaderboardSearchType == LeaderboardSearchType.Rank)
							{
								<a class="btn" asp-page="/Leaderboard/Index" asp-route-rank="@(Math.Max(1, Model.Rank - 100))" asp-route-search="@Model.Username">&lt;</a>
								<a class="btn" asp-page="/Leaderboard/Index" asp-route-rank="@(Math.Min(Model.Leaderboard.Players - 99, Model.Rank + 100))" asp-route-search="@Model.Username">&gt;</a>
							}
							else
							{
								<button class="btn btn-disabled">&lt;</button>
								<button class="btn btn-disabled">&gt;</button>
							}
						}
					</div>
				</div>
			</fieldset>
		}
		<p>
			@switch (Model.LeaderboardSearchType)
			{
				case LeaderboardSearchType.Username:
					@:Showing username search results for "@Model.Username"
					break;
				case LeaderboardSearchType.UserId:
					@:Showing user with ID @Model.UserId
					break;
				case LeaderboardSearchType.Rank:
				default:
					@:Showing rank @Model.Rank - @(Model.Rank + 99)
					break;
			}
		</p>
		<p class="visible-xs visible-sm visible-md">
			On mobile devices; tap on an entry to expand it.
		</p>
		@if (Model.LeaderboardSearchType == LeaderboardSearchType.Rank)
		{
			<p>
				If you'd like to add your nationality (flag) to this leaderboard, let one of the <img src="~/images/Icons/eye3.png" /> <a href="@RazorUtils.DiscordUrl">Discord</a> mods know.
			</p>
		}
		@if (Model.LeaderboardSearchType != LeaderboardSearchType.UserId)
		{
			<p>
				You can sort the leaderboard by clicking the headers.
			</p>
		}
		@if (Model.HasBans)
		{
			<p>
				<span class="ban">Crossed out entries</span> are runs that are cheated, boosted, submitted on an alternative account, or otherwise considered invalid.
			</p>
		}
	</div>
	@await Html.PartialAsync("Partials/_LeaderboardUserPartial")
</main>

@section Scripts {
	<script defer src='~/scripts/leaderboard-user.js' asp-append-version='true'></script>
}

@section Styles {
	<link rel='stylesheet' href='~/styles/leaderboard.css' />
	<link rel='stylesheet' href='~/styles/leaderboard-rows-general.css' />
}