@page
@using DevilDaggersWebsite.Code.Utils
@using DevilDaggersCore.Game
@inject DevilDaggersWebsite.Code.Database.ApplicationDbContext dbContext
@model DevilDaggersWebsite.Pages.SpawnsetModel
@{
	ViewData["Title"] = "Spawnset";
	ViewBag.Title = $"{Model.SpawnsetFile.Name} by {Model.SpawnsetFile.Author}";
	int[] widths = new int[4] { 160, 128, 192, 128 };
}

<header>
	<h1 class="dont-break-out">@Model.SpawnsetFile.Name by @Model.SpawnsetFile.Author</h1>
</header>

<main role="main">
	<p class="text-center">
		<a class="btn" href="api/spawnsets/@Model.Query">Download</a>
	</p>
	@if (dbContext.CustomLeaderboards.Any(c => c.SpawnsetFileName == Model.SpawnsetFile.FileName))
	{
		<p class="text-center">
			<a asp-page="/CustomLeaderboards/Leaderboard" asp-route-spawnset="@Model.SpawnsetFile.FileName">Custom leaderboard for @Model.SpawnsetFile.Name</a>
		</p>
	}

	@{
		if (!string.IsNullOrEmpty(Model.SpawnsetFile.settings.Description))
		{
			<div class="description">
				@RazorUtils.GetLayout(Model.SpawnsetFile.settings.Description, GameVersion.V3)
			</div>
		}
	}

	<div class="text-center">
		<div class="flex-container flex-center">
			<div style="width: @(widths[0])px;">Start radius</div>
			<div style="width: @(widths[1])px;">End radius</div>
			<div style="width: @(widths[2])px;">Shrinking rate</div>
			<div style="width: @(widths[3])px;">Brightness</div>
		</div>
		<div class="flex-container flex-center">
			<div style="width: @(widths[0])px;">@Model.spawnset.ShrinkStart.ToString("0.#")</div>
			<div style="width: @(widths[1])px;">@Model.spawnset.ShrinkEnd.ToString("0.#")</div>
			<div style="width: @(widths[2])px;">@Model.spawnset.ShrinkRate.ToString("0.####")</div>
			<div style="width: @(widths[3])px;">@Model.spawnset.Brightness.ToString("0.#")</div>
		</div>
	</div>

	<table class="tile-table">
		@{
			for (int i = 0; i < Model.spawnset.ArenaTiles.GetLength(0); i++)
			{
				<tr>
					@for (int j = 0; j < Model.spawnset.ArenaTiles.GetLength(1); j++)
					{
						float height = (float)Math.Round(Model.spawnset.ArenaTiles[j, i] * 32 + 64); // Swap coordinates because <tr> elements cannot be vertical.

						<td class="arena-tile" style="background-color: rgb(@height, @Math.Round(height / 2), 0);"></td>
					}
				</tr>
			}
		}
	</table>

	@await Html.PartialAsync("Partials/_SpawnsPartial", Model.SpawnsetFile.Path)
</main>

@section Styles {
	<link rel='stylesheet' href='~/styles/spawns.css' />
	<link rel='stylesheet' href='~/styles/spawnset.css' />
}