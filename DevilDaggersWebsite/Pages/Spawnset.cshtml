@page
@inject Microsoft.AspNetCore.Hosting.IHostingEnvironment env
@model DevilDaggersWebsite.Pages.SpawnsetModel
@{
	ViewData["Title"] = "Spawnset";

	string fileName = HttpContext.Request.Query["spawnset"];
	string name = fileName.Substring(0, fileName.LastIndexOf('_'));
	string author = fileName.Substring(fileName.LastIndexOf('_') + 1);
	ViewBag.Title = string.Format("{0} by {1}", name, author);
}

@using DevilDaggersWebsite.Utils
@using DevilDaggersWebsite.Models.Spawnset
@using Newtonsoft.Json;
@using System.IO
@{
	int[] widths = new int[4] { 160, 128, 192, 128 };
}

<header>
	<h1 class="dont-break-out">@name by @author</h1>
</header>

<main role="main">
	<div class="text-center">
		<a class="btn btn-default" asp-page="DownloadSpawnset" asp-route-file="@fileName">Download</a>
	</div>

	@{
		string description = string.Empty;
		foreach (string settingsPath in Directory.GetFiles(System.IO.Path.Combine(env.WebRootPath, "spawnsets/Settings/")))
		{
			if (System.IO.Path.GetFileName(settingsPath.Substring(0, settingsPath.LastIndexOf('.'))) == name)
			{
				string jsonString = System.IO.File.ReadAllText(settingsPath);
				dynamic json = JsonConvert.DeserializeObject(jsonString);

				description = json.Description;

				break;
			}
		}

		if (!string.IsNullOrEmpty(description))
		{
			<h3>A note from @author</h3>

			<div>@Html.Raw(RazorUtils.GetLayout(description))</div>
		}

		string path = System.IO.Path.Combine(env.WebRootPath, string.Format("spawnsets/{0}_{1}", name, author));
		Spawnset spawnset = SpawnsetParser.ParseFile(path);
	}

	<div class="text-center">
		<div class="flex-container flex-center">
			<div style="width: @(widths[0])px;">Start radius</div>
			<div style="width: @(widths[1])px;">End radius</div>
			<div style="width: @(widths[2])px;">Shrinking rate</div>
			<div style="width: @(widths[3])px;">Brightness</div>
		</div>
		<div class="flex-container flex-center">
			<div style="width: @(widths[0])px;">@spawnset.ShrinkStart</div>
			<div style="width: @(widths[1])px;">@spawnset.ShrinkEnd</div>
			<div style="width: @(widths[2])px;">@spawnset.ShrinkRate</div>
			<div style="width: @(widths[3])px;">@spawnset.Brightness</div>
		</div>
	</div>

	<table class="tile-table">
		@{
			for (int i = 0; i < spawnset.ArenaTiles.GetLength(0); i++)
			{
				<tr>
					@for (int j = 0; j < spawnset.ArenaTiles.GetLength(1); j++)
					{
						float height = (float)Math.Round(spawnset.ArenaTiles[i, j] * 32 + 64);
						<td class="arena-tile" style="background-color: rgb(@height, @Math.Round(height/2), 0);"></td>
					}
				</tr>
			}
		}
	</table>

	@Html.Partial("_SpawnsPartial", path)
</main>