// <auto-generated />
using DevilDaggersWebsite.Code.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace DevilDaggersWebsite.Migrations
{
	[DbContext(typeof(ApplicationDbContext))]
	[Migration("20200820134455_AddSpawnsetFile")]
	partial class AddSpawnsetFile
	{
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "3.1.7")
				.HasAnnotation("Relational:MaxIdentifierLength", 64);

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.AssetMod", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<int>("AssetModFileContents")
						.HasColumnType("int");

					b.Property<int>("AssetModTypes")
						.HasColumnType("int");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("Url")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.HasKey("Id");

					b.ToTable("AssetMods");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.CustomEntry", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<string>("ClientVersion")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<int>("CustomLeaderboardId")
						.HasColumnType("int");

					b.Property<int>("DaggersFired")
						.HasColumnType("int");

					b.Property<int>("DaggersHit")
						.HasColumnType("int");

					b.Property<int>("DeathType")
						.HasColumnType("int");

					b.Property<int>("EnemiesAlive")
						.HasColumnType("int");

					b.Property<int>("Gems")
						.HasColumnType("int");

					b.Property<int>("Homing")
						.HasColumnType("int");

					b.Property<int>("Kills")
						.HasColumnType("int");

					b.Property<int>("LevelUpTime2")
						.HasColumnType("int");

					b.Property<int>("LevelUpTime3")
						.HasColumnType("int");

					b.Property<int>("LevelUpTime4")
						.HasColumnType("int");

					b.Property<int>("PlayerId")
						.HasColumnType("int");

					b.Property<DateTime>("SubmitDate")
						.HasColumnType("datetime(6)");

					b.Property<int>("Time")
						.HasColumnType("int");

					b.HasKey("Id");

					b.HasIndex("CustomLeaderboardId");

					b.ToTable("CustomEntries");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.CustomLeaderboard", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<int>("Bronze")
						.HasColumnType("int");

					b.Property<int>("CategoryId")
						.HasColumnType("int");

					b.Property<DateTime?>("DateCreated")
						.HasColumnType("datetime(6)");

					b.Property<DateTime?>("DateLastPlayed")
						.HasColumnType("datetime(6)");

					b.Property<int>("Devil")
						.HasColumnType("int");

					b.Property<int>("Golden")
						.HasColumnType("int");

					b.Property<int>("Homing")
						.HasColumnType("int");

					b.Property<int>("Silver")
						.HasColumnType("int");

					b.Property<string>("SpawnsetFileName")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.HasKey("Id");

					b.HasIndex("CategoryId");

					b.ToTable("CustomLeaderboards");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.CustomLeaderboardCategory", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<bool>("Ascending")
						.HasColumnType("tinyint(1)");

					b.Property<string>("LayoutPartialName")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("SortingPropertyName")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.HasKey("Id");

					b.ToTable("CustomLeaderboardCategories");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.Donation", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<int>("Amount")
						.HasColumnType("int");

					b.Property<int>("ConvertedEuroCentsReceived")
						.HasColumnType("int");

					b.Property<int>("Currency")
						.HasColumnType("int");

					b.Property<DateTime>("DateReceived")
						.HasColumnType("datetime(6)");

					b.Property<bool>("IsRefunded")
						.HasColumnType("tinyint(1)");

					b.Property<string>("Note")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<int?>("PlayerId")
						.HasColumnType("int");

					b.HasKey("Id");

					b.ToTable("Donations");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.Player", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<string>("BanDescription")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<int?>("BanResponsibleId")
						.HasColumnType("int");

					b.Property<string>("CountryCode")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<int?>("Dpi")
						.HasColumnType("int");

					b.Property<bool?>("FlashEnabled")
						.HasColumnType("tinyint(1)");

					b.Property<int?>("Fov")
						.HasColumnType("int");

					b.Property<float?>("Gamma")
						.HasColumnType("float");

					b.Property<float?>("InGameSens")
						.HasColumnType("float");

					b.Property<bool>("IsAnonymous")
						.HasColumnType("tinyint(1)");

					b.Property<bool>("IsBanned")
						.HasColumnType("tinyint(1)");

					b.Property<bool?>("RightHanded")
						.HasColumnType("tinyint(1)");

					b.Property<string>("Username")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.HasKey("Id");

					b.ToTable("Players");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.PlayerAssetMod", b =>
				{
					b.Property<int>("PlayerId")
						.HasColumnType("int");

					b.Property<int>("AssetModId")
						.HasColumnType("int");

					b.HasKey("PlayerId", "AssetModId");

					b.HasIndex("AssetModId");

					b.ToTable("PlayerAssetMods");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.PlayerTitle", b =>
				{
					b.Property<int>("PlayerId")
						.HasColumnType("int");

					b.Property<int>("TitleId")
						.HasColumnType("int");

					b.HasKey("PlayerId", "TitleId");

					b.HasIndex("TitleId");

					b.ToTable("PlayerTitles");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.SpawnsetFile", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<string>("HtmlDescription")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<DateTime>("LastUpdated")
						.HasColumnType("datetime(6)");

					b.Property<int?>("MaxDisplayWaves")
						.HasColumnType("int");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<int>("PlayerId")
						.HasColumnType("int");

					b.HasKey("Id");

					b.ToTable("SpawnsetFiles");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.Title", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.HasKey("Id");

					b.ToTable("Titles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("varchar(255) CHARACTER SET utf8mb4");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("Name")
						.HasColumnType("varchar(256) CHARACTER SET utf8mb4")
						.HasMaxLength(256);

					b.Property<string>("NormalizedName")
						.HasColumnType("varchar(256) CHARACTER SET utf8mb4")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasName("RoleNameIndex");

					b.ToTable("AspNetRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<string>("ClaimType")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("ClaimValue")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("RoleId")
						.IsRequired()
						.HasColumnType("varchar(255) CHARACTER SET utf8mb4");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("varchar(255) CHARACTER SET utf8mb4");

					b.Property<int>("AccessFailedCount")
						.HasColumnType("int");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("Email")
						.HasColumnType("varchar(256) CHARACTER SET utf8mb4")
						.HasMaxLength(256);

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("tinyint(1)");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("tinyint(1)");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("datetime(6)");

					b.Property<string>("NormalizedEmail")
						.HasColumnType("varchar(256) CHARACTER SET utf8mb4")
						.HasMaxLength(256);

					b.Property<string>("NormalizedUserName")
						.HasColumnType("varchar(256) CHARACTER SET utf8mb4")
						.HasMaxLength(256);

					b.Property<string>("PasswordHash")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("PhoneNumber")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("tinyint(1)");

					b.Property<string>("SecurityStamp")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("tinyint(1)");

					b.Property<string>("UserName")
						.HasColumnType("varchar(256) CHARACTER SET utf8mb4")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasName("UserNameIndex");

					b.ToTable("AspNetUsers");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					b.Property<string>("ClaimType")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("ClaimValue")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("varchar(255) CHARACTER SET utf8mb4");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasColumnType("varchar(128) CHARACTER SET utf8mb4")
						.HasMaxLength(128);

					b.Property<string>("ProviderKey")
						.HasColumnType("varchar(128) CHARACTER SET utf8mb4")
						.HasMaxLength(128);

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("varchar(255) CHARACTER SET utf8mb4");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("varchar(255) CHARACTER SET utf8mb4");

					b.Property<string>("RoleId")
						.HasColumnType("varchar(255) CHARACTER SET utf8mb4");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("varchar(255) CHARACTER SET utf8mb4");

					b.Property<string>("LoginProvider")
						.HasColumnType("varchar(128) CHARACTER SET utf8mb4")
						.HasMaxLength(128);

					b.Property<string>("Name")
						.HasColumnType("varchar(128) CHARACTER SET utf8mb4")
						.HasMaxLength(128);

					b.Property<string>("Value")
						.HasColumnType("longtext CHARACTER SET utf8mb4");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens");
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.CustomEntry", b =>
				{
					b.HasOne("DevilDaggersWebsite.Code.Database.CustomLeaderboard", "CustomLeaderboard")
						.WithMany()
						.HasForeignKey("CustomLeaderboardId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.CustomLeaderboard", b =>
				{
					b.HasOne("DevilDaggersWebsite.Code.Database.CustomLeaderboardCategory", "Category")
						.WithMany()
						.HasForeignKey("CategoryId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.PlayerAssetMod", b =>
				{
					b.HasOne("DevilDaggersWebsite.Code.Database.AssetMod", "AssetMod")
						.WithMany("PlayerAssetMods")
						.HasForeignKey("AssetModId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("DevilDaggersWebsite.Code.Database.Player", "Player")
						.WithMany("PlayerAssetMods")
						.HasForeignKey("PlayerId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("DevilDaggersWebsite.Code.Database.PlayerTitle", b =>
				{
					b.HasOne("DevilDaggersWebsite.Code.Database.Player", "Player")
						.WithMany("PlayerTitles")
						.HasForeignKey("PlayerId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("DevilDaggersWebsite.Code.Database.Title", "Title")
						.WithMany("PlayerTitles")
						.HasForeignKey("TitleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});
#pragma warning restore 612, 618
		}
	}
}
