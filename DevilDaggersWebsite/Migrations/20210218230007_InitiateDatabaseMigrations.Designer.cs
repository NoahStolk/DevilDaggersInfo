// <auto-generated />
using System;
using DevilDaggersWebsite.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevilDaggersWebsite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210218230007_InitiateDatabaseMigrations")]
    partial class InitiateDatabaseMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("DevilDaggersWebsite.Entities.AssetMod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssetModFileContents")
                        .HasColumnType("int");

                    b.Property<int>("AssetModTypes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AssetMods");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.CustomEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("CentipedesAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("CentipedesKilledData")
                        .HasColumnType("longblob");

                    b.Property<string>("ClientVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CustomLeaderboardId")
                        .HasColumnType("int");

                    b.Property<int>("DaggersFired")
                        .HasColumnType("int");

                    b.Property<byte[]>("DaggersFiredData")
                        .HasColumnType("longblob");

                    b.Property<int>("DaggersHit")
                        .HasColumnType("int");

                    b.Property<byte[]>("DaggersHitData")
                        .HasColumnType("longblob");

                    b.Property<byte>("DeathType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("EnemiesAlive")
                        .HasColumnType("int");

                    b.Property<byte[]>("EnemiesAliveData")
                        .HasColumnType("longblob");

                    b.Property<int>("EnemiesKilled")
                        .HasColumnType("int");

                    b.Property<byte[]>("EnemiesKilledData")
                        .HasColumnType("longblob");

                    b.Property<int>("GemsCollected")
                        .HasColumnType("int");

                    b.Property<byte[]>("GemsCollectedData")
                        .HasColumnType("longblob");

                    b.Property<int>("GemsDespawned")
                        .HasColumnType("int");

                    b.Property<byte[]>("GemsDespawnedData")
                        .HasColumnType("longblob");

                    b.Property<int>("GemsEaten")
                        .HasColumnType("int");

                    b.Property<byte[]>("GemsEatenData")
                        .HasColumnType("longblob");

                    b.Property<int>("GemsTotal")
                        .HasColumnType("int");

                    b.Property<byte[]>("GemsTotalData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("GhostpedesAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("GhostpedesKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("GigapedesAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("GigapedesKilledData")
                        .HasColumnType("longblob");

                    b.Property<int>("HomingDaggers")
                        .HasColumnType("int");

                    b.Property<byte[]>("HomingDaggersData")
                        .HasColumnType("longblob");

                    b.Property<int>("LevelUpTime2")
                        .HasColumnType("int");

                    b.Property<int>("LevelUpTime3")
                        .HasColumnType("int");

                    b.Property<int>("LevelUpTime4")
                        .HasColumnType("int");

                    b.Property<byte[]>("LeviathansAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("LeviathansKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("OrbsAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("OrbsKilledData")
                        .HasColumnType("longblob");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Skull1sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Skull1sKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Skull2sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Skull2sKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Skull3sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Skull3sKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Skull4sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Skull4sKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Spider1sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Spider1sKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Spider2sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Spider2sKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("SpiderEggsAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("SpiderEggsKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("SpiderlingsAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("SpiderlingsKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Squid1sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Squid1sKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Squid2sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Squid2sKilledData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Squid3sAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("Squid3sKilledData")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("ThornsAliveData")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("ThornsKilledData")
                        .HasColumnType("longblob");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomLeaderboardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("CustomEntries");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.CustomLeaderboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateLastPlayed")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SpawnsetFileId")
                        .HasColumnType("int");

                    b.Property<int>("TimeBronze")
                        .HasColumnType("int");

                    b.Property<int>("TimeDevil")
                        .HasColumnType("int");

                    b.Property<int>("TimeGolden")
                        .HasColumnType("int");

                    b.Property<int>("TimeLeviathan")
                        .HasColumnType("int");

                    b.Property<int>("TimeSilver")
                        .HasColumnType("int");

                    b.Property<int>("TotalRunsSubmitted")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpawnsetFileId");

                    b.ToTable("CustomLeaderboards");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ConvertedEuroCentsReceived")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BanDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("BanResponsibleId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Dpi")
                        .HasColumnType("int");

                    b.Property<bool?>("FlashEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Fov")
                        .HasColumnType("int");

                    b.Property<float?>("Gamma")
                        .HasColumnType("float");

                    b.Property<float?>("InGameSens")
                        .HasColumnType("float");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("RightHanded")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.PlayerAssetMod", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("AssetModId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "AssetModId");

                    b.HasIndex("AssetModId");

                    b.ToTable("PlayerAssetMods");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.PlayerTitle", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TitleId");

                    b.HasIndex("TitleId");

                    b.ToTable("PlayerTitles");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.SpawnsetFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HtmlDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MaxDisplayWaves")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("SpawnsetFiles");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.ToolStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VersionNumber")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ToolStatistics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.CustomEntry", b =>
                {
                    b.HasOne("DevilDaggersWebsite.Entities.CustomLeaderboard", "CustomLeaderboard")
                        .WithMany()
                        .HasForeignKey("CustomLeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevilDaggersWebsite.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomLeaderboard");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.CustomLeaderboard", b =>
                {
                    b.HasOne("DevilDaggersWebsite.Entities.SpawnsetFile", "SpawnsetFile")
                        .WithMany()
                        .HasForeignKey("SpawnsetFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpawnsetFile");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.Donation", b =>
                {
                    b.HasOne("DevilDaggersWebsite.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.PlayerAssetMod", b =>
                {
                    b.HasOne("DevilDaggersWebsite.Entities.AssetMod", "AssetMod")
                        .WithMany("PlayerAssetMods")
                        .HasForeignKey("AssetModId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevilDaggersWebsite.Entities.Player", "Player")
                        .WithMany("PlayerAssetMods")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetMod");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.PlayerTitle", b =>
                {
                    b.HasOne("DevilDaggersWebsite.Entities.Player", "Player")
                        .WithMany("PlayerTitles")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevilDaggersWebsite.Entities.Title", "Title")
                        .WithMany("PlayerTitles")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.SpawnsetFile", b =>
                {
                    b.HasOne("DevilDaggersWebsite.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.AssetMod", b =>
                {
                    b.Navigation("PlayerAssetMods");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.Player", b =>
                {
                    b.Navigation("PlayerAssetMods");

                    b.Navigation("PlayerTitles");
                });

            modelBuilder.Entity("DevilDaggersWebsite.Entities.Title", b =>
                {
                    b.Navigation("PlayerTitles");
                });
#pragma warning restore 612, 618
        }
    }
}
