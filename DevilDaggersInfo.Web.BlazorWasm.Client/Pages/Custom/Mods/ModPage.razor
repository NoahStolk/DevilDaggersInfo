@page "/custom/mod/{Id:int}"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Mods
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

@if (GetMod == null)
{
	<Loading />
}
else
{
	<Heading>Mod - @GetMod.Name</Heading>

	<div class="bg-gray-0b max-w-sm px-1">
		<DataField Name="Author(s)">@string.Join(", ", GetMod.Authors)</DataField>
		<DataField Name="Last updated">@GetMod.LastUpdated.ToString(FormatUtils.DateTimeFormat)</DataField>
		<DataField Name="Prohibited assets">@(GetMod.ContainsProhibitedAssets.HasValue ? GetMod.ContainsProhibitedAssets.Value ? "Yes" : "No" : "Unknown")</DataField>
		@if (GetMod.ModArchive != null)
		{
			<DataField Name="File size">@FileSizeUtils.Format(GetMod.ModArchive.FileSize)</DataField>
			<DataField Name="File size (extracted)">@FileSizeUtils.Format(GetMod.ModArchive.FileSizeExtracted)</DataField>
		}

		<div class="grid grid-cols-2 text-lg">
			<div class="px-1 py-3">
				<UrlLink Href="@($"/api/mods/{GetMod.Name}/file")">Download mod</UrlLink>
			</div>
		</div>
	</div>

	@if (!string.IsNullOrWhiteSpace(GetMod.HtmlDescription))
	{
		<Heading Level="2">Description</Heading>
		<div class="bg-gray-22 max-w-sm px-1">
			@((MarkupString)@GetMod.HtmlDescription)
		</div>
	}

	@*TODO: Screenshots*@
	@if (!string.IsNullOrWhiteSpace(GetMod.TrailerUrl))
	{
		<Heading Level="2">Trailer</Heading>
		<div class="relative w-full xl:w-1/2 pb-16-9 xl:pb-16-9/2">
			<iframe class="absolute top-0 left-0 w-full h-full" src="@GetMod.TrailerUrl" title="@GetMod.Name" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
		</div>
	}

	@if (GetMod.ModArchive != null)
	{
		<Heading Level="2">Binaries</Heading>
		<div class="bg-gray-22 grid gap-3 grid-cols-mod-binaries-xs sm:grid-cols-mod-binaries-sm md:grid-cols-mod-binaries-md lg:grid-cols-mod-binaries-lg xl:grid-cols-mod-binaries-xl">
			<div>Binary</div>
			<div class="hidden sm:block">Type</div>
			<div class="hidden md:block">Prohibited assets</div>
			<div class="hidden lg:block">Assets</div>
			<div class="hidden lg:block">Size (extracted)</div>
		</div>
		@foreach (GetModBinary binary in GetMod.ModArchive.Binaries.OrderBy(b => b.Name))
		{
			<div class="grid gap-3 grid-cols-5 odd:bg-gray-16 grid-cols-mod-binaries-xs sm:grid-cols-mod-binaries-sm md:grid-cols-mod-binaries-md lg:grid-cols-mod-binaries-lg xl:grid-cols-mod-binaries-xl">
				<div class="break-all">@binary.Name</div>
				<div class="hidden sm:block">@binary.ModBinaryType.ToString().ToLower()</div>
				<div class="hidden md:block">@(binary.ContainsProhibitedAssets ? "Yes" : "No")</div>
				<div class="hidden lg:block">@binary.Assets.Count</div>
				<div class="hidden lg:block">@FileSizeUtils.Format(binary.Size)</div>
			</div>
		}

		<Heading Level="2">Assets</Heading>
		<div class="bg-gray-22 grid gap-3 grid-cols-mod-assets-xs sm:grid-cols-mod-assets-sm md:grid-cols-mod-assets-md lg:grid-cols-mod-assets-lg xl:grid-cols-mod-assets-xl">
			<div>Binary</div>
			<div class="hidden sm:block">Asset</div>
			<div class="hidden sm:block">Type</div>
			<div class="hidden md:block">Prohibited</div>
			<div class="hidden lg:block">Size (extracted)</div>
		</div>
		@foreach (GetModBinary binary in GetMod.ModArchive.Binaries.OrderBy(b => b.Name))
		{
			foreach (GetModAsset asset in binary.Assets.OrderBy(a => a.Type).ThenBy(a => a.Name))
			{
				<div class="grid gap-3 grid-cols-5 odd:bg-gray-16 grid-cols-mod-assets-xs sm:grid-cols-mod-assets-sm md:grid-cols-mod-assets-md lg:grid-cols-mod-assets-lg xl:grid-cols-mod-assets-xl">
					<div class="break-all">@binary.Name</div>
					<div class="hidden sm:block">@asset.Name</div>
					<div class="hidden sm:block">@asset.Type</div>
					<div class="hidden md:block">@(asset.IsProhibited ? "Yes" : "No")</div>
					<div class="hidden lg:block">@FileSizeUtils.Format(asset.Size)</div>
				</div>
			}
		}

		@if (GetMod.ModArchive.Binaries.Any(b => b.ModifiedLoudness != null))
		{
			<Heading Level="2">Modified loudness</Heading>
			<div class="bg-gray-22 grid gap-3 grid-cols-mod-assets-xs sm:grid-cols-mod-assets-sm md:grid-cols-mod-assets-md lg:grid-cols-mod-assets-lg xl:grid-cols-mod-assets-xl">
				<div class="break-all">Binary</div>
				<div>Name</div>
				<div>Prohibited</div>
				<div>Default loudness</div>
				<div>Modified loudness</div>
			</div>
			@foreach (GetModBinary binary in GetMod.ModArchive.Binaries.Where(b => b.ModifiedLoudness != null))
			{
				foreach (GetModifiedLoudness asset in binary.ModifiedLoudness!.OrderBy(a => a.AssetName))
				{
					<div class="grid gap-3 grid-cols-5 odd:bg-gray-16 grid-cols-mod-assets-xs sm:grid-cols-mod-assets-sm md:grid-cols-mod-assets-md lg:grid-cols-mod-assets-lg xl:grid-cols-mod-assets-xl">
						<div class="break-all">@binary.Name</div>
						<div>@asset.AssetName</div>
						<div>@(asset.IsProhibited ? "Yes" : "No")</div>
						<div>@asset.DefaultLoudness.ToString("0.0")</div>
						<div>@asset.ModifiedLoudness.ToString("0.0")</div>
					</div>
				}
			}
		}
	}
}

@code
{
	[Parameter, EditorRequired] public int Id { get; set; }

	public GetMod? GetMod { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetMod = await Http.GetModById(Id);
	}
}
