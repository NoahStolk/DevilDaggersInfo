@page "/custom/mods"
@implements ICustomPage
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Custom
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Mods
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums.Sortings.Public
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<Heading Title="Mods" />

@if (GetMods == null)
{
	<Loading />
}
else
{
	<div class="grid gap-2 grid-cols-2 max-w-md mb-2">
		<span>Mod name</span>
		<input class="bg-black border-gray-22 border-2" @onchange="ChangeInputModName" />
		<span>Author name</span>
		<input class="bg-black border-gray-22 border-2" @onchange="ChangeInputAuthorName" />
		<span>Hosted only</span>
		<input type="checkbox" class="bg-black border-gray-22 border-2 w-8" @onchange="ChangeInputHostedOnly" />
	</div>
	
	<CascadingValue Value="this">
		<Paging />
	</CascadingValue>

	<div class="p-1">Page @(PageIndex + 1) of @TotalPages (@(PageIndex * PageSize + 1) - @Math.Min(GetMods.TotalResults, (PageIndex + 1) * PageSize) of @GetMods.TotalResults)</div>

	<div class="grid gap-3 sm:grid-cols-mods-sm md:grid-cols-mods-md lg:grid-cols-mods-lg xl:grid-cols-mods-xl">
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left" @onclick="() => Sort(ModSorting.Name)">Name</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(ModSorting.Authors)">Author(s)</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(ModSorting.LastUpdated)">Last updated</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(ModSorting.ModTypes)">Type</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(ModSorting.Hosted)">Hosted</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(ModSorting.ProhibitedAssets)">Prohibited assets</a>
	</div>
	@for (int i = 0; i < GetMods.Results.Count; i++)
	{
		GetModOverview mod = GetMods.Results[i];
		<div class="grid gap-3 sm:grid-cols-mods-sm md:grid-cols-mods-md lg:grid-cols-mods-lg xl:grid-cols-mods-xl h-6 @(i % 2 == 0 ? "bg-gray-0b" : string.Empty)">
			<div class="overflow-x-hidden text-left"><a href="/custom/mod/@mod.Id">@mod.Name.ToNoBreakString()</a></div>
			<div class="overflow-x-hidden text-left hidden md:block">@string.Join(", ", mod.Authors).ToNoBreakString()</div>
			<div class="overflow-x-hidden text-left hidden md:block">@mod.LastUpdated.ToString(FormatUtils.DateFormat)</div>
			<div class="overflow-x-hidden text-left hidden md:block">@mod.ModTypes.ToNoBreakString()</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@(mod.IsHosted ? "Yes" : "No")</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@(mod.ContainsProhibitedAssets.HasValue ? mod.ContainsProhibitedAssets.Value ? (MarkupString)"Yes" : (MarkupString)"No" : MarkupUtils.NoDataMarkup)</div>
		</div>
	}
}

@code
{
	private int _pageIndex;
	private int _pageSize = PublicPagingConstants.PageSizeDefault;

	[Parameter, SupplyParameterFromQuery] public bool HostedOnly { get; set; }
	[Parameter, SupplyParameterFromQuery] public string? ModFilter { get; set; }
	[Parameter, SupplyParameterFromQuery] public string? AuthorFilter { get; set; }
	[Parameter, SupplyParameterFromQuery] public int PageIndex { get => _pageIndex; set => _pageIndex = Math.Max(0, value); }
	[Parameter, SupplyParameterFromQuery] public int PageSize { get => _pageSize; set => _pageSize = value < PublicPagingConstants.PageSizeMin || value > PublicPagingConstants.PageSizeMax ? PublicPagingConstants.PageSizeDefault : value; }
	[Parameter, SupplyParameterFromQuery] public int? SortBy { get; set; }
	[Parameter, SupplyParameterFromQuery] public bool Ascending { get; set; }

	private Dictionary<ModSorting, bool> _sortings = new();

	public Page<GetModOverview>? GetMods { get; set; }

	public int TotalPages => GetMods == null ? 0 : (GetMods.TotalResults - 1) / PageSize + 1;
	
	private async Task ChangeInputModName(ChangeEventArgs e)
	{
		// TODO: Fluxor
		ModFilter = e.Value?.ToString();
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.ModFilter, ModFilter);

		await Fetch();
	}

	private async Task ChangeInputAuthorName(ChangeEventArgs e)
	{
		// TODO: Fluxor
		AuthorFilter = e.Value?.ToString();
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.AuthorFilter, AuthorFilter);

		await Fetch();
	}
	
	private async Task ChangeInputHostedOnly(ChangeEventArgs e)
	{
		// TODO: Fluxor
		HostedOnly = bool.TryParse(e.Value?.ToString(), out bool value) && value;
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.HostedOnly, HostedOnly);

		await Fetch();
	}

	protected override async Task OnInitializedAsync()
	{
		foreach (ModSorting e in (ModSorting[])Enum.GetValues(typeof(ModSorting)))
			_sortings.Add(e, false);

		await Fetch();
	}

	public async Task ChangePageIndex(int pageIndex)
	{
		PageIndex = Math.Clamp(pageIndex, 0, TotalPages - 1);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageIndex, PageIndex);

		await Fetch();

		StateHasChanged();
	}

	public async Task ChangePageSize(ChangeEventArgs e)
	{
		if (!int.TryParse(e.Value?.ToString(), out int pageSize))
			return;

		PageSize = pageSize;
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageSize, PageSize);

		PageIndex = Math.Clamp(PageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task Sort(ModSorting sortBy)
	{
		SortBy = (int)sortBy;
		_sortings[sortBy] = !_sortings[sortBy];
		Ascending = _sortings[sortBy];

		NavigationManager.AddOrModifyQueryParameters(new(QueryParameters.SortBy, SortBy), new(QueryParameters.Ascending, Ascending));

		await Fetch();
	}

	private async Task Fetch()
	{
		GetMods = await Http.GetMods(HostedOnly, ModFilter, AuthorFilter, PageIndex, PageSize, SortBy.HasValue ? (ModSorting)SortBy.Value : ModSorting.LastUpdated, Ascending);

		if (PageIndex >= TotalPages)
		{
			PageIndex = TotalPages - 1;
			NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageIndex, PageIndex);
		}
	}

	private static class QueryParameters
	{
		public static string HostedOnly { get; } = nameof(HostedOnly);
		public static string ModFilter { get; } = nameof(ModFilter);
		public static string AuthorFilter { get; } = nameof(AuthorFilter);
		public static string PageIndex { get; } = nameof(PageIndex);
		public static string PageSize { get; } = nameof(PageSize);
		public static string SortBy { get; } = nameof(SortBy);
		public static string Ascending { get; } = nameof(Ascending);
	}
}
