@page "/custom/spawnset/{Id:int}"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Core.Spawnset
@using DevilDaggersInfo.Core.Spawnset.View
@using DevilDaggersInfo.Core.Wiki.Enums
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Spawnsets
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

@if (GetSpawnset == null)
{
	<Loading />
}
else if (SpawnsView == null)
{
	<div>Spawnset could not be parsed.</div>
}
else
{
	<Heading>Spawnset - @GetSpawnset.Name</Heading>

	<div class="bg-gray-22 max-w-sm">
		<DataField Name="Author">@GetSpawnset.AuthorName</DataField>
		<DataField Name="Last updated">@GetSpawnset.LastUpdated.ToString(FormatUtils.DateTimeFormat)</DataField>
		<DataField Name="Practice">@GetSpawnset.IsPractice</DataField>
		<DataField Name="File size">@FileSizeUtils.Format(GetSpawnset.FileBytes.Length)</DataField>

		<div class="px-1 py-3">
			<a class="bg-dark-red hover:bg-red transition-colors duration-200 p-2 rounded text-color-text text-center text-xl font-goethe" href="/api/spawnsets/@(GetSpawnset.Name)/file" download="@GetSpawnset.Name" role="button" target="=_top">Download</a>
		</div>
	</div>
	<Heading Level="2">Spawns</Heading>
	<Spawnset SpawnsView=SpawnsView />
}

@code
{
	[Parameter, EditorRequired] public int Id { get; set; }

	public GetSpawnset? GetSpawnset { get; set; }

	public SpawnsView? SpawnsView { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetSpawnset = await Http.GetSpawnsetById(Id);

		if (!SpawnsetBinary.TryParse(GetSpawnset.FileBytes, out SpawnsetBinary? spawnset))
		{
			// TODO: Log error.
			return;
		}

		SpawnsView = new(spawnset, GameVersion.V3_1);
	}
}
