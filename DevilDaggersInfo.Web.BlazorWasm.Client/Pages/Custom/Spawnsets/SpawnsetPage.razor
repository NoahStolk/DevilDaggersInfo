@page "/custom/spawnset/{Id:int}"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Core.Spawnset
@using DevilDaggersInfo.Core.Spawnset.Enums
@using DevilDaggersInfo.Core.Spawnset.View
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Spawnsets
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<Heading>Spawnset</Heading>

@if (GetSpawnset == null)
{
	<Loading />
}
else if (SpawnsView == null)
{
	<div>Spawnset could not be parsed.</div>
}
else
{
	<div>@GetSpawnset.Name</div>
	<div>@GetSpawnset.FileBytes.Length</div>
	@foreach (SpawnView sv in SpawnsView.PreLoop)
	{
		<div>@sv.EnemyType, @sv.Seconds, @sv.Gems, @sv.GemsTotal</div>
	}
	<div>LOOP</div>
	@for (int i = 0; i < SpawnsView.Waves.Length; i++)
	{
		<div>WAVE @(i + 1)</div>
		@foreach (SpawnView sv in SpawnsView.Waves[i])
		{
			<div>@sv.EnemyType, @sv.Seconds, @sv.Gems, @sv.GemsTotal</div>
		}
	}
}

@code
{
	[Parameter, EditorRequired] public int Id { get; set; }

	public GetSpawnset? GetSpawnset { get; set; }

	public SpawnsView? SpawnsView { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetSpawnset = await Http.GetSpawnsetById(Id);

		if (!Spawnset.TryParse(GetSpawnset.FileBytes, out Spawnset? spawnset))
			return;

		SpawnsView = new(spawnset, MajorGameVersion.V3);
	}
}
