@page "/custom/spawnset/{Id:int}"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Core.Spawnset
@using DevilDaggersInfo.Core.Spawnset.View
@using DevilDaggersInfo.Core.Wiki.Enums
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Spawnsets
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

@if (GetSpawnset == null)
{
	<Loading />
}
else if (SpawnsetBinary == null || SpawnsView == null)
{
	<div>Spawnset could not be parsed.</div>
}
else
{
	<Heading Title="@($"Spawnset - {GetSpawnset.Name}")" />

	<div class="bg-gray-1 max-w-sm px-1">
		<DataField Name="Author">@GetSpawnset.AuthorName</DataField>
		<DataField Name="Last updated">@GetSpawnset.LastUpdated.ToString(FormatUtils.DateTimeFormat)</DataField>
		<DataField Name="Practice">@(GetSpawnset.IsPractice ? "Yes" : "No")</DataField>
		<DataField Name="File size">@FileSizeUtils.Format(GetSpawnset.FileBytes.Length)</DataField>

		<div class="grid grid-cols-2 text-lg">
			<div class="px-1 py-3">
				<a class="btn btn-download px-2 py-1" href="@($"/api/spawnsets/{GetSpawnset.Name}/file")">Download spawnset</a>
			</div>
			@if (GetSpawnset.CustomLeaderboardId.HasValue)
			{
				<div class="px-1 py-3 text-right">
					<a href="@($"/custom/leaderboard/{GetSpawnset.CustomLeaderboardId.Value}")">View leaderboard</a>
				</div>
			}
		</div>
	</div>

	<div class="grid grid-cols-1 lg:grid-cols-2">
		@*Additional <div> is necessary to make sticky work.*@
		<div>
			<div class="lg:sticky lg:top-0">
				@if (!string.IsNullOrWhiteSpace(GetSpawnset.HtmlDescription))
				{
					<Heading Title="Description" Level="2" />
					<div class="bg-gray-1 max-w-sm px-1">
						@((MarkupString)@GetSpawnset.HtmlDescription)
					</div>
				}

				<Heading Title="Format" Level="2" />
				<div class="bg-gray-1 max-w-sm px-1">
					<DataField Name="Game version">@SpawnsetBinary.GetGameVersionString()</DataField>
					<DataField Name="Game mode">@SpawnsetBinary.GameMode</DataField>
				</div>

				<Heading Title="Arena" Level="2" />
				<div class="bg-gray-1 max-w-sm px-1">
					<DataField Name="Start radius">@SpawnsetBinary.ShrinkStart</DataField>
					<DataField Name="End radius">@SpawnsetBinary.ShrinkEnd</DataField>
					<DataField Name="Shrinking rate">@SpawnsetBinary.ShrinkRate</DataField>
					<DataField Name="Brightness">@SpawnsetBinary.Brightness</DataField>
				</div>
				<table class="table-fixed mt-2 border-2 border-gray-3">
					<tbody>
						@for (int i = 0; i < SpawnsetBinary.ArenaTiles.GetLength(0); i++)
						{
							<tr>
								@for (int j = 0; j < SpawnsetBinary.ArenaTiles.GetLength(1); j++)
								{
									float height = MathF.Round(SpawnsetBinary.ArenaTiles[j, i] * 32 + 64); // Swap coordinates because <tr> elements cannot be vertical.

									string backgroundColorStyle = $"background-color: rgb({height}, {Math.Round(height / 2)}, 0)";
									<td class="w-2 h-2 border border-black" style="@backgroundColorStyle"></td>
								}
							</tr>
						}
					</tbody>
				</table>

				<Heading Title="Settings" Level="2" />
				<div class="bg-gray-1 max-w-sm px-1">
					<DataField Name="Hand">Level @((byte)SpawnsetBinary.HandLevel)</DataField>
					<DataField Name="Additional gems">@SpawnsetBinary.AdditionalGems</DataField>
					<DataField Name="Timer Start">@SpawnsetBinary.TimerStart.ToString(FormatUtils.TimeFormat)</DataField>
				</div>

				<Heading Title="Effective Player Settings" Level="2" />
				<div class="bg-gray-1 max-w-sm px-1">
					<DataField Name="Effective hand">Level @((byte)EffectivePlayerSettings.HandLevel)</DataField>
					<DataField Name="@($"Effective {((int)EffectivePlayerSettings.HandLevel > 2 ? "homing" : "gems")}")">@EffectivePlayerSettings.GemsOrHoming</DataField>
					@if (EffectivePlayerSettings.HandLevel != EffectivePlayerSettings.HandModel)
					{
						<DataField Name="Effective hand model">Level @((byte)EffectivePlayerSettings.HandModel)</DataField>
					}
				</div>
			</div>
		</div>

		<div>
			<Heading Title="Spawns" Level="2" />
			<SpawnsetSpawns SpawnsView=SpawnsView />
		</div>
	</div>
}

@code
{
	[Parameter, EditorRequired] public int Id { get; set; }

	public GetSpawnset? GetSpawnset { get; set; }

	public SpawnsetBinary? SpawnsetBinary { get; set; }
	public SpawnsView? SpawnsView { get; set; }
	public EffectivePlayerSettings EffectivePlayerSettings { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetSpawnset = await Http.GetSpawnsetById(Id);

		if (!SpawnsetBinary.TryParse(GetSpawnset.FileBytes, out SpawnsetBinary? spawnsetBinary))
		{
			// TODO: Log error.
			return;
		}

		SpawnsetBinary = spawnsetBinary;
		SpawnsView = new(spawnsetBinary, GameConstants.CurrentVersion);
		EffectivePlayerSettings = spawnsetBinary.GetEffectivePlayerSettings();
	}
}
