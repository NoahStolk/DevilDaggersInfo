@page "/custom/spawnsets"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Spawnsets
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums.Sortings.Public
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<Heading>Spawnsets</Heading>

@if (GetSpawnsets == null)
{
	<Loading />
}
else
{
	<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(0)">|&lt;</button>
	<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(PageIndex - 1)">&lt;</button>
	<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(PageIndex + 1)">&gt;</button>
	<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(TotalPages - 1)">&gt;|</button>
	<Select @onchange="ChangePageSize" class="bg-gray-900 transition-colors duration-100 h-8 py-1 rounded text-color-text">
		@foreach (int i in PublicPagingConstants.PageSizeOptions)
		{
			if (i == PageSize)
			{
				<option value="@i" selected>@i</option>
			}
			else
			{
				<option value="@i">@i</option>
			}
		}
	</Select>
	<div class="p-1">Page @(PageIndex + 1) of @TotalPages (@(PageIndex * PageSize) - @Math.Min(GetSpawnsets.TotalResults, (PageIndex + 1) * PageSize) of @GetSpawnsets.TotalResults)</div>

	<div class="grid gap-3 sm:grid-cols-spawnsets-sm md:grid-cols-spawnsets-md lg:grid-cols-spawnsets-lg xl:grid-cols-spawnsets-xl">
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left" @onclick="() => Sort(SpawnsetSorting.Name)">Name</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.AuthorName)">Author</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.LastUpdated)">Created</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.GameVersion)">Game version</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.GameMode)">Game mode</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.LoopLength)">Loop length</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.LoopSpawnCount)">Loop spawns</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.PreLoopLength)">Pre-loop length</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.PreLoopSpawnCount)">Pre-loop spawns</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden lg:block" @onclick="() => Sort(SpawnsetSorting.Hand)">Hand</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden lg:block" @onclick="() => Sort(SpawnsetSorting.AdditionalGems)">Gems</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden lg:block" @onclick="() => Sort(SpawnsetSorting.TimerStart)">Timer</a>
	</div>
	@for (int i = 0; i < GetSpawnsets.Results.Count; i++)
	{
		GetSpawnsetOverview spawnset = GetSpawnsets.Results[i];
		<div class="grid gap-3 sm:grid-cols-spawnsets-sm md:grid-cols-spawnsets-md lg:grid-cols-spawnsets-lg xl:grid-cols-spawnsets-xl h-6 @(i % 2 == 0 ? "bg-gray0B" : string.Empty)">
			<div class="overflow-x-hidden text-left"><a href="/custom/spawnset/@spawnset.Id">@spawnset.Name</a></div>
			<div class="overflow-x-hidden text-left hidden md:block">@spawnset.AuthorName</div>
			<div class="overflow-x-hidden text-left hidden md:block">@spawnset.LastUpdated.ToString(FormatUtils.DateFormat)</div>
			<div class="overflow-x-hidden text-left hidden md:block">@spawnset.GameVersion</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.GameMode</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@(spawnset.LoopLength.HasValue ? spawnset.LoopLength.Value.ToString(FormatUtils.TimeFormat) : "N/A")</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.LoopSpawnCount</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@(spawnset.PreLoopLength.HasValue ? spawnset.PreLoopLength.Value.ToString(FormatUtils.TimeFormat) : "N/A")</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.PreLoopSpawnCount</div>
			<div class="overflow-x-hidden text-left hidden lg:block">Level @spawnset.Hand</div>
			<div class="overflow-x-hidden text-right hidden lg:block">@spawnset.AdditionalGems</div>
			<div class="overflow-x-hidden text-right hidden lg:block">@spawnset.TimerStart.ToString(FormatUtils.TimeFormat)</div>
		</div>
	}
}

@code
{
	private int _pageIndex;
	private int _pageSize = PublicPagingConstants.PageSizeDefault;

	[Parameter, SupplyParameterFromQuery] public bool OnlyPractice { get; set; }
	[Parameter, SupplyParameterFromQuery] public bool OnlyWithLeaderboard { get; set; }
	[Parameter, SupplyParameterFromQuery] public int PageIndex { get => _pageIndex; set => _pageIndex = Math.Max(0, value); }
	[Parameter, SupplyParameterFromQuery] public int PageSize { get => _pageSize; set => _pageSize = value < PublicPagingConstants.PageSizeMin || value > PublicPagingConstants.PageSizeMax ? PublicPagingConstants.PageSizeDefault : value; }
	[Parameter, SupplyParameterFromQuery] public int SortBy { get; set; }
	[Parameter, SupplyParameterFromQuery] public bool Ascending { get; set; }

	private Dictionary<SpawnsetSorting, bool> _sortings = new();

	public Page<GetSpawnsetOverview>? GetSpawnsets { get; set; }

	private int TotalPages => GetSpawnsets == null ? 0 : (GetSpawnsets.TotalResults - 1) / PageSize + 1;

	protected override async Task OnInitializedAsync()
	{
		foreach (SpawnsetSorting e in (SpawnsetSorting[])Enum.GetValues(typeof(SpawnsetSorting)))
			_sortings.Add(e, false);

		await Fetch();
	}

	private async Task ChangePageIndex(int pageIndex)
	{
		PageIndex = Math.Clamp(pageIndex, 0, TotalPages - 1);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageIndex, PageIndex);

		await Fetch();
	}

	private async Task ChangePageSize(ChangeEventArgs e)
	{
		if (!int.TryParse(e.Value?.ToString(), out int pageSize))
			return;

		PageSize = pageSize;
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageSize, PageSize);

		PageIndex = Math.Clamp(PageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task Sort(SpawnsetSorting sortBy)
	{
		SortBy = (int)sortBy;
		_sortings[sortBy] = !_sortings[sortBy];
		Ascending = _sortings[sortBy];

		NavigationManager.AddOrModifyQueryParameters(new(QueryParameters.SortBy, SortBy), new(QueryParameters.Ascending, Ascending));

		await Fetch();
	}

	private async Task Fetch()
	{
		GetSpawnsets = await Http.GetSpawnsets(OnlyPractice, OnlyWithLeaderboard, PageIndex, PageSize, (SpawnsetSorting)SortBy, Ascending);
	}

	private static class QueryParameters
	{
		public static string OnlyPractice { get; } = nameof(OnlyPractice);
		public static string OnlyWithLeaderboard { get; } = nameof(OnlyWithLeaderboard);
		public static string PageIndex { get; } = nameof(PageIndex);
		public static string PageSize { get; } = nameof(PageSize);
		public static string SortBy { get; } = nameof(SortBy);
		public static string Ascending { get; } = nameof(Ascending);
	}
}
