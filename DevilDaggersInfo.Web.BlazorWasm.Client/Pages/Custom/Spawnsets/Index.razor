@page "/custom/spawnsets"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Custom
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Spawnsets
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums.Sortings.Public
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<Heading>Spawnsets</Heading>

@if (GetSpawnsets == null)
{
	<Loading />
}
else
{
	<OverviewPagination @ref=_overviewPaging />

	<div class="grid gap-3 sm:grid-cols-spawnsets-sm md:grid-cols-spawnsets-md lg:grid-cols-spawnsets-lg xl:grid-cols-spawnsets-xl">
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left" @onclick="() => Sort(SpawnsetSorting.Name)">Name</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.AuthorName)">Author</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.LastUpdated)">Created</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.GameVersion)">Game version</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.GameMode)">Game mode</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.LoopLength)">Loop length</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.LoopSpawnCount)">Loop spawns</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.PreLoopLength)">Pre-loop length</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.PreLoopSpawnCount)">Pre-loop spawns</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden lg:block" @onclick="() => Sort(SpawnsetSorting.Hand)">Hand</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden lg:block" @onclick="() => Sort(SpawnsetSorting.AdditionalGems)">Gems</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden lg:block" @onclick="() => Sort(SpawnsetSorting.TimerStart)">Timer</a>
	</div>
	@for (int i = 0; i < GetSpawnsets.Results.Count; i++)
	{
		GetSpawnsetOverview spawnset = GetSpawnsets.Results[i];
		<div class="grid gap-3 sm:grid-cols-spawnsets-sm md:grid-cols-spawnsets-md lg:grid-cols-spawnsets-lg xl:grid-cols-spawnsets-xl h-6 @(i % 2 == 0 ? "bg-gray-0b" : string.Empty)">
			<div class="overflow-x-hidden text-left"><a href="/custom/spawnset/@spawnset.Id">@spawnset.Name.ToNoBreakString()</a></div>
			<div class="overflow-x-hidden text-left hidden md:block">@spawnset.AuthorName.ToNoBreakString()</div>
			<div class="overflow-x-hidden text-left hidden md:block">@spawnset.LastUpdated.ToString(FormatUtils.DateFormat)</div>
			<div class="overflow-x-hidden text-left hidden md:block">@spawnset.GameVersion</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.GameMode</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@(spawnset.LoopLength.HasValue ? spawnset.LoopLength.Value.ToString(FormatUtils.TimeFormat) : "N/A")</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.LoopSpawnCount</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@(spawnset.PreLoopLength.HasValue ? spawnset.PreLoopLength.Value.ToString(FormatUtils.TimeFormat) : "N/A")</div>
			<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.PreLoopSpawnCount</div>
			<div class="overflow-x-hidden text-left hidden lg:block">Level @spawnset.Hand</div>
			<div class="overflow-x-hidden text-right hidden lg:block">@spawnset.AdditionalGems</div>
			<div class="overflow-x-hidden text-right hidden lg:block">@spawnset.TimerStart.ToString(FormatUtils.TimeFormat)</div>
		</div>
	}
}

@code
{
	[Parameter, SupplyParameterFromQuery] public bool OnlyPractice { get; set; }
	[Parameter, SupplyParameterFromQuery] public bool OnlyWithLeaderboard { get; set; }
	[Parameter, SupplyParameterFromQuery] public int? SortBy { get; set; }
	[Parameter, SupplyParameterFromQuery] public bool Ascending { get; set; }

	private Dictionary<SpawnsetSorting, bool> _sortings = new();

	private OverviewPaging? _overviewPaging;

	public Page<GetSpawnsetOverview>? GetSpawnsets { get; set; }

	protected override async Task OnInitializedAsync()
	{
		foreach (SpawnsetSorting e in (SpawnsetSorting[])Enum.GetValues(typeof(SpawnsetSorting)))
			_sortings.Add(e, false);

		await Fetch();
	}

	private async Task Sort(SpawnsetSorting sortBy)
	{
		SortBy = (int)sortBy;
		_sortings[sortBy] = !_sortings[sortBy];
		Ascending = _sortings[sortBy];

		NavigationManager.AddOrModifyQueryParameters(new(QueryParameters.SortBy, SortBy), new(QueryParameters.Ascending, Ascending));

		await Fetch();
	}

	private async Task Fetch()
	{
		GetSpawnsets = await Http.GetSpawnsets(OnlyPractice, OnlyWithLeaderboard, _overviewPaging?.PageIndex ?? 0, _overviewPaging?.PageSize ?? 25, SortBy.HasValue ? (SpawnsetSorting)SortBy.Value : SpawnsetSorting.LastUpdated, Ascending);
	}

	private static class QueryParameters
	{
		public static string OnlyPractice { get; } = nameof(OnlyPractice);
		public static string OnlyWithLeaderboard { get; } = nameof(OnlyWithLeaderboard);
		public static string SortBy { get; } = nameof(SortBy);
		public static string Ascending { get; } = nameof(Ascending);
	}
}
