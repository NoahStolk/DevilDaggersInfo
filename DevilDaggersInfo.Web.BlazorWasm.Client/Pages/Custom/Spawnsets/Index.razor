@page "/custom/spawnsets"
@implements IHasNavigation
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Custom
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Spawnsets
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums.Sortings.Public
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<Heading Title="Spawnsets" />

@if (GetSpawnsets == null)
{
	<Loading />
}
else
{
	<div class="bg-gray-1 p-2 text-lg">
		<div class="grid gap-2 grid-cols-2 max-w-md mb-2">
			<span>Spawnset name</span>
			<input class="bg-black border-gray-3 border-2" @onchange="ChangeInputSpawnsetName" />
			<span>Author name</span>
			<input class="bg-black border-gray-3 border-2" @onchange="ChangeInputAuthorName" />
			<span>Practice only</span>
			<input type="checkbox" class="bg-black border-gray-3 border-2 w-8" @onchange="ChangeInputPracticeOnly" />
			<span>With leaderboard only</span>
			<input type="checkbox" class="bg-black border-gray-3 border-2 w-8" @onchange="ChangeInputWithCustomLeaderboardOnly" />
		</div>

		<CascadingValue Value="this">
			<Paging />
		</CascadingValue>
	</div>

	@if (GetSpawnsets.Results.Count > 0)
	{
		<div class="grid gap-3 sm:grid-cols-spawnsets-sm md:grid-cols-spawnsets-md lg:grid-cols-spawnsets-lg xl:grid-cols-spawnsets-xl">
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left" @onclick="() => Sort(SpawnsetSorting.Name)">Name</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.AuthorName)">Author</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.LastUpdated)">Created</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(SpawnsetSorting.GameVersion)">Game version</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.GameMode)">Game mode</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.LoopLength)">Loop length</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.LoopSpawnCount)">Loop spawns</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.PreLoopLength)">Pre-loop length</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(SpawnsetSorting.PreLoopSpawnCount)">Pre-loop spawns</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden lg:block" @onclick="() => Sort(SpawnsetSorting.Hand)">Hand</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden lg:block" @onclick="() => Sort(SpawnsetSorting.AdditionalGems)">Gems</a>
			<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden lg:block" @onclick="() => Sort(SpawnsetSorting.TimerStart)">Timer</a>
		</div>

		for (int i = 0; i < GetSpawnsets.Results.Count; i++)
		{
			GetSpawnsetOverview spawnset = GetSpawnsets.Results[i];
			<div class="grid gap-3 sm:grid-cols-spawnsets-sm md:grid-cols-spawnsets-md lg:grid-cols-spawnsets-lg xl:grid-cols-spawnsets-xl h-6 @(i % 2 == 0 ? "bg-gray-1" : string.Empty)">
				<div class="overflow-x-hidden text-left"><a href="/custom/spawnset/@spawnset.Id">@spawnset.Name.ToNoBreakString()</a></div>
				<div class="overflow-x-hidden text-left hidden md:block">@spawnset.AuthorName.ToNoBreakString()</div>
				<div class="overflow-x-hidden text-left hidden md:block">@spawnset.LastUpdated.ToString(FormatUtils.DateFormat)</div>
				<div class="overflow-x-hidden text-left hidden md:block">@spawnset.GameVersion</div>
				<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.GameMode</div>
				<div class="overflow-x-hidden text-right hidden xl:block">@(spawnset.LoopLength.HasValue ? (MarkupString)spawnset.LoopLength.Value.ToString(FormatUtils.TimeFormat) : MarkupUtils.NoDataMarkup)</div>
				<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.LoopSpawnCount</div>
				<div class="overflow-x-hidden text-right hidden xl:block">@(spawnset.PreLoopLength.HasValue ? (MarkupString)spawnset.PreLoopLength.Value.ToString(FormatUtils.TimeFormat) : MarkupUtils.NoDataMarkup)</div>
				<div class="overflow-x-hidden text-right hidden xl:block">@spawnset.PreLoopSpawnCount</div>
				<div class="overflow-x-hidden text-left hidden lg:block">Level @((byte)spawnset.Hand)</div>
				<div class="overflow-x-hidden text-right hidden lg:block">@spawnset.AdditionalGems</div>
				<div class="overflow-x-hidden text-right hidden lg:block">@spawnset.TimerStart.ToString(FormatUtils.TimeFormat)</div>
			</div>
		}
	}
}

@code
{
	private int _pageIndex;
	private int _pageSize = PagingConstants.PageSizeDefault;

	[Parameter, SupplyParameterFromQuery] public bool PracticeOnly { get; set; }
	[Parameter, SupplyParameterFromQuery] public bool WithCustomLeaderboardOnly { get; set; }
	[Parameter, SupplyParameterFromQuery] public string? SpawnsetFilter { get; set; }
	[Parameter, SupplyParameterFromQuery] public string? AuthorFilter { get; set; }
	[Parameter, SupplyParameterFromQuery] public int PageIndex { get => _pageIndex; set => _pageIndex = Math.Max(0, value); }
	[Parameter, SupplyParameterFromQuery] public int PageSize { get => _pageSize; set => _pageSize = value < PagingConstants.PageSizeMin || value > PagingConstants.PageSizeMax ? PagingConstants.PageSizeDefault : value; }
	[Parameter, SupplyParameterFromQuery] public int? SortBy { get; set; }
	[Parameter, SupplyParameterFromQuery] public bool Ascending { get; set; }

	private Dictionary<SpawnsetSorting, bool> _sortings = new();

	public Page<GetSpawnsetOverview>? GetSpawnsets { get; set; }

	public int TotalPages => GetSpawnsets == null ? 0 : (GetSpawnsets.TotalResults - 1) / PageSize + 1;
	public int TotalResults => GetSpawnsets == null ? 0 : GetSpawnsets.TotalResults;

	private async Task ChangeInputSpawnsetName(ChangeEventArgs e)
	{
		// TODO: Fluxor
		SpawnsetFilter = e.Value?.ToString();
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.SpawnsetFilter, SpawnsetFilter);

		await Fetch();
	}

	private async Task ChangeInputAuthorName(ChangeEventArgs e)
	{
		// TODO: Fluxor
		AuthorFilter = e.Value?.ToString();
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.AuthorFilter, AuthorFilter);

		await Fetch();
	}

	private async Task ChangeInputPracticeOnly(ChangeEventArgs e)
	{
		// TODO: Fluxor
		PracticeOnly = bool.TryParse(e.Value?.ToString(), out bool value) && value;
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PracticeOnly, PracticeOnly);

		await Fetch();
	}

	private async Task ChangeInputWithCustomLeaderboardOnly(ChangeEventArgs e)
	{
		// TODO: Fluxor
		WithCustomLeaderboardOnly = bool.TryParse(e.Value?.ToString(), out bool value) && value;
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.WithCustomLeaderboardOnly, WithCustomLeaderboardOnly);

		await Fetch();
	}

	protected override async Task OnInitializedAsync()
	{
		// TODO: Set <input> values... Or use binding.
		foreach (SpawnsetSorting e in (SpawnsetSorting[])Enum.GetValues(typeof(SpawnsetSorting)))
			_sortings.Add(e, false);

		await Fetch();
	}

	public async Task ChangePageIndex(int pageIndex)
	{
		PageIndex = Math.Clamp(pageIndex, 0, TotalPages - 1);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageIndex, PageIndex);

		await Fetch();

		StateHasChanged();
	}

	public async Task ChangePageSize(ChangeEventArgs e)
	{
		if (!int.TryParse(e.Value?.ToString(), out int pageSize))
			return;

		PageSize = pageSize;
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageSize, PageSize);

		PageIndex = Math.Clamp(PageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task Sort(SpawnsetSorting sortBy)
	{
		SortBy = (int)sortBy;
		_sortings[sortBy] = !_sortings[sortBy];
		Ascending = _sortings[sortBy];

		NavigationManager.AddOrModifyQueryParameters(new(QueryParameters.SortBy, SortBy), new(QueryParameters.Ascending, Ascending));

		await Fetch();
	}

	private async Task Fetch()
	{
		GetSpawnsets = await Http.GetSpawnsets(PracticeOnly, WithCustomLeaderboardOnly, SpawnsetFilter, AuthorFilter, PageIndex, PageSize, SortBy.HasValue ? (SpawnsetSorting)SortBy.Value : SpawnsetSorting.LastUpdated, Ascending);

		if (PageIndex >= TotalPages)
		{
			PageIndex = TotalPages - 1;
			NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageIndex, PageIndex);
		}
	}

	private static class QueryParameters
	{
		public static string SpawnsetFilter { get; } = nameof(SpawnsetFilter);
		public static string AuthorFilter { get; } = nameof(AuthorFilter);
		public static string PracticeOnly { get; } = nameof(PracticeOnly);
		public static string WithCustomLeaderboardOnly { get; } = nameof(WithCustomLeaderboardOnly);
		public static string PageIndex { get; } = nameof(PageIndex);
		public static string PageSize { get; } = nameof(PageSize);
		public static string SortBy { get; } = nameof(SortBy);
		public static string Ascending { get; } = nameof(Ascending);
	}
}
