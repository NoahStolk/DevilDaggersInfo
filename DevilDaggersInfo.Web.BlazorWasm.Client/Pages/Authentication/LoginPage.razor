@page "/authentication/login"
@inject PublicApiHttpClient Http
@inject AdminAuthenticationStateProvider Auth
@inject NavigationManager Navigation
@using DevilDaggersInfo.Web.BlazorWasm.Client.Authentication
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Authentication
@using Newtonsoft.Json
@using System.Net

<Heading>Login</Heading>

<div class="grid gap-2 grid-cols-2 max-w-md">
	<span>Name</span>
	<input class="bg-black border-gray-22 border-2" @onchange="ChangeName" />
	<span>Password</span>
	<input class="bg-black border-gray-22 border-2" @onchange="ChangePassword" />
</div>

<div class="text-red">@_error</div>

<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 p-1 rounded text-color-text" @onclick="ClickLogin">Login</button>

@code
{
	private string? _name;
	private string? _password;

	private string? _error;

	private void ChangeName(ChangeEventArgs e)
	{
		_name = e.Value?.ToString();
	}

	private void ChangePassword(ChangeEventArgs e)
	{
		_password = e.Value?.ToString();
	}

	private async Task ClickLogin(MouseEventArgs e)
	{
		if (_name == null || _password == null)
		{
			_error = "Fill in user and password.";
			return;
		}

		HttpResponseMessage httpResponseMessage = await Http.Login(new LoginRequest
		{
			Name = _name,
			Password = _password,
		});

		if (httpResponseMessage.StatusCode == HttpStatusCode.OK)
		{
			LoginResponse? authenticationResponse = await httpResponseMessage.Content.ReadFromJsonAsync<LoginResponse>() ?? throw new($"Could not deserialize {nameof(LoginResponse)}.");
			await Auth.SetTokenAsync(authenticationResponse.Token);
			Navigation.NavigateTo("/");
		}
		else
		{
			_error = await httpResponseMessage.Content.ReadAsStringAsync();
		}
	}
}
