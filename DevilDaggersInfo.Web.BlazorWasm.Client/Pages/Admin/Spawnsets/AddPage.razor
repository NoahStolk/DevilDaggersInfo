@page "/admin/spawnsets/add"
@inject AdminApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Players
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Spawnsets

<AdminAdd OverviewUrl="/admin/spawnsets" PostApiUrl="api/admin/spawnsets" Model="_addSpawnset" @ref="_addComponent">
	<AdminInput Label="@nameof(AddSpawnset.PlayerId)"><SearchDropdown Values="@_playerNames" Converter="s => int.Parse(s)" @bind-Value="@_addSpawnset.PlayerId" /></AdminInput>
	<AdminInput Label="@nameof(AddSpawnset.Name)"><InputText class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="@_addSpawnset.Name" /></AdminInput>
	<AdminInput Label="@nameof(AddSpawnset.MaxDisplayWaves)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addSpawnset.MaxDisplayWaves" /></AdminInput>
	<AdminInput Label="@nameof(AddSpawnset.HtmlDescription)"><InputText class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="@_addSpawnset.HtmlDescription" /></AdminInput>
	<AdminInput Label="@nameof(AddSpawnset.IsPractice)"><InputCheckbox @bind-Value="@_addSpawnset.IsPractice" /></AdminInput>
	<AdminInput Label="@nameof(AddSpawnset.FileContents)"><InputFile OnChange="LoadFile" /></AdminInput>
</AdminAdd>

@code
{
	private Dictionary<int, string>? _playerNames;
	private AddSpawnset _addSpawnset = new();
	private AdminAdd<AddSpawnset> _addComponent = null!;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			List<GetPlayerName> getPlayerNames = await Http.Client.GetFromJsonAsync<List<GetPlayerName>>($"api/admin/players/names") ?? throw new($"Response could not be deserialized to {nameof(List<GetPlayerName>)}.");
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			_addComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_addComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_addComponent.ErrorMessage = "An error occurred while sending the request.";

			_addComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task LoadFile(InputFileChangeEventArgs e)
	{
		IBrowserFile file = e.File;
		using MemoryStream ms = new();
		await file.OpenReadStream().CopyToAsync(ms);

		_addSpawnset.FileContents = ms.ToArray();
	}
}
