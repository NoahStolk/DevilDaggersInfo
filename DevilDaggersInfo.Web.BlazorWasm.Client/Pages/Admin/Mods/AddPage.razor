@page "/admin/mods/add"
@inherits BaseAdminPage
@using DevilDaggersInfo.Core.Mod.Utils
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Admin
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Mods
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Players
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<AdminAdd Name="Mod" OverviewUrl="/admin/mods" ApiCall="Http.AddMod" Model="_addMod" @ref="_addComponent">
	<AdminInput Label="@nameof(AddMod.Name)"><InputText class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_addMod.Name" /></AdminInput>
	<AdminInput Label="@nameof(AddMod.PlayerIds)"><MultiSearchDropdown Values="@_playerNames" @bind-Value="@_addMod.PlayerIds" /></AdminInput>
	<AdminInput Label="@nameof(AddMod.TrailerUrl)"><InputText class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_addMod.TrailerUrl" /></AdminInput>
	<AdminInput Label="@nameof(AddMod.HtmlDescription)"><InputText class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_addMod.HtmlDescription" /></AdminInput>
	<AdminInput Label="@nameof(AddMod.ModTypes)"><MultiSearchDropdown Values="@_modTypes" @bind-Value="@_addMod.ModTypes" /></AdminInput>
	<AdminInput Label="@nameof(AddMod.Url)"><InputText class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_addMod.Url" /></AdminInput>
	<AdminInput Label="@nameof(AddMod.IsHidden)"><InputCheckbox @bind-Value="@_addMod.IsHidden" /></AdminInput>
	<AdminInput Label="@nameof(AddMod.Binaries)"><InputFile OnChange="LoadBinaries" multiple /></AdminInput>
	<AdminInput Label="@nameof(AddMod.Screenshots)"><InputFile OnChange="LoadScreenshots" multiple /></AdminInput>
</AdminAdd>

@if (_addMod.Binaries.Count > 0 || _binaryFileSizeErrors.Count > 0)
{
	<p class="text-red">Binaries to upload</p>
	<ul class="pl-4">
		@foreach (string binaryName in _addMod.Binaries.Select(kvp => kvp.Key))
		{
			<li class="list-disc">@binaryName (will be renamed to @(BinaryFileNameUtils.SanitizeModBinaryFileName(binaryName, _addMod.Name)))</li>
		}
		@foreach (string fileSizeError in _binaryFileSizeErrors)
		{
			<li class="list-disc text-red">@fileSizeError</li>
		}
	</ul>
}
@if (_addMod.Screenshots.Count > 0 || _screenshotFileSizeErrors.Count > 0)
{
	<p class="text-red">Screenshots to upload</p>
	<ul class="pl-4">
		@{
			int i = 0;
			foreach (string screenshot in _addMod.Screenshots.OrderBy(kvp => kvp.Key).Select(kvp => kvp.Key))
			{
				<li class="list-disc">@screenshot (will be renamed to @($"{i:00}.png"))</li>
				i++;
			}
			foreach (string fileSizeError in _screenshotFileSizeErrors)
			{
				<li class="list-disc text-red">@fileSizeError</li>
			}
		}
	</ul>
}

@code
{
	private Dictionary<int, string>? _playerNames;
	private AddMod _addMod = new();
	private AdminAdd<AddMod> _addComponent = null!;
	private Dictionary<int, string> _modTypes = Enum.GetValues<ModTypes>().ToDictionary(e => (int)e, e => e.ToString());
	private List<string> _binaryFileSizeErrors = new();
	private List<string> _screenshotFileSizeErrors = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		try
		{
			List<GetPlayerName> getPlayerNames = await Http.GetPlayerNames();
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			_addComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_addComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_addComponent.ErrorMessage = "An error occurred while sending the request.";

			_addComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task LoadBinaries(InputFileChangeEventArgs e)
		=> _addMod.Binaries = await GetFiles(e, ModConstants.BinaryMaxFiles, ModConstants.BinaryMaxFileSize, _binaryFileSizeErrors);

	private async Task LoadScreenshots(InputFileChangeEventArgs e)
		=> _addMod.Screenshots = await GetFiles(e, ModConstants.ScreenshotMaxFiles, ModConstants.ScreenshotMaxFileSize, _screenshotFileSizeErrors);

	private static async Task<Dictionary<string, byte[]>> GetFiles(InputFileChangeEventArgs e, int maximumFileCount, long maxAllowedSize, List<string> errorList)
	{
		errorList.Clear();
		IReadOnlyList<IBrowserFile> browserFiles = e.GetMultipleFiles(maximumFileCount);

		Dictionary<string, byte[]> files = new();
		foreach (IBrowserFile browserFile in browserFiles)
		{
			using MemoryStream ms = new();

			try
			{
				await browserFile.OpenReadStream(maxAllowedSize).CopyToAsync(ms);
				files.Add(browserFile.Name, ms.ToArray());
			}
			catch (IOException)
			{
				errorList.Add($"File {browserFile.Name} cannot be larger than {FileSizeUtils.Format(maxAllowedSize)}.");
			}
		}

		return files;
	}
}
