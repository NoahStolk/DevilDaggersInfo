@page "/admin/players/edit/{Id:int}"
@inherits BaseAdminPage
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Admin
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Mods
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Players
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<AdminEdit Name="Player" OverviewUrl="/admin/players" ApiCall="Http.EditPlayerById" Model="_editPlayer" Id="Id" @ref="_editComponent">
	<AdminInput Label="Common name"><InputText class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editPlayer.CommonName" /></AdminInput>
	<AdminInput Label="Discord user ID"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayer.DiscordUserId" /></AdminInput>
	<AdminInput Label="Country (flag)"><SearchDropdown TKey=string Values="@(UserUtils.CountryNames)" Converter="s => s" @bind-Value="@_editPlayer.CountryCode" /></AdminInput>
	<AdminInput Label="DPI"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayer.Dpi" /></AdminInput>
	<AdminInput Label="In-game sens"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editPlayer.InGameSens" /></AdminInput>
	<AdminInput Label="FOV"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayer.Fov" /></AdminInput>
	<AdminInput Label="Gamma"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayer.Gamma" /></AdminInput>
	<AdminInput Label="Hand"><InputNullableBoolean False="Left" True="Right" @bind-Value="@_editPlayer.IsRightHanded" /></AdminInput>
	<AdminInput Label="Flash hand"><InputNullableBoolean False="Off" True="On" @bind-Value="@_editPlayer.HasFlashHandEnabled" /></AdminInput>
	<AdminInput Label="Legacy audio"><InputNullableBoolean False="Off" True="On" @bind-Value="@_editPlayer.UsesLegacyAudio" /></AdminInput>
	<AdminInput Label="HRTF"><InputNullableBoolean False="Off" True="On" @bind-Value="@_editPlayer.UsesHrtf" /></AdminInput>
	<AdminInput Label="Invert Y"><InputNullableBoolean False="Off" True="On" @bind-Value="@_editPlayer.UsesInvertY" /></AdminInput>
	<AdminInput Label="V-sync"><SearchDropdown TKey=VerticalSync Values="@(Enum.GetValues<VerticalSync>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<VerticalSync>(s)" ShowDisplayValue=false @bind-Value="@_editPlayer.VerticalSync" /></AdminInput>
	<AdminInput Label="Hide donations"><InputCheckbox @bind-Value="@_editPlayer.HideDonations" /></AdminInput>
	<AdminInput Label="Hide past usernames"><InputCheckbox @bind-Value="@_editPlayer.HidePastUsernames" /></AdminInput>
	<AdminInput Label="Hide settings"><InputCheckbox @bind-Value="@_editPlayer.HideSettings" /></AdminInput>
	<AdminInput Label="Mods"><MultiSearchDropdown Values="@_modNames" @bind-Value="@_editPlayer.ModIds" /></AdminInput>
	<AdminInput Label="Ban type"><SearchDropdown TKey=BanType Values="@(Enum.GetValues<BanType>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<BanType>(s)" ShowDisplayValue=false @bind-Value="@_editPlayer.BanType" /></AdminInput>
	<AdminInput Label="Ban description"><InputText class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editPlayer.BanDescription" /></AdminInput>
	<AdminInput Label="Ban responsible ID (alt owner)"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editPlayer.BanResponsibleId" /></AdminInput>
	<AdminInput Label="Banned from DDCL"><InputCheckbox @bind-Value="@_editPlayer.IsBannedFromDdcl" /></AdminInput>
</AdminEdit>

@code
{
	private Dictionary<int, string>? _modNames;
	private EditPlayer _editPlayer = new();
	private AdminEdit<EditPlayer> _editComponent = null!;

	[Parameter, EditorRequired] public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			List<GetModName> getModNames = await Http.GetModNames();
			_modNames = getModNames.ToDictionary(m => m.Id, m => m.Name);

			GetPlayer getPlayer = await Http.GetPlayerById(Id);
			_editPlayer = new()
			{
				CommonName = getPlayer.CommonName,
				DiscordUserId = (long?)getPlayer.DiscordUserId,
				CountryCode = getPlayer.CountryCode,
				Dpi = getPlayer.Dpi,
				Fov = getPlayer.Fov,
				Gamma = getPlayer.Gamma,
				HasFlashHandEnabled = getPlayer.HasFlashHandEnabled,
				HideDonations = getPlayer.HideDonations,
				HidePastUsernames = getPlayer.HidePastUsernames,
				HideSettings = getPlayer.HideSettings,
				InGameSens = getPlayer.InGameSens,
				IsRightHanded = getPlayer.IsRightHanded,
				UsesLegacyAudio = getPlayer.UsesLegacyAudio,
				UsesHrtf = getPlayer.UsesHrtf,
				UsesInvertY = getPlayer.UsesInvertY,
				VerticalSync = getPlayer.VerticalSync,
				BanDescription = getPlayer.BanDescription,
				BanResponsibleId = getPlayer.BanResponsibleId,
				BanType = getPlayer.BanType,
				IsBannedFromDdcl = getPlayer.IsBannedFromDdcl,
				ModIds = getPlayer.ModIds,
			};
			_editComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_editComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_editComponent.ErrorMessage = "An error occurred while sending the request.";

			_editComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
