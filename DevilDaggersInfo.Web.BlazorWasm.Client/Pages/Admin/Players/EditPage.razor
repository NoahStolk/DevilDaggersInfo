@page "/admin/players/edit/{Id:int}"
@inherits BaseAdminPage
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Admin
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Mods
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Players
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<AdminEdit TModel="EditPlayer" Name="Player" OverviewUrl="/admin/players" ApiCall="Http.EditPlayerById" Model="_editPlayer" Id="Id" @ref="_editComponent">
	<AdminInput Label="@nameof(EditPlayer.CountryCode)"><SearchDropdown TKey=string Values="@(UserUtils.CountryNames)" Converter="s => s" @bind-Value="@_editPlayer.CountryCode" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.Dpi)"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayer.Dpi" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.Fov)"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayer.Fov" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.Gamma)"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayer.Gamma" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.HasFlashHandEnabled)"><InputNullableBoolean @bind-Value="@_editPlayer.HasFlashHandEnabled" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.InGameSens)"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editPlayer.InGameSens" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.IsRightHanded)"><InputNullableBoolean @bind-Value="@_editPlayer.IsRightHanded" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.UsesLegacyAudio)"><InputNullableBoolean @bind-Value="@_editPlayer.UsesLegacyAudio" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.HideDonations)"><InputCheckbox @bind-Value="@_editPlayer.HideDonations" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.HidePastUsernames)"><InputCheckbox @bind-Value="@_editPlayer.HidePastUsernames" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.HideSettings)"><InputCheckbox @bind-Value="@_editPlayer.HideSettings" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.ModIds)"><MultiSearchDropdown Values="@_modNames" @bind-Value="@_editPlayer.ModIds" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.BanType)"><SearchDropdown TKey=BanType Values="@(Enum.GetValues<BanType>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<BanType>(s)" ShowDisplayValue=false @bind-Value="@_editPlayer.BanType" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.BanDescription)"><InputText class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editPlayer.BanDescription" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.BanResponsibleId)"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editPlayer.BanResponsibleId" /></AdminInput>
	<AdminInput Label="@nameof(EditPlayer.IsBannedFromDdcl)"><InputCheckbox @bind-Value="@_editPlayer.IsBannedFromDdcl" /></AdminInput>
</AdminEdit>

@code
{
	private Dictionary<int, string>? _modNames;
	private EditPlayer _editPlayer = new();
	private AdminEdit<EditPlayer> _editComponent = null!;

	[Parameter, EditorRequired] public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		try
		{
			List<GetModName> getModNames = await Http.GetModNames();
			_modNames = getModNames.ToDictionary(m => m.Id, m => m.Name);

			GetPlayer getPlayer = await Http.GetPlayerById(Id);
			_editPlayer = new()
			{
				ModIds = getPlayer.ModIds,
				CountryCode = getPlayer.CountryCode,
				Dpi = getPlayer.Dpi,
				Fov = getPlayer.Fov,
				Gamma = getPlayer.Gamma,
				HasFlashHandEnabled = getPlayer.HasFlashHandEnabled,
				HideDonations = getPlayer.HideDonations,
				HidePastUsernames = getPlayer.HidePastUsernames,
				HideSettings = getPlayer.HideSettings,
				InGameSens = getPlayer.InGameSens,
				IsRightHanded = getPlayer.IsRightHanded,
				UsesLegacyAudio = getPlayer.UsesLegacyAudio,
				BanDescription = getPlayer.BanDescription,
				BanResponsibleId = getPlayer.BanResponsibleId,
				BanType = getPlayer.BanType,
				IsBannedFromDdcl = getPlayer.IsBannedFromDdcl,
			};
			_editComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_editComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_editComponent.ErrorMessage = "An error occurred while sending the request.";

			_editComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
