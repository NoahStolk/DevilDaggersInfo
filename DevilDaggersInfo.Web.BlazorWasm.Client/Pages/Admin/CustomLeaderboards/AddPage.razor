@page "/admin/custom-leaderboards/add"
@inject AdminApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.CustomLeaderboards
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Spawnsets
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<AdminAdd OverviewUrl="/admin/custom-leaderboards" PostApiUrl="api/admin/custom-leaderboards" Model="_addCustomLeaderboard" @ref="_addComponent">
	<AdminInput Label="@nameof(AddCustomLeaderboard.SpawnsetId)"><SearchDropdown Values="@_spawnsetNames" Converter="s => int.Parse(s)" @bind-Value="@_addCustomLeaderboard.SpawnsetId" /></AdminInput>
	<AdminInput Label="@nameof(AddCustomLeaderboard.Category)"><SearchDropdown Values="@(Enum.GetValues<CustomLeaderboardCategory>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<CustomLeaderboardCategory>(s)" @bind-Value="@_addCustomLeaderboard.Category" /></AdminInput>
	<AdminInput Label="@nameof(AddCustomLeaderboard.TimeBronze)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addCustomLeaderboard.TimeBronze" /></AdminInput>
	<AdminInput Label="@nameof(AddCustomLeaderboard.TimeSilver)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addCustomLeaderboard.TimeSilver" /></AdminInput>
	<AdminInput Label="@nameof(AddCustomLeaderboard.TimeGolden)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addCustomLeaderboard.TimeGolden" /></AdminInput>
	<AdminInput Label="@nameof(AddCustomLeaderboard.TimeDevil)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addCustomLeaderboard.TimeDevil" /></AdminInput>
	<AdminInput Label="@nameof(AddCustomLeaderboard.TimeLeviathan)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addCustomLeaderboard.TimeLeviathan" /></AdminInput>
</AdminAdd>

@code
{
	private Dictionary<int, string>? _spawnsetNames;
	private AddCustomLeaderboard _addCustomLeaderboard = new();
	private AdminAdd<AddCustomLeaderboard> _addComponent = null!;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			List<GetSpawnsetName> getSpawnsetNames = await Http.Client.GetFromJsonAsync<List<GetSpawnsetName>>("api/admin/spawnsets/names") ?? throw new($"Response could not be deserialized to {nameof(List<GetSpawnsetName>)}.");
			_spawnsetNames = getSpawnsetNames.ToDictionary(m => m.Id, m => m.Name);

			_addComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_addComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_addComponent.ErrorMessage = "An error occurred while sending the request.";

			_addComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
