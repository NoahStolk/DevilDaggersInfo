@page "/admin/donations/edit/{Id:int}"
@inherits BaseAdminPage
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Admin
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Input
@using DevilDaggersInfo.Web.BlazorWasm.Client.Enums
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Donations
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Admin.Players
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Enums

<AdminEdit Name="Donation" OverviewUrl="/admin/donations" ApiCall="Http.EditDonationById" Model="_editDonation" Id="Id" @ref="_editComponent">
	<InputWrapper Label="Player"><SearchDropdown TKey=int Values="@_playerNames" Converter="s => int.Parse(s)" @bind-Value="@_editDonation.PlayerId" /></InputWrapper>
	<InputWrapper Label="Amount"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editDonation.Amount" /></InputWrapper>
	<InputWrapper Label="Currency"><SearchDropdown TKey=Currency Values="@(Enum.GetValues<Currency>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<Currency>(s)" @bind-Value="@_editDonation.Currency" /></InputWrapper>
	<InputWrapper Label="ConvertedEuroCentsReceived"><InputNumber class="w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editDonation.ConvertedEuroCentsReceived" /></InputWrapper>
	<InputWrapper Label="Note"><InputTextArea class="w-64 h-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editDonation.Note" /></InputWrapper>
	<InputWrapper Label="Refunded"><InputCheckbox @bind-Value="@_editDonation.IsRefunded" /></InputWrapper>
</AdminEdit>

@code
{
	private Dictionary<int, string>? _playerNames;
	private EditDonation _editDonation = new();
	private AdminEdit<EditDonation> _editComponent = null!;

	[Parameter, EditorRequired] public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			List<GetPlayerName> getPlayerNames = await Http.GetPlayerNames();
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			GetDonation getDonation = await Http.GetDonationById(Id);
			_editDonation = new()
			{
				Amount = getDonation.Amount,
				ConvertedEuroCentsReceived = getDonation.ConvertedEuroCentsReceived,
				Currency = getDonation.Currency,
				IsRefunded = getDonation.IsRefunded,
				Note = getDonation.Note,
				PlayerId = getDonation.PlayerId,
			};
			_editComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_editComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_editComponent.ErrorMessage = "An error occurred while sending the request.";

			_editComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
