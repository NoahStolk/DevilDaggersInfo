@page "/leaderboard"
@inherits FluxorComponent
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
@inject IState<RankState> RankState
@using DevilDaggersInfo.Core.Wiki.Enums
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Leaderboards
@using DevilDaggersInfo.Web.BlazorWasm.Client.Store.Leaderboard.Index
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Leaderboards
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Players

<Heading Title="Leaderboard" />

@if (GetLeaderboard == null)
{
	@if (_apiError == null)
	{
		<Loading />
	}
	else
	{
		// TODO: Only display this error message if we're sure the issue is from the official Devil Daggers leaderboard servers.
		<p class="py-1">Failed to retrieve scores from the official Devil Daggers leaderboard servers. Please try again later.</p>
		<p class="py-1">@_apiError</p>
	}
}
else
{
	<div>
		<span>Rank</span>
		<input class="bg-black border-gray-22 border-2" @onchange="ChangeInputRank" />
	</div>

	<div>
		<div>
			@if (_reloading)
			{
				<Loading />
			}
			else
			{
				<span>Showing rank @RankState.Value.Rank - @(RankState.Value.Rank + 99)</span>
			}
		</div>
		<div>
			@{
				bool first = RankState.Value.Rank <= 1;
				bool last = RankState.Value.Rank >= _maxRank;
			}
			<button disabled="@first" class="@(first ? "disabled:opacity-50 cursor-default" : "hover:bg-gray-22") bg-gray-0b transition-colors duration-100 w-10 h-10 mx-1 rounded text-color-text" @onclick="() => SetRank(1)">@MarkupUtils.NavStart</button>
			<button disabled="@first" class="@(first ? "disabled:opacity-50 cursor-default" : "hover:bg-gray-22") bg-gray-0b transition-colors duration-100 w-10 h-10 mx-1 rounded text-color-text" @onclick="() => SetRank(RankState.Value.Rank - 1000)">@MarkupUtils.NavPrevDouble</button>
			<button disabled="@first" class="@(first ? "disabled:opacity-50 cursor-default" : "hover:bg-gray-22") bg-gray-0b transition-colors duration-100 w-10 h-10 mx-1 rounded text-color-text" @onclick="() => SetRank(RankState.Value.Rank - 100)">@MarkupUtils.NavPrev</button>
			<button disabled="@last" class="@(last ? "disabled:opacity-50 cursor-default" : "hover:bg-gray-22") bg-gray-0b transition-colors duration-100 w-10 h-10 mx-1 rounded text-color-text" @onclick="() => SetRank(RankState.Value.Rank + 100)">@MarkupUtils.NavNext</button>
			<button disabled="@last" class="@(last ? "disabled:opacity-50 cursor-default" : "hover:bg-gray-22") bg-gray-0b transition-colors duration-100 w-10 h-10 mx-1 rounded text-color-text" @onclick="() => SetRank(RankState.Value.Rank + 1000)">@MarkupUtils.NavNextDouble</button>
			<button disabled="@last" class="@(last ? "disabled:opacity-50 cursor-default" : "hover:bg-gray-22") bg-gray-0b transition-colors duration-100 w-10 h-10 mx-1 rounded text-color-text" @onclick="() => SetRank(GetLeaderboard.TotalPlayers - 99)">@MarkupUtils.NavEnd</button>
		</div>
	</div>

	<LeaderboardGlobal Leaderboard="GetLeaderboard" IsHistory="false" />
	<LeaderboardTableInfo />
	<LeaderboardTable TGetLeaderboardDto="GetLeaderboard" TGetEntryDto="GetEntry" Leaderboard="GetLeaderboard" Players="Players" IsHistory="false" GameVersion="GameConstants.CurrentVersion" />
}

@code
{
	private string? _apiError;
	private bool _reloading;

	private int _maxRank => (GetLeaderboard?.TotalPlayers ?? int.MaxValue) - 99;

	[Parameter, SupplyParameterFromQuery] public int Rank { get; set; }

	public GetLeaderboard? GetLeaderboard { get; set; }

	public List<GetPlayerForLeaderboard>? Players { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Dispatcher.Dispatch(new ChangeRankAction(Rank, _maxRank));

		Players = await Http.GetPlayersForLeaderboard();
		await FetchLeaderboard();
	}

	private async Task SetRank(int value)
	{
		Dispatcher.Dispatch(new ChangeRankAction(value, _maxRank));
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.Rank, RankState.Value.Rank);

		await FetchLeaderboard();
	}

	private async Task FetchLeaderboard()
	{
		try
		{
			if (GetLeaderboard != null)
				_reloading = true;

			GetLeaderboard = await Http.GetLeaderboard(RankState.Value.Rank);
			_reloading = false;
		}
		catch (Exception ex)
		{
			_apiError = ex.Message;
		}
	}

	private async Task ChangeInputRank(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int result))
			await SetRank(result);
	}

	private static class QueryParameters
	{
		public static string Rank { get; } = nameof(Rank);
	}
}
