@page "/leaderboard/player/{Id:int}"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Leaderboards
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.LeaderboardHistory
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Players
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Leaderboards
@using DevilDaggersInfo.Core.Wiki
@using DevilDaggersInfo.Core.Wiki.Enums

@if (GetEntry == null)
{
	<Loading />
}
else
{
	<Heading>@GetEntry.Username</Heading>

	<div class="grid gap-2 grid-cols-1 md:grid-cols-2 xl:grid-cols-4">
		<PlayerCard Title="Personal Best">
			<div>Time</div>
			<div>@GetEntry.Time.ToString(FormatUtils.TimeFormat)</div>
			<div>Kills</div>
			<div>@GetEntry.Kills.ToString(FormatUtils.LeaderboardIntFormat)</div>
			<div>Gems</div>
			<div>@GetEntry.Gems.ToString(FormatUtils.LeaderboardIntFormat)</div>
			<div>Accuracy</div>
			<div>@((GetEntry.DaggersHit / (float)GetEntry.DaggersFired).ToString(FormatUtils.AccuracyFormat))</div>
			<div>Daggers hit</div>
			<div>@GetEntry.DaggersHit.ToString(FormatUtils.LeaderboardIntFormat)</div>
			<div>Daggers fired</div>
			<div>@GetEntry.DaggersFired.ToString(FormatUtils.LeaderboardIntFormat)</div>
			<div>Death type</div>
			<div>@(Deaths.GetDeathByLeaderboardType(GameVersion.V3_1, GetEntry.DeathType)?.Name ?? "?")</div>
		</PlayerCard>

		<PlayerCard Title="Total Statistics">
			<div>Total time</div>
			<div>@GetEntry.TimeTotal.ToString(FormatUtils.TimeFormat)</div>
			<div>Total kills</div>
			<div>@GetEntry.KillsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
			<div>Total gems</div>
			<div>@GetEntry.GemsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
			<div>Total accuracy</div>
			<div>@((GetEntry.DaggersHitTotal / (float)GetEntry.DaggersFiredTotal).ToString(FormatUtils.AccuracyFormat))</div>
			<div>Total daggers hit</div>
			<div>@GetEntry.DaggersHitTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
			<div>Total daggers fired</div>
			<div>@GetEntry.DaggersFiredTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
			<div>Total deaths</div>
			<div>@GetEntry.DeathsTotal</div>
		</PlayerCard>

		@if (GetEntry.DeathsTotal > 0)
		{
			float deathsAsFloat = (float)GetEntry.DeathsTotal;

			<PlayerCard Title="Average Statistics">
				<div>Average time</div>
				<div>@((GetEntry.TimeTotal / deathsAsFloat).ToString(FormatUtils.TimeFormat))</div>
				<div>Average kills</div>
				<div>@((GetEntry.KillsTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</div>
				<div>Average gems</div>
				<div>@((GetEntry.GemsTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</div>
				<div>Average daggers hit</div>
				<div>@((GetEntry.DaggersHitTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</div>
				<div>Average daggers fired</div>
				<div>@((GetEntry.DaggersFiredTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</div>
			</PlayerCard>
		}

		@if (GetPlayer == null)
		{
			@if (!PlayerNotFound)
			{
				<Loading />
			}
		}
		else
		{
			@*TODO: Spawnsets, mods, custom entries*@

			@if (GetPlayer.Settings != null)
			{
				bool? rightHand = GetPlayer.Settings.IsRightHanded;
				bool? flashHand = GetPlayer.Settings.UsesFlashHand;
				bool? legacyAudio = GetPlayer.Settings.UsesLegacyAudio;

				<PlayerCard Title="Settings">
					<div>eDPI</div>
					<div>@(GetPlayer.Settings.Edpi?.ToString(FormatUtils.InGameSensFormat) ?? "N/A")</div>
					<div>DPI</div>
					<div>@(GetPlayer.Settings.Dpi?.ToString() ?? "N/A")</div>
					<div>In-game sens</div>
					<div>@(GetPlayer.Settings.InGameSens?.ToString(FormatUtils.InGameSensFormat) ?? "N/A")</div>
					<div>FOV</div>
					<div>@(GetPlayer.Settings.Fov?.ToString() ?? "N/A")</div>
					<div>Gamma</div>
					<div>@(GetPlayer.Settings.Gamma?.ToString(FormatUtils.GammaFormat) ?? "N/A")</div>
					<div>Hand orientation</div>
					<div>@(rightHand.HasValue ? rightHand.Value ? "Right" : "Left" : "N/A")</div>
					<div>Hand flash</div>
					<div>@(flashHand.HasValue ? flashHand.Value ? "On" : "Off" : "N/A")</div>
					<div>Legacy audio</div>
					<div>@(legacyAudio.HasValue ? legacyAudio.Value ? "On" : "Off" : "N/A")</div>
				</PlayerCard>
			}
		}
	</div>
}

@code
{
	[Parameter, EditorRequired] public int Id { get; set; }

	public GetEntry? GetEntry { get; set; }
	public GetPlayer? GetPlayer { get; set; }

	public bool PlayerNotFound { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetEntry = await Http.GetEntryById(Id);

		try
		{
			GetPlayer = await Http.GetPlayerById(Id);
		}
		catch // TODO: Only HTTP 404.
		{
			PlayerNotFound = true;
		}
	}
}
