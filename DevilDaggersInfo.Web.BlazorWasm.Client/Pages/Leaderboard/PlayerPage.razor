@page "/leaderboard/player/{Id:int}"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Leaderboards
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.LeaderboardHistory
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Players
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Leaderboards
@using DevilDaggersInfo.Core.Wiki
@using DevilDaggersInfo.Core.Wiki.Enums

@if (GetEntry == null)
{
	<Loading />
}
else
{
	<Heading>@GetEntry.Username</Heading>

	<Heading Level=2>Personal Best</Heading>
	<div class="grid gap-2 grid-cols-2">
		<div>Time</div>
		<div>@GetEntry.Time</div>
		<div>Kills</div>
		<div>@GetEntry.Kills.ToString(FormatUtils.LeaderboardIntFormat)</div>
		<div>Gems</div>
		<div>@GetEntry.Gems.ToString(FormatUtils.LeaderboardIntFormat)</div>
		<div>Accuracy</div>
		<div>@((GetEntry.DaggersHit / (float)GetEntry.DaggersFired).ToString(FormatUtils.AccuracyFormat))</div>
		<div>Daggers hit</div>
		<div>@GetEntry.DaggersHit.ToString(FormatUtils.LeaderboardIntFormat)</div>
		<div>Daggers fired</div>
		<div>@GetEntry.DaggersFired.ToString(FormatUtils.LeaderboardIntFormat)</div>
		<div>Death type</div>
		<div>@(Deaths.GetDeathByLeaderboardType(GameVersion.V3_1, GetEntry.DeathType)?.Name ?? "?")</div>
	</div>

	<Heading Level=2>Total Statistics</Heading>
	<div class="grid gap-2 grid-cols-2">
		<div>Total time</div>
		<div>@GetEntry.TimeTotal</div>
		<div>Total kills</div>
		<div>@GetEntry.KillsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
		<div>Total gems</div>
		<div>@GetEntry.GemsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
		<div>Total accuracy</div>
		<div>@((GetEntry.DaggersHitTotal / (float)GetEntry.DaggersFiredTotal).ToString(FormatUtils.AccuracyFormat))</div>
		<div>Total daggers hit</div>
		<div>@GetEntry.DaggersHitTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
		<div>Total daggers fired</div>
		<div>@GetEntry.DaggersFiredTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
		<div>Total deaths</div>
		<div>@GetEntry.DeathsTotal</div>
	</div>

	@if (GetEntry.DeathsTotal > 0)
	{
		float deathsAsFloat = (float)GetEntry.DeathsTotal;

		<Heading Level=2>Average Statistics</Heading>
		<div class="grid gap-2 grid-cols-2">
			<div>Average time</div>
			<div>@(GetEntry.TimeTotal / deathsAsFloat)</div>
			<div>Average kills</div>
			<div>@((GetEntry.KillsTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</div>
			<div>Average gems</div>
			<div>@((GetEntry.GemsTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</div>
			<div>Average daggers hit</div>
			<div>@((GetEntry.DaggersHitTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</div>
			<div>Average daggers fired</div>
			<div>@((GetEntry.DaggersFiredTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</div>
		</div>
	}

	@if (GetPlayer == null)
	{
		@if (!PlayerNotFound)
		{
			<Loading />
		}
	}
	else
	{
		@if (GetPlayer.Settings != null)
		{
			<Heading Level=2>Settings</Heading>
			<div class="grid gap-2 grid-cols-2">
				<div>eDPI</div>
				<div>@GetPlayer.Settings.Edpi</div>
				<div>DPI</div>
				<div>@GetPlayer.Settings.Dpi</div>
				<div>In-game sens</div>
				<div>@GetPlayer.Settings.InGameSens</div>
				<div>FOV</div>
				<div>@GetPlayer.Settings.Fov</div>
				<div>Gamma</div>
				<div>@GetPlayer.Settings.Gamma</div>
				<div>Hand orientation</div>
				<div>@GetPlayer.Settings.IsRightHanded</div>
				<div>Hand flash</div>
				<div>@GetPlayer.Settings.UsesFlashHand</div>
				<div>Legacy audio</div>
				<div>@GetPlayer.Settings.UsesLegacyAudio</div>
			</div>
		}
	}
}

@code
{
	[Parameter, EditorRequired] public int Id { get; set; }

	public GetEntry? GetEntry { get; set; }
	public GetPlayer? GetPlayer { get; set; }

	public bool PlayerNotFound { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetEntry = await Http.GetEntryById(Id);
		
		try
		{
			GetPlayer = await Http.GetPlayerById(Id);
		}
		catch // TODO: Only HTTP 404.
		{
			PlayerNotFound = true;
		}
	}
}
