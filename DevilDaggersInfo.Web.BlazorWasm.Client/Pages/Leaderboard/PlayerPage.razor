@page "/leaderboard/player/{Id:int}"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Leaderboards
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.LeaderboardHistory
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Mods
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Players
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Spawnsets
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Leaderboards
@using DevilDaggersInfo.Core.Wiki
@using DevilDaggersInfo.Core.Wiki.Enums

@if (GetEntry == null)
{
	<Loading />
}
else
{
	<Heading>@GetEntry.Username</Heading>

	<div class="grid gap-2 grid-cols-1 md:grid-cols-2 xl:grid-cols-4">
		<PlayerCard Title="Personal Best">
			<PlayerCardEntry Name="Time">@GetEntry.Time.ToString(FormatUtils.TimeFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Kills">@GetEntry.Kills.ToString(FormatUtils.LeaderboardIntFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Gems">@GetEntry.Gems.ToString(FormatUtils.LeaderboardIntFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Accuracy">@((GetEntry.DaggersHit / (float)GetEntry.DaggersFired).ToString(FormatUtils.AccuracyFormat))</PlayerCardEntry>
			<PlayerCardEntry Name="Daggers hit">@GetEntry.DaggersHit.ToString(FormatUtils.LeaderboardIntFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Daggers fired">@GetEntry.DaggersFired.ToString(FormatUtils.LeaderboardIntFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Death type">@(Deaths.GetDeathByLeaderboardType(GameVersion.V3_1, GetEntry.DeathType)?.Name ?? "?")</PlayerCardEntry>
		</PlayerCard>

		<PlayerCard Title="Total Statistics">
			<PlayerCardEntry Name="Total time">@GetEntry.TimeTotal.ToString(FormatUtils.LeaderboardGlobalTimeFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Total kills">@GetEntry.KillsTotal.ToString(FormatUtils.LeaderboardIntFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Total gems">@GetEntry.GemsTotal.ToString(FormatUtils.LeaderboardIntFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Total accuracy">@((GetEntry.DaggersHitTotal / (float)GetEntry.DaggersFiredTotal).ToString(FormatUtils.AccuracyFormat))</PlayerCardEntry>
			<PlayerCardEntry Name="Total daggers hit">@GetEntry.DaggersHitTotal.ToString(FormatUtils.LeaderboardIntFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Total daggers fired">@GetEntry.DaggersFiredTotal.ToString(FormatUtils.LeaderboardIntFormat)</PlayerCardEntry>
			<PlayerCardEntry Name="Total deaths">@GetEntry.DeathsTotal</PlayerCardEntry>
		</PlayerCard>

		@if (GetEntry.DeathsTotal > 0)
		{
			float deathsAsFloat = (float)GetEntry.DeathsTotal;

			<PlayerCard Title="Average Statistics">
				<PlayerCardEntry Name="Average time">@((GetEntry.TimeTotal / deathsAsFloat).ToString(FormatUtils.TimeFormat))</PlayerCardEntry>
				<PlayerCardEntry Name="Average kills">@((GetEntry.KillsTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</PlayerCardEntry>
				<PlayerCardEntry Name="Average gems">@((GetEntry.GemsTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</PlayerCardEntry>
				<PlayerCardEntry Name="Average daggers hit">@((GetEntry.DaggersHitTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</PlayerCardEntry>
				<PlayerCardEntry Name="Average daggers fired">@((GetEntry.DaggersFiredTotal / deathsAsFloat).ToString(FormatUtils.LeaderboardIntAverageFormat))</PlayerCardEntry>
			</PlayerCard>
		}

		@if (GetPlayer == null)
		{
			@if (!PlayerNotFound)
			{
				<Loading />
			}
		}
		else
		{
			@*TODO: Spawnsets, mods, custom entries*@

			if (GetPlayer.Settings != null)
			{
				bool? rightHand = GetPlayer.Settings.IsRightHanded;
				bool? flashHand = GetPlayer.Settings.UsesFlashHand;
				bool? legacyAudio = GetPlayer.Settings.UsesLegacyAudio;

				<PlayerCard Title="Settings">
					<PlayerCardEntry Name="eDPI">@(GetPlayer.Settings.Edpi?.ToString(FormatUtils.InGameSensFormat) ?? "N/A")</PlayerCardEntry>
					<PlayerCardEntry Name="DPI">@(GetPlayer.Settings.Dpi?.ToString() ?? "N/A")</PlayerCardEntry>
					<PlayerCardEntry Name="In-game sens">@(GetPlayer.Settings.InGameSens?.ToString(FormatUtils.InGameSensFormat) ?? "N/A")</PlayerCardEntry>
					<PlayerCardEntry Name="FOV">@(GetPlayer.Settings.Fov?.ToString() ?? "N/A")</PlayerCardEntry>
					<PlayerCardEntry Name="Gamma">@(GetPlayer.Settings.Gamma?.ToString(FormatUtils.GammaFormat) ?? "N/A")</PlayerCardEntry>
					<PlayerCardEntry Name="Hand orientation">@(rightHand.HasValue ? rightHand.Value ? "Right" : "Left" : "N/A")</PlayerCardEntry>
					<PlayerCardEntry Name="Hand flash">@(flashHand.HasValue ? flashHand.Value ? "On" : "Off" : "N/A")</PlayerCardEntry>
					<PlayerCardEntry Name="Legacy audio">@(legacyAudio.HasValue ? legacyAudio.Value ? "On" : "Off" : "N/A")</PlayerCardEntry>
				</PlayerCard>
			}

			@*TODO: Country name instead of code / Best rank recorded / Past usernames*@
			if (GetPlayer.CountryCode != null)
			{
				<PlayerCard Title="Miscellaneous">
					<PlayerCardEntry Name="Country">@GetPlayer.CountryCode</PlayerCardEntry>
				</PlayerCard>
			}
		}

		@if (GetSpawnsetNames == null)
		{
			<Loading />
		}
		else
		{
			<PlayerCard Title="Spawnsets">
				@foreach (GetSpawnsetName getSpawnsetName in GetSpawnsetNames)
				{
					<div class="grid gap-2 grid-cols-2 even:bg-gray-22 px-1">
						<a href="/custom/spawnsets/@getSpawnsetName.Id">@getSpawnsetName.Name</a>
					</div>
				}
			</PlayerCard>
		}

		@if (GetModNames == null)
		{
			<Loading />
		}
		else
		{
			<PlayerCard Title="Mods">
				@foreach (GetModName getModName in GetModNames)
				{
					<div class="grid gap-2 grid-cols-2 even:bg-gray-22 px-1">
						<a href="/custom/mods/@getModName.Id">@getModName.Name</a>
					</div>
				}
			</PlayerCard>
		}
	</div>
}

@code
{
	[Parameter, EditorRequired] public int Id { get; set; }

	public GetEntry? GetEntry { get; set; }
	public GetPlayer? GetPlayer { get; set; }
	public List<GetSpawnsetName>? GetSpawnsetNames { get; set; }
	public List<GetModName>? GetModNames { get; set; }

	public bool PlayerNotFound { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetEntry = await Http.GetEntryById(Id);

		try
		{
			GetPlayer = await Http.GetPlayerById(Id);
		}
		catch // TODO: Only HTTP 404.
		{
			PlayerNotFound = true;
		}

		GetSpawnsetNames = await Http.GetSpawnsetsByAuthorId(Id);
		GetModNames = await Http.GetModsByAuthorId(Id);
	}
}
