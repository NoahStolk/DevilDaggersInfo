@page "/leaderboard"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Leaderboards
@using DevilDaggersInfo.Web.BlazorWasm.Shared.Dto.Public.Players
@using DevilDaggersInfo.Web.BlazorWasm.Client.Components.Leaderboards

<Heading>Leaderboard</Heading>

@if (GetLeaderboard == null)
{
	@if (_apiError == null)
	{
		<Loading />
	}
	else
	{
		<p class="py-1">Failed to retrieve scores from the official Devil Daggers leaderboard servers. Please try again later.</p>
		<p class="py-1">@_apiError</p>
	}
}
else
{
	<div>
		<div>Rank:</div>
		<input class="bg-black border-gray-700 border-2" @onkeypress="KeyPressInputRank" @onchange="ChangeInputRank" />
		<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-16 h-8 py-1 rounded text-color-text" @onclick="FetchLeaderboard">Show</button>

		<div>
			@if (_reloading)
			{
				<Loading />
			}
			else
			{
				<span>Showing rank @Rank - @(Rank + 99)</span>
			}
		</div>
		<div>
			<button class="@(Rank <= 1 ? "disabled" : string.Empty) bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => SetRank(1)">|&lt;</button>
			<button class="@(Rank <= 1 ? "disabled" : string.Empty) bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => SetRank(Rank - 1000)">&lt;&lt;</button>
			<button class="@(Rank <= 1 ? "disabled" : string.Empty) bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => SetRank(Rank - 100)">&lt;</button>
			<button class="@(Rank >= _maxRank ? "disabled" : string.Empty) bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => SetRank(Rank + 100)">&gt;</button>
			<button class="@(Rank >= _maxRank ? "disabled" : string.Empty) bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => SetRank(Rank + 1000)">&gt;&gt;</button>
			<button class="@(Rank >= _maxRank ? "disabled" : string.Empty) bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => SetRank(GetLeaderboard.TotalPlayers - 99)">&gt;|</button>
		</div>
	</div>

	<LeaderboardGlobal Leaderboard="GetLeaderboard" IsHistory="false" />
	<LeaderboardTableInfo />
	<LeaderboardTable Leaderboard="GetLeaderboard" Players="Players" IsHistory="false" />
}

@code
{
	private int _rank = 1;
	private string? _apiError;
	private bool _reloading;

	private int _maxRank => (GetLeaderboard?.TotalPlayers ?? int.MaxValue) - 99;

	[Parameter, SupplyParameterFromQuery] public int Rank { get => _rank; set => _rank = Math.Max(1, value); }

	public GetLeaderboard? GetLeaderboard { get; set; }

	public List<GetPlayerForLeaderboard>? Players { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Players = await Http.GetPlayersForLeaderboard();
		await FetchLeaderboard();
	}

	private async Task SetRank(int value)
	{
		Rank = Math.Clamp(value, 1, _maxRank);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.Rank, Rank);

		await FetchLeaderboard();
	}

	private async Task FetchLeaderboard()
	{
		try
		{
			if (GetLeaderboard != null)
				_reloading = true;

			GetLeaderboard = await Http.GetLeaderboard(Rank);
			_reloading = false;
		}
		catch (Exception ex)
		{
			_apiError = ex.Message;
		}
	}

	private async Task KeyPressInputRank(KeyboardEventArgs e)
	{
		// TODO: Rank is not updated here yet...
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			await FetchLeaderboard();
		}
	}

	private async Task ChangeInputRank(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int result))
			await SetRank(result);
	}

	private static class QueryParameters
	{
		public static string Rank { get; } = nameof(Rank);
	}
}
