@inject NavigationManager NavigationManager

<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(0)">|&lt;</button>
<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(PageIndex - 1)">&lt;</button>
<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(PageIndex + 1)">&gt;</button>
<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(TotalPages - 1)">&gt;|</button>
<Select @onchange="ChangePageSize" class="bg-gray-0b transition-colors duration-100 h-8 py-1 rounded text-color-text">
	@foreach (int i in PublicPagingConstants.PageSizeOptions)
	{
		if (i == PageSize)
		{
			<option value="@i" selected>@i</option>
		}
		else
		{
			<option value="@i">@i</option>
		}
	}
</Select>
<div class="p-1">Page @(PageIndex + 1) of @TotalPages (@(PageIndex * PageSize + 1) - @Math.Min(TotalResults, (PageIndex + 1) * PageSize) of @TotalResults)</div>

@code {
	private int _pageIndex;
	private int _pageSize = PublicPagingConstants.PageSizeDefault;

	private int TotalPages => (TotalResults - 1) / PageSize + 1;

	[Parameter, SupplyParameterFromQuery] public int PageIndex { get => _pageIndex; set => _pageIndex = Math.Max(0, value); }
	[Parameter, SupplyParameterFromQuery] public int PageSize { get => _pageSize; set => _pageSize = value < PublicPagingConstants.PageSizeMin || value > PublicPagingConstants.PageSizeMax ? PublicPagingConstants.PageSizeDefault : value; }
	[Parameter] public int TotalResults {  get;  set; }

	private async Task ChangePageIndex(int pageIndex)
	{
		PageIndex = Math.Clamp(pageIndex, 0, TotalPages - 1);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageIndex, PageIndex);

		// TODO
		// await Fetch();
	}

	private async Task ChangePageSize(ChangeEventArgs e)
	{
		if (!int.TryParse(e.Value?.ToString(), out int pageSize))
			return;

		PageSize = pageSize;
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageSize, PageSize);

		PageIndex = Math.Clamp(PageIndex, 0, TotalPages - 1);
		
		// TODO
		//await Fetch();
	}

	private static class QueryParameters
	{
		public static string PageIndex { get; } = nameof(PageIndex);
		public static string PageSize { get; } = nameof(PageSize);
	}
}
