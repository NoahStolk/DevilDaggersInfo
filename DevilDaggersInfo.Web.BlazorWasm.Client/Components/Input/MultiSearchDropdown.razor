@inherits InputBase<List<int>>

<div class="inline-block w-64 bg-gray-900 text-color-text cursor-pointer">
	<div>
		<div class="w-full" @onclick="e => _show = !_show"><span class="pl-2">@SelectedDisplayValue</span></div>
		@foreach (int id in CurrentValue ?? new())
		{
			<div class="grid grid-cols-8">
				<span class="pl-2 col-span-7">@(Values?.ContainsKey(id) == true ? Values[id] : "???") (@id)</span>
				<span class="w-8 cursor-pointer bg-gray-800 rounded block text-center" @onclick="e => Remove(id)">✕</span>
			</div>
		}
	</div>
	<div class="@(_show ? "absolute" : "hidden") z-10">
		<div class="bg-gray-900">
			<div class="p-2 w-64">
				<span class="cursor-default w-16">Search:</span>
				<InputTextImmediate @bind-Value="_searchValue" class="w-48 bg-gray-700 text-color-text" />
			</div>
			<ul class="max-h-screen-half overflow-y-scroll w-64">
				@{
					int i = 0;
					foreach (KeyValuePair<int, string> kvp in FilteredItems)
					{
						<li class="cursor-pointer pl-2 @(i++ % 2 == 0 ? "bg-gray-800" : string.Empty)" Item="@kvp" @onclick="e => Add(kvp.Key)">@kvp.Value (@kvp.Key)</li>
					}
				}
			</ul>
		</div>
	</div>
</div>

@code
{
	private string? _searchValue;

	private string SelectedDisplayValue => $"{CurrentValue?.Count ?? 0} selected";

	[Parameter] public Dictionary<int, string>? Values { get; set; }

	private bool _show = false;

	public Dictionary<int, string> FilteredItems => Values == null ? new() : _searchValue == null ? Values : Values
		.Where(kvp =>
			kvp.Key.ToString()?.Contains(_searchValue, StringComparison.InvariantCultureIgnoreCase) == true ||
			kvp.Value.Contains(_searchValue, StringComparison.InvariantCultureIgnoreCase))
		.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

	private void Add(int i)
	{
		CurrentValue ??= new();
		if (!CurrentValue.Contains(i))
			CurrentValue.Add(i);
	}

	private void Remove(int i)
	{
		if (CurrentValue?.Contains(i) == true)
			CurrentValue.Remove(i);
	}

	protected override bool TryParseValueFromString(string? value, out List<int>? result, out string validationMessage)
	{
		validationMessage = string.Empty;
		result = value?.Split(',').Select(int.Parse).ToList();
		return true;
	}
}
