@using System.Globalization

<Select @onchange="UpdateDay" class="bg-gray-900 transition-colors duration-100 h-8 py-1 rounded text-color-text">
	@for (int i = 1; i <= 31; i++)
	{
		if (i == Day)
		{
			<option selected>@i</option>
		}
		else
		{
			<option>@i</option>
		}
	}
</Select>
<Select @onchange="UpdateMonth" class="bg-gray-900 transition-colors duration-100 h-8 py-1 rounded text-color-text">
	@for (int i = 1; i <= 12; i++)
	{
		if (i == Month)
		{
			<option value="@i" selected>@_monthNames[i - 1]</option>
		}
		else
		{
			<option value="@i">@_monthNames[i - 1]</option>
		}
	}
</Select>
<Select @onchange="UpdateYear" class="bg-gray-900 transition-colors duration-100 h-8 py-1 rounded text-color-text">
	@for (int i = _minYear; i <= _maxYear; i++)
	{
		if (i == Year)
		{
			<option selected>@i</option>
		}
		else
		{
			<option>@i</option>
		}
	}
</Select>

@code {
	private static readonly int _minYear = 2015;
	private static readonly int _maxYear = DateTime.UtcNow.Year;
	private static readonly string[] _monthNames = CultureInfo.InvariantCulture.DateTimeFormat.MonthNames.Take(12).ToArray();

	public int Day { get; set; }
	public int Month { get; set; }
	public int Year { get; set; }

	[Parameter, EditorRequired] public EventCallback<DateTime> DateSelected { get; set; }

	protected override void OnInitialized()
	{
		Day = DateTime.UtcNow.Day;
		Month = DateTime.UtcNow.Month;
		Year = DateTime.UtcNow.Year;
	}

	public Task UpdateDay(ChangeEventArgs e)
	{
		Day = ToInt(e);
		return UpdateDate();
	}

	public Task UpdateMonth(ChangeEventArgs e)
	{
		Month = ToInt(e);
		return UpdateDate();
	}

	public Task UpdateYear(ChangeEventArgs e)
	{
		Year = ToInt(e);
		return UpdateDate();
	}

	private Task UpdateDate()
	{
		Year = Math.Clamp(Year, 2015, DateTime.UtcNow.Year);
		Month = Math.Clamp(Month, 1, 12);
		Day = Math.Clamp(Day, 1, DateTime.DaysInMonth(Year, Month));
		DateTime dateTime = new(Year, Month, Day);
		return DateSelected.InvokeAsync(dateTime);
	}

	private int ToInt(ChangeEventArgs e)
	{
		if (e.Value == null)
			return 0;

		if (int.TryParse(e.Value.ToString(), out int result))
			return result;

		return 0;
	}
}
