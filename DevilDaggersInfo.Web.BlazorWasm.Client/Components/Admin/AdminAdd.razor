@inject AdminApiHttpClient Http
@inject NavigationManager NavigationManager
@typeparam TModel

<Heading>Add</Heading>

@switch (State)
{
	case ErrorState.ValidationError:
		{
			<ResultBar Title="Validation failed" ResultBarType="ResultBarType.ValidationError" DismissEvent="Dismiss">
				@ErrorMessage
			</ResultBar>
		}
		break;
	case ErrorState.FatalError:
		{
			<ResultBar Title="Fatal error" ResultBarType="ResultBarType.FatalError" DismissEvent="Dismiss">
				@ErrorMessage
			</ResultBar>
		}
		break;
}

<EditForm Model="@Model" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	@ChildContent

	<button class="bg-gray-0b hover:bg-gray-22 p-1 rounded text-color-text" type="submit">Submit</button>
</EditForm>

@code
{
	[Parameter, EditorRequired] public string OverviewUrl { get; set; } = null!;
	[Parameter, EditorRequired] public Func<TModel, Task<HttpResponseMessage>> ApiCall { get; set; } = null!;
	[Parameter, EditorRequired] public TModel Model { get; set; } = default!;
	[Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = null!;

	public ErrorState State { get; set; }
	public string? ErrorMessage { get; set; }

	private async Task OnValidSubmit()
	{
		try
		{
			HttpResponseMessage hrm = await ApiCall.Invoke(Model);

			if (hrm.StatusCode == HttpStatusCode.OK)
				NavigationManager.NavigateTo(OverviewUrl);
			else
				ErrorMessage = await hrm.Content.ReadAsStringAsync();

			State = hrm.StatusCode.IsUserError() ? ErrorState.ValidationError : ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				ErrorMessage = $"HTTP {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				ErrorMessage = $"An error occurred while sending the request. {ex.Message}";
		}
		catch (Exception ex)
		{
			ErrorMessage = $"An error occurred while sending the request. {ex.Message}";
		}
	}

	private void Dismiss()
	{
		State = ErrorState.None;
		StateHasChanged();
	}
}
