@inject AdminApiHttpClient Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@switch (State)
{
	case DeleteState.Confirm:
		{
			<div class="bg-dark-red p-2 rounded">
				<h4 class="text-xl">Delete?</h4>

				<p>Are you sure you want to delete entity with ID @IdToDelete?</p>

				<button class="bg-red w-40 py-1 rounded" @onclick="ConfirmDelete">Delete permanently</button>
				<button class="bg-gray-0b w-20 py-1 rounded" @onclick="Cancel">Cancel</button>
			</div>
		}
		break;
	case DeleteState.ValidationError:
		{
			<ResultBar Title="Validation failed" ResultBarType="ResultBarType.ValidationError" DismissEvent="Cancel">
				@ApiResponse
			</ResultBar>
		}
		break;
	case DeleteState.FatalError:
		{
			<ResultBar Title="Fatal error" ResultBarType="ResultBarType.FatalError" DismissEvent="Cancel">
				@ApiResponse
			</ResultBar>
		}
		break;
	case DeleteState.Ok:
		{
			<ResultBar Title="Delete successful" ResultBarType="ResultBarType.Success" DismissEvent="Cancel">
				Successfully deleted entity with ID @IdToDelete.
			</ResultBar>
		}
		break;
}

@code {
	public DeleteState State { get; set; }
	public int? IdToDelete { get; set; }
	public string? ApiResponse { get; set; }

	[Parameter] public Func<Task>? AfterDelete { get; set; }
	[Parameter, EditorRequired] public Func<int, Task<HttpResponseMessage>> ApiCall { get; set; } = null!;

	public void Set(int id)
	{
		State = DeleteState.Confirm;
		IdToDelete = id;
	}

	private async Task ConfirmDelete()
	{
		try
		{
			if (!IdToDelete.HasValue)
				return;

			HttpResponseMessage hrm = await ApiCall.Invoke(IdToDelete.Value);
			if (hrm.StatusCode == HttpStatusCode.OK)
			{
				State = DeleteState.Ok;

				if (AfterDelete != null)
					await AfterDelete.Invoke();
			}
			else
			{
				State = hrm.StatusCode.GetDeleteState();
				ApiResponse = await hrm.Content.ReadAsStringAsync();
			}
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	public void Cancel()
	{
		State = DeleteState.None;
		IdToDelete = default;
		StateHasChanged();
	}
}
