@typeparam TGetDto
@inject AdminApiHttpClient Http
@inject AuthenticationStateProvider Auth
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<Heading Title="@Title" />

<Paragraph>Hello, @_username</Paragraph>

@if (_errorMessage != null)
{
	<ResultBar Title="Failed to retrieve overview" ResultBarType="ResultBarType.FatalError" DismissEvent="Dismiss">
		@_errorMessage
	</ResultBar>
}

@if (_page == null)
{
	<Loading />
}
else
{
	<Deletion AfterDelete="Fetch" ApiCall="@DeletionApiCall" @ref="_deletion" />

	<a class="inline-block bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-20 h-8 py-1 rounded text-color-text text-center" href="@($"{NavigationManager.Uri}/add")">Add new</a>
	<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(0)">|&lt;</button>
	<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(_pageIndex - 1)">&lt;</button>
	<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(_pageIndex + 1)">&gt;</button>
	<button class="bg-gray-0b hover:bg-gray-22 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(TotalPages - 1)">&gt;|</button>
	<Select @onchange="ChangePageSize" class="bg-gray-0b transition-colors duration-100 h-8 py-1 rounded text-color-text">
		@foreach (int i in AdminPagingConstants.PageSizeOptions)
		{
			<option value="@i">@i</option>
		}
	</Select>
	<div class="p-1">Page @(_pageIndex + 1) of @TotalPages (@(_pageIndex * _pageSize) - @Math.Min(_page.TotalResults, (_pageIndex + 1) * _pageSize) of @_page.TotalResults)</div>

	<div class="grid gap-2 @GridConfiguration">
		@foreach (KeyValuePair<PropertyInfo, bool> pi in _properties)
		{
			string name = (pi.Key.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute)?.Name ?? pi.Key.Name;
			<a class="@(pi.Value ? "text-right" : "text-left") overflow-x-hidden text-color-link hover:text-color-link-hover" href="" @onclick="() => Sort(pi.Key.Name)" @onclick:preventDefault>@name</a>
		}
		<div></div>
		<div></div>
	</div>
	<div>
		@{
			int j = 0;
			foreach (TGetDto result in _page.Results)
			{
				<div class="grid gap-2 @GridConfiguration @(j++ % 2 == 0 ? "bg-gray-0b" : string.Empty)">
					@foreach (KeyValuePair<PropertyInfo, bool> pi in _properties)
					{
						<div class="overflow-x-hidden @(pi.Value ? "text-right" : "text-left")">@ReflectionUtils.GetDtoPropertyDisplayValue(pi.Key, result)</div>
					}
					<div><a class="text-color-link hover:text-color-link-hover" href="@($"{NavigationManager.Uri}/edit/{result.Id}")">Edit</a></div>
					<div><a class="text-color-link hover:text-color-link-hover" href="" @onclick="() => _deletion?.Set(result.Id)" @onclick:preventDefault>Delete</a></div>
				</div>
			}
		}
	</div>
}

@code
{
	[Parameter, EditorRequired] public string Title { get; set; } = null!;
	[Parameter, EditorRequired] public Func<int, int, string?, bool, Task<Page<TGetDto>>> ApiCall { get; set; } = null!;
	[Parameter, EditorRequired] public Func<int, Task<HttpResponseMessage>> DeletionApiCall { get; set; } = null!;
	[Parameter, EditorRequired] public string GridConfiguration { get; set; } = null!;

	private int TotalPages => _page == null ? 0 : (_page.TotalResults - 1) / _pageSize + 1;

	private int _pageIndex;
	private int _pageSize = AdminPagingConstants.PageSizeDefault;
	private string? _sortBy;
	private bool _ascending = true;

	private Page<TGetDto>? _page;
	private string? _errorMessage;
	private Dictionary<PropertyInfo, bool> _properties = ReflectionUtils.GetDtoDisplayProperties<TGetDto>();
	private Dictionary<string, bool> _sortings = null!;

	private Deletion? _deletion;

	private string? _username;

	protected override async Task OnInitializedAsync()
	{
		AuthenticationState auth = await Auth.GetAuthenticationStateAsync();
		_username = auth.User?.Identity?.Name;

		if (_username?.Contains("unique_name: ") == true)
			_username = _username[("unique_name: ".Length)..];

		_sortings = _properties.ToDictionary(pi => pi.Key.Name, _ => true);
		await Fetch();
	}

	private async Task ChangePageIndex(int pageIndex)
	{
		_pageIndex = Math.Clamp(pageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task ChangePageSize(ChangeEventArgs e)
	{
		_ = int.TryParse(e.Value?.ToString(), out _pageSize);
		_pageIndex = Math.Clamp(_pageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task Sort(string propertyName)
	{
		_sortBy = propertyName;
		_sortings[propertyName] = !_sortings[propertyName];
		_ascending = _sortings[propertyName];
		await Fetch();
	}

	private async Task Fetch()
	{
		try
		{
			_page = await ApiCall.Invoke(_pageIndex, _pageSize, _sortBy, _ascending);
			_errorMessage = null;
			StateHasChanged();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_errorMessage = $"HTTP {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_errorMessage = $"An error occurred while sending the request. {ex.Message}";
		}
	}

	private void Dismiss()
	{
		_errorMessage = null;
		StateHasChanged();
	}
}
