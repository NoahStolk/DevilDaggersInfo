@typeparam TGetDto
@implements IHasNavigation
@inject AdminApiHttpClient Http
@inject AuthenticationStateProvider Auth
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using DevilDaggersInfo.Web.BlazorWasm.Client.Pages

<Heading Title="@Title" />

<Paragraph>Hello, @_username</Paragraph>

@if (_errorMessage != null)
{
	<ResultBar Title="Failed to retrieve overview" ResultBarType="ResultBarType.FatalError" DismissEvent="Dismiss">
		@_errorMessage
	</ResultBar>
}

@if (_page == null)
{
	if (!_errorThrown)
	{
		<Loading />
	}
}
else
{
	<Deletion AfterDelete="Fetch" ApiCall="@DeletionApiCall" @ref="_deletion" />

	<div class="bg-gray-1 p-2 text-lg">
		<a class="link block w-24 mb-2 mx-1" href="@($"{NavigationManager.Uri}/add")">Add new</a>

		<CascadingValue Value="this">
			<Paging />
		</CascadingValue>
	</div>

	<div class="grid gap-2 @GridConfiguration">
		@foreach (KeyValuePair<PropertyInfo, bool> pi in _properties)
		{
			string name = (pi.Key.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute)?.Name ?? pi.Key.Name;
			<a class="@(pi.Value ? "text-right" : "text-left") link overflow-x-hidden" href="" @onclick="() => Sort(pi.Key.Name)" @onclick:preventDefault>@name</a>
		}
		<div></div>
		<div></div>
	</div>
	<div>
		@{
			int j = 0;
			foreach (TGetDto result in _page.Results)
			{
				<div class="grid gap-2 @GridConfiguration @(j++ % 2 == 0 ? "bg-gray-1" : string.Empty)">
					@foreach (KeyValuePair<PropertyInfo, bool> pi in _properties)
					{
						<div class="overflow-x-hidden @(pi.Value ? "text-right" : "text-left")">@ReflectionUtils.GetDtoPropertyDisplayValue(pi.Key, result)</div>
					}
					<div><a class="link" href="@($"{NavigationManager.Uri}/edit/{result.Id}")">Edit</a></div>
					<div><a class="link" href="" @onclick="() => _deletion?.Set(result.Id)" @onclick:preventDefault>Delete</a></div>
				</div>
			}
		}
	</div>
}
