@page
@model DevilDaggersWebsite.Razor.Pages.Wiki.EnemiesModel
@using DevilDaggersWebsite.Razor.Utils
@using DevilDaggersCore.Game
@{
	string boxShadow = "0 0px 2px 2px";
	ViewData["Title"] = "Enemies";

	int index = 0;
}

<header>
	<h1>@ViewData["Title"]</h1>
</header>

<form method="get">
	<select class="select form-control" asp-for="GameVersion" asp-items="Model.GameVersionListItems" onchange="this.form.submit()"></select>
</form>

<main role="main">
	<h2 class="text-center">Table of contents</h2>
	<ul class="text-center table-of-contents">
		@for (int i = 0; i < Model.TableOfContents.Count; i++)
		{
			<li><a href="#@Model.TableOfContents[i].ToIdString()">@Model.TableOfContents[i]</a></li>
		}
	</ul>

	<h2 id="@Model.TableOfContents[index].ToIdString()" class="text-center hidden-xs">@Model.TableOfContents[index++]</h2>
	<div class="enemies-summary flex-container flex-center hidden-xs">
		<div class="flex-container">
			<div>Enemy</div>
			<div>HP</div>
			<div>Gems</div>
			<div>Death type</div>
			<div class="hidden-sm hidden-md">Appearances</div>
			<div>Spawned by</div>
		</div>
		@foreach (Enemy enemy in Model.Enemies)
		{
			<div class="flex-container">
				<div>@RazorUtils.GetLayoutAnchor(enemy)</div>
				<div class='text-right'>@enemy.Hp</div>
				<div class='text-right'>@enemy.Gems</div>
				<div style='color: #@(enemy.Death?.ColorCode ?? "444")'>@(enemy.Death?.Name ?? "None")</div>
				<div class="hidden-sm hidden-md">@string.Join(", ", GameInfo.GetAppearances(enemy.Name))</div>
				<div>
					@if (enemy.SpawnedBy.Count() == 0)
					{
						@:Game
					}
					else
					{
						foreach (Enemy e in enemy.SpawnedBy)
						{
							<span>@RazorUtils.GetLayoutAnchor(e)</span>
						}
					}
				</div>
			</div>
		}
	</div>

	<h2 id="@Model.TableOfContents[index].ToIdString()" class="text-center">@Model.TableOfContents[index++]</h2>
	<div class="flex-container flex-center enemy-container">
		@foreach (Enemy enemy in Model.Enemies)
		{
			<div class="enemy" id="@(enemy.Name.Replace(" ", string.Empty))" style="-webkit-box-shadow: @boxShadow #@(enemy.ColorCode); -moz-box-shadow: @boxShadow #@(enemy.ColorCode); box-shadow: @boxShadow #@(enemy.ColorCode);">
				<div class="enemy-row flex-container">
					<div>Enemy</div>
					<div class="text-right" style='color: #@enemy.ColorCode'>@enemy.Name</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Image</div>
					<div><img class="img-responsive pull-right" src='~/Images/Enemies/@(enemy == GameInfo.V3Gigapede || enemy == GameInfo.V31Gigapede ? "GigapedeV3" : enemy.Name).png' /></div>
				</div>
				<div class="enemy-row flex-container">
					<div>HP</div>
					<div class="text-right">@enemy.Hp @(enemy.Gems > 1 ? enemy.GetGemHpString() : "")</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Gems</div>
					<div class="text-right">@enemy.Gems</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Death type</div>
					<div class="text-right" style='color: #@(enemy.Death?.ColorCode ?? "444")'>@(enemy.Death?.Name ?? "None")</div>
				</div>
				<div class="enemy-row flex-container">
					<div>First appearance</div>
					<div class="text-right">@GameInfo.GetAppearances(enemy.Name).OrderBy(e => e).First()</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Spawned by</div>
					<div class="text-right">
						@if (enemy.SpawnedBy.Count() == 0)
						{
							<span style='color: #DDDDDD;'>Game</span>
						}
						else
						{
							foreach (Enemy e in enemy.SpawnedBy)
							{
								<span>@RazorUtils.GetLayoutAnchor(e)</span>
							}
						}
					</div>
				</div>
				<div class="enemy-row flex-container">
					<div>Behavior</div>
					<div>
						<ul>
							@foreach (string s in GameInfo.GetEnemyInfo(enemy))
							{
								<li>@RazorUtils.GetLayout(s.TransmuteString())</li>
							}
						</ul>
					</div>
				</div>
			</div>
		}
	</div>

	<h2 id="@Model.TableOfContents[index].ToIdString()" class="text-center">@Model.TableOfContents[index++]</h2>
	<p class="text-center">All of this information assumes 100% shot accuracy, and may not be relevant in some cases.</p>

	@{
		// Add "gem" enemies to make regenerating the table easier
		Dictionary<Enemy, bool> enemies = new Dictionary<Enemy, bool>();
		foreach (Enemy enemy in Model.Enemies)
		{
			enemies.Add(enemy, false);
			if (enemy.Gems > 1)
			{
				Enemy enemyGem = enemy.Copy();
				enemyGem.Hp = enemy.GemHp;
				enemyGem.Homing3 = enemy.Homing3 / enemy.Gems;
				enemyGem.Homing4 = enemy.Homing4 / enemy.Gems;
				enemies.Add(enemyGem, true);
			}
		}
	}

	<table class="damage-stats-table visible-lg">
		<thead>
			<tr>
				<td>Name</td>
				<td class="text-right">HP</td>
				<td class="text-right" colspan="@Model.Upgrades.Count">Spray (seconds)</td>
				<td class="text-right" colspan="@Model.Upgrades.Count">Shots</td>
				<td class="text-right" colspan="@(Model.Upgrades.Count - 2)">Homing daggers</td>
			</tr>
			<tr>
				<td></td>
				<td></td>
				@for (int i = 0; i < 3; i++)
				{
					foreach (Upgrade upgrade in Model.Upgrades)
					{
						if (i == 2 && upgrade.Level < 3)
						{
							continue;
						}
						<td class="text-right">@upgrade.GetLayoutAnchor()</td>
					}
				}
			</tr>
		</thead>
		<tbody>
			@{
				foreach (KeyValuePair<Enemy, bool> kvp in enemies)
				{
					<tr>
						<td>@kvp.Key.GetLayoutAnchor() @(kvp.Value ? "(Gem)" : "")</td>
						<td class="text-right">@kvp.Key.Hp</td>
						@for (int i = 0; i < 3; i++)
						{
							foreach (Upgrade upgrade in Model.Upgrades)
							{
								switch (i)
								{
									case 0:
										<td class="text-right">@((kvp.Key.Hp / upgrade.DefaultSprayPerSecond).ToString("0.000"))</td>
										break;
									case 1:
										<td class="text-right">@Math.Ceiling(kvp.Key.Hp / (double)upgrade.DefaultShot)</td>
										break;
									case 2:
										if (upgrade.Level == 3)
										{
											<td class="text-right">@(kvp.Key.Homing3 == null ? RazorUtils.NAString : Html.Raw(kvp.Key.Homing3.Value.ToString("0.##")))</td>
										}
										else if (upgrade.Level == 4)
										{
											<td class="text-right">@(kvp.Key.Homing4 == null ? RazorUtils.NAString : Html.Raw(kvp.Key.Homing4.Value.ToString("0.##")))</td>
										}
										break;
								}
							}
						}
					</tr>
				}
			}
		</tbody>
	</table>

	<table class="damage-stats-table visible-md visible-sm">
		<thead>
			<tr>
				<td>Name</td>
				<td class="text-right">HP</td>
			</tr>
		</thead>
		<tbody>
			@{
				foreach (KeyValuePair<Enemy, bool> kvp in enemies)
				{
					@for (int i = 0; i < 4; i++)
					{
						<tr>
							@switch (i)
							{
								case 0:
									<td>@kvp.Key.GetLayoutAnchor() @(kvp.Value ? "(Gem)" : "")</td>
									<td class="text-right">@kvp.Key.Hp</td>
									foreach (Upgrade upgrade in Model.Upgrades)
									{
										<td class="text-right">@upgrade.GetLayoutAnchor()</td>
									}
									break;
								case 1:
									<td>Spray (seconds)</td>
									<td></td>
									foreach (Upgrade upgrade in Model.Upgrades)
									{
										<td class="text-right">@((kvp.Key.Hp / upgrade.DefaultSprayPerSecond).ToString("0.000"))</td>
									}
									break;
								case 2:
									<td>Shots</td>
									<td></td>
									foreach (Upgrade upgrade in Model.Upgrades)
									{
										<td class="text-right">@Math.Ceiling(kvp.Key.Hp / (double)upgrade.DefaultShot)</td>
									}
									break;
								case 3:
									<td>Homing daggers</td>
									<td></td>
									foreach (Upgrade upgrade in Model.Upgrades)
									{
										if (upgrade.Level == 3)
										{
											<td class="text-right">@(kvp.Key.Homing3 == null ? RazorUtils.NAString : Html.Raw(kvp.Key.Homing3.Value.ToString("0.##")))</td>
										}
										else if (upgrade.Level == 4)
										{
											<td class="text-right">@(kvp.Key.Homing4 == null ? RazorUtils.NAString : Html.Raw(kvp.Key.Homing4.Value.ToString("0.##")))</td>
										}
										else
										{
											<td class="text-right">@RazorUtils.NAString</td>
										}
									}
									break;
							}
						</tr>
					}
				}
			}
		</tbody>
	</table>

	<table class="damage-stats-table visible-xs">
		@{
			foreach (KeyValuePair<Enemy, bool> kvp in enemies)
			{
				string id = $"{kvp.Key.Name.Replace(" ", "")}{(kvp.Value ? "Gem" : "")}";

				<tbody>
					<tr class="enemy-row-xs-header flex-container">
						<td><span class="enemy-expander" id="@id">+</span> @kvp.Key.GetLayoutAnchor() @(kvp.Value ? "(Gem)" : "")</td>
						<td class="text-right">@kvp.Key.Hp HP</td>
					</tr>
				</tbody>

				<tbody class="enemy-expand flex-container" id="@id-expand">
					@for (int i = 0; i < 3; i++)
					{
						switch (i)
						{
							case 0:
								foreach (Upgrade upgrade in Model.Upgrades)
								{
									<tr>
										<td>@upgrade.GetLayoutAnchor() spray (seconds)</td>
										<td class="text-right">@((kvp.Key.Hp / upgrade.DefaultSprayPerSecond).ToString("0.000"))</td>
									</tr>
								}
								break;
							case 1:
								foreach (Upgrade upgrade in Model.Upgrades)
								{
									<tr>
										<td>@upgrade.GetLayoutAnchor() shots</td>
										<td class="text-right">@Math.Ceiling(kvp.Key.Hp / (double)upgrade.DefaultShot)</td>
									</tr>
								}
								break;
							case 2:
								foreach (Upgrade upgrade in Model.Upgrades)
								{
									if (upgrade.Level < 3)
									{
										continue;
									}

									<tr>
										<td>@upgrade.GetLayoutAnchor() homing daggers</td>
										@if (upgrade.Level == 3)
										{
											<td class="text-right">@(kvp.Key.Homing3 == null ? RazorUtils.NAString : Html.Raw(kvp.Key.Homing3.Value.ToString("0.##")))</td>
										}
										else if (upgrade.Level == 4)
										{
											<td class="text-right">@(kvp.Key.Homing4 == null ? RazorUtils.NAString : Html.Raw(kvp.Key.Homing4.Value.ToString("0.##")))</td>
										}
									</tr>
								}
								break;
						}
					}
				</tbody>
			}
		}
	</table>

	<h2 id="@Model.TableOfContents[index].ToIdString()" class="text-center">@Model.TableOfContents[index++]</h2>
	<ul>
		@{
			string transmuters = Model.GameVersion >= GameVersion.V3 ? "Leviathan or The Orb beckon, they" : "Leviathan beckons, it";

			string transmutedSkullList = (Model.GameVersion == GameVersion.V1)
				? @"
			<li>Skull I is turned into Transmuted Skull II.</li>
			<li>Skull II is turned into Transmuted Skull III.</li>
			<li>Skull III is turned into Transmuted Skull IV.</li>"
				: @"
			<li>Skull I is turned into Transmuted Skull I.</li>
			<li>Skull II is turned into Transmuted Skull II.</li>
			<li>Skull III is turned into Transmuted Skull III.</li>
			<li>Skull IV is turned into Transmuted Skull IV.</li>";

			@RazorUtils.GetLayout($@"
			<li>When {transmuters} will attract and transmute all skulls in the arena that touch the beckon ring.</li>
			<li>When the skulls are sucked up and thrown back into the arena, they are 'transmuted', which means they have a different appearance and more HP. Transmuted Skull III also seems to turn faster.</li>
			<li>Damaging a skull that is about to be transmuted is useless if it is not killed; the HP will reset to the transmuted skull's full HP.</li>
			<li>Here is the list of which skull turns into which transmuted skull (this differs between game versions):<ul>{transmutedSkullList}</ul></li>", Model.GameVersion)
		}
	</ul>

	@{
		if (Model.GameVersion >= GameVersion.V3)
		{
			<h2 id="@Model.TableOfContents[index].ToIdString()" class="text-center">@Model.TableOfContents[index++]</h2>
			<ul>
				@RazorUtils.GetLayout(@"
				<li>All homing daggers cause 10 damage to most enemies.</li>
				<li>Leviathan, The Orb, Spider Egg I, and Spider Egg II only take 1 damage from homing daggers.</li>
				<li>The Orb, Spider Egg I, and Spider Egg II are the only enemies that are not targeted by any homing daggers.</li>
				<li>Level 4 homing daggers cause splash damage. This means that when they're destroyed, they create a little explosion that can cause damage (most likely 10) to near enemies. For example, you only need one Level 4 homing dagger to kill a Squid II, as the explosion will destroy the other gem.</li>
				<li>Not sure why you need 3 Level 4 homing daggers to kill a Squid III gem, but only 1 Level 3 homing dagger... Seems like a bug.</li>
				<li>Also not sure why you need 10 Level 4 homing daggers to kill a single Transmuted Skull I, while one single Level 3 homing dagger can kill 4 of them... Probably another bug.</li>")
			</ul>
		}
	}
</main>

@section Scripts {
	<script defer src='~/scripts/enemies-damage-stats.js' asp-append-version='true'></script>
}

@section Styles {
	<link rel='stylesheet' href='~/styles/enemies.css' />
	<link rel='stylesheet' href='~/styles/enemies-damage-stats.css' />
}
