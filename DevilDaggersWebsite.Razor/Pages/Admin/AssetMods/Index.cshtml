@page
@using DevilDaggersWebsite.Clients
@using DevilDaggersWebsite.Dto.Mods
@using DevilDaggersWebsite.Utils
@using System.Reflection
@using DevilDaggersWebsite.Entities
@using Microsoft.AspNetCore.Hosting
@using System.Collections.Generic
@using System.IO
@using System.Linq
@inject DevilDaggersInfoClient Http
@inject ApplicationDbContext DbContext
@inject IWebHostEnvironment Environment
@{
	ViewData["Title"] = "AssetMods";

	PropertyInfo[] properties = ReflectionUtils.GetDtoDisplayPropertyInfos<GetMod>();

	List<string> deadFiles = new();
	List<string> deadScreenshots = new();

	foreach (string path in Directory.GetFiles(System.IO.Path.Combine(Environment.WebRootPath, "mods")))
	{
		string fileName = System.IO.Path.GetFileNameWithoutExtension(path);
		if (!DbContext.AssetMods.Any(am => am.Name == fileName))
			deadFiles.Add(fileName);
	}

	List<string> directoriesScanned = new();
	foreach (string path in Directory.GetFiles(System.IO.Path.Combine(Environment.WebRootPath, "mod-screenshots"), "*.png", SearchOption.AllDirectories))
	{
		string directoryName = new DirectoryInfo(path).Parent?.Name ?? throw new($"Invalid path '{path}' while scanning for dead mod screenshots.");

		if (directoriesScanned.Contains(directoryName))
			continue;

		if (!DbContext.AssetMods.Any(am => am.Name == directoryName))
			deadScreenshots.Add(System.IO.Path.Combine(directoryName, System.IO.Path.GetFileName(path)));

		directoriesScanned.Add(directoryName);
	}
}

<h1>@ViewData["Title"]</h1>

<h2>Notes</h2>
<ul>
	<li>It is possible to host mod files on the website. The fields "Url" and "AssetModTypes" are ignored for these mods. The file name must match the mod name (case sensitive).</li>
	<li>The "LastUpdated" field is specified in Coordinated Universal Time (UTC). However, it's not necessary to fill in the exact time. A date would be nice though. The date should represent when the mod was last updated in terms of what's being changed in the game. Don't update the "LastUpdated" field if the binary got trimmed, or when a trailer for it was released.</li>
	<li>The "TrailerUrl" field must link to embedded content. For example, a normal YouTube link (<span class="path">youtube.com/watch?v=...</span>) won't work; it must be a YouTube <i>embed</i> (<span class="path">youtube.com/embed/...</span>). Please only use videos that contain primary Devil Daggers gameplay content.</li>
	<li>If you want to edit or rename a mod file, you will need to delete and re-upload it.</li>
	<li>No NSFW mods.</li>
</ul>
@if (deadFiles.Count > 0)
{
	<h2>Dead files</h2>
	<ul>
		@foreach (string fileName in deadFiles)
		{
			<li>@fileName</li>
		}
	</ul>
}
@if (deadScreenshots.Count > 0)
{
	<h2>Dead screenshots</h2>
	<ul>
		@foreach (string fileName in deadScreenshots)
		{
			<li>@fileName</li>
		}
	</ul>
}
<p><a asp-page="CreateOrEdit">Create New</a></p>
<p><a asp-page="UploadFile">Upload File</a></p>
<p><a asp-page="DeleteFile">Delete File</a></p>
<p><a asp-page="UploadScreenshot">Upload Screenshot</a></p>
<p><a asp-page="DeleteScreenshot">Delete Screenshot</a></p>
<table class="table admin-table">
	<thead>
		<tr>
			@foreach (var pi in properties)
			{
				<th><a asp-route-sortOrder="@pi.Name">@pi.Name</a></th>
			}
			<th></th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (GetMod dto in await Http.GetAsync<GetMod[]>("api/mods/private"))
		{
			<tr>
				@foreach (var pi in properties)
				{
					<td>@ReflectionUtils.GetDtoPropertyDisplayValue(pi, dto)</td>
				}
				<td>
					<a asp-page="CreateOrEdit" asp-route-id="@dto.Id">Edit</a>
				</td>
				<td>
					<a asp-page="Delete" asp-route-id="@dto.Id">Delete</a>
				</td>
			</tr>
		}
	</tbody>
</table>

@section Styles {
	<link rel='stylesheet' href='~/styles/admin.css' asp-append-version="true" />
}
