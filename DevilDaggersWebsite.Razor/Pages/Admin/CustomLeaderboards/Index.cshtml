@page
@using DevilDaggersWebsite.Dto.CustomLeaderboards
@using DevilDaggersWebsite.Entities
@using DevilDaggersWebsite.Razor.PageModels
@using DevilDaggersWebsite.Utils
@using System.Net.Http
@using System.Net.Http.Json
@using System.Reflection
@inject HttpClient Http
@model AdminEntityIndexPageModel<CustomLeaderboard>
@{
	ViewData["Title"] = "CustomLeaderboards";

	PropertyInfo[] properties = ReflectionUtils.GetDtoDisplayPropertyInfos<GetCustomLeaderboard>();
}

<h1>@ViewData["Title"]</h1>

<p>Notes</p>
<ul>
	<li>The dagger timings are specified in tenths of milliseconds, meaning that for 900 seconds you'd have to enter 9000000.</li>
	<li>The internal timer always starts at 0, it is therefore recommended to not use spawnsets with a different "timer start" value as this causes confusion.</li>
</ul>

<p>
	<a asp-page="CreateOrEdit">Create New</a>
</p>
<table class="table admin-table">
	<thead>
		<tr>
			@foreach (var pi in properties)
			{
				<th><a asp-route-sortOrder="@pi.Name">@pi.Name</a></th>
			}
			<th></th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var dto in await Http.GetFromJsonAsync<GetCustomLeaderboard[]>("api/CustomLeaderboards") ?? throw new("API call returned null."))
		{
			<tr>
				@foreach (var pi in properties)
				{
					<td>@ReflectionUtils.GetDtoPropertyDisplayValue(pi, dto)</td>
				}
				<td>
					<a asp-page="CreateOrEdit" asp-route-id="@dto.Id">Edit</a>
				</td>
				<td>
					<a asp-page="Delete" asp-route-id="@dto.Id">Delete</a>
				</td>
			</tr>
		}
	</tbody>
</table>

@section Styles {
	<link rel='stylesheet' href='~/styles/admin.css' asp-append-version="true" />
}
