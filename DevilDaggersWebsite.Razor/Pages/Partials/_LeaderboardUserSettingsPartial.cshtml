@model UserSettingsModel
@using DevilDaggersCore.Utils
@using DevilDaggersWebsite.Dto
@using DevilDaggersWebsite.Entities
@using DevilDaggersWebsite.Razor.Models
@using DevilDaggersWebsite.Razor.Pages.Leaderboard
@using DevilDaggersWebsite.Razor.Utils
@inject DevilDaggersWebsite.Entities.ApplicationDbContext dbContext

<div class="leaderboard-container flex-container flex-center">
	<div class="leaderboard-title-row flex-container">
		<div class="sorter text-right" sort="rank">#</div>
		<div class="sorter text-left" sort="flag">Flag</div>
		<div class="sorter text-left" sort="username">Username</div>
		<div class="sorter text-right" sort="time">Time</div>

		<div class="sorter hidden-xs text-right" sort="e-dpi">eDPI</div>
		<div class="sorter hidden-xs text-right" sort="dpi">DPI</div>
		<div class="sorter hidden-xs text-right" sort="in-game-sens">In-game sens</div>
		<div class="sorter hidden-xs text-right" sort="fov">FOV</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-right" sort="gamma">Gamma</div>

		<div class="sorter hidden-xs hidden-sm hidden-md text-left" sort="hand">Hand orientation</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-left" sort="flash">Hand flash</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-left" sort="legacy-audio">Legacy audio</div>
	</div>
	<div class="leaderboard-body">
		@{
			List<Donation> donations = dbContext.Donations.ToList();
			foreach (Entry entry in Model.Entries ?? new())
			{
				Player player = Model.Players.First(p => p.Id == entry.Id);

				SettingsEntryModel sem = new(entry, player, donations);

				<div class="sort" @sem.HtmlData>
					<div class="leaderboard-row pointer flex-container" id="@(entry.Rank)-row">
						<div class="text-right"><span data-toggle="tooltip" title="ID: @entry.Id (click to copy)" onclick="copyToClipboard('@entry.Id')" class="leaderboard-tooltip">@entry.Rank</span></div>
						<div>
							@if (string.IsNullOrEmpty(sem.FlagCode))
							{
								<span><img src="/images/Flags/24x24/00.png" /></span>
							}
							else
							{
								<span class="leaderboard-tooltip" data-toggle="tooltip" title="@sem.CountryName"><img src="/images/Flags/24x24/@(sem.FlagCode).png" /></span>
							}
						</div>
						<div class="text-left leaderboard-username">
							<span class="@sem.DaggerColor">@entry.Username</span>
							@{
								if (sem.Titles != null)
								{
									foreach (string title in sem.Titles)
									{
										<span class="leaderboard-tooltip" data-toggle="tooltip" title="@title"><img src="/images/Icons/@(UserUtils.TitleImages[title]).png" /></span>
									}
								}
								if (sem.IsUnanonymousDonator)
								{
									string title = "Donator";
									<span class="leaderboard-tooltip" data-toggle="tooltip" title="@title"><img src="/images/Icons/@(UserUtils.TitleImages[title]).png" /></span>
								}
							}
						</div>
						<div class="text-right @sem.DaggerColor">@(entry.Time.FormatTimeInteger())</div>
						<div class="hidden-xs text-right">@(player.Edpi != null ? player.Edpi.Value.ToString(FormatUtils.MouseSensitivityFormat) : string.Empty)</div>
						<div class="hidden-xs text-right">@player.Dpi</div>
						<div class="hidden-xs text-right">@(player.InGameSens != null ? player.InGameSens.Value.ToString(FormatUtils.MouseSensitivityFormat) : string.Empty)</div>
						<div class="hidden-xs text-right">@player.Fov</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@player.Gamma</div>
						<div class="hidden-xs hidden-sm hidden-md text-left">@player.RightHandedString</div>
						<div class="hidden-xs hidden-sm hidden-md text-left">@player.FlashEnabledString</div>
						<div class="hidden-xs hidden-sm hidden-md text-left">@player.UsesLegacyAudioString</div>
					</div>
					<div class="leaderboard-expand flex-container" id="@(entry.Rank)-expand">
						<div class="visible-xs">
							<div class="text-left">eDPI</div>
							<div class="text-right">@(player.Edpi != null ? player.Edpi.Value.ToString(FormatUtils.MouseSensitivityFormat) : string.Empty)</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">DPI</div>
							<div class="text-right">@player.Dpi</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">In-game sens</div>
							<div class="text-right">@(player.InGameSens != null ? player.InGameSens.Value.ToString(FormatUtils.MouseSensitivityFormat) : string.Empty)</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">FOV</div>
							<div class="text-right">@player.Fov</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Gamma</div>
							<div class="text-right">@player.Gamma</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Hand orientation</div>
							<div class="text-right">@player.RightHandedString</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Hand flash</div>
							<div class="text-right">@player.FlashEnabledString</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Legacy audio</div>
							<div class="text-right">@player.UsesLegacyAudioString</div>
						</div>
						<div style="padding-top: 1em;">
							<a asp-page="../Leaderboard/Index" asp-route-UserId="@entry.Id">View more info</a>
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>
