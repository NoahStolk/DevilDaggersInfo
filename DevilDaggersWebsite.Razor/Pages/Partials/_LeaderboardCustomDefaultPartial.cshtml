@using DevilDaggersCore.Game
@using DevilDaggersCore.Utils
@using DevilDaggersWebsite.Entities
@using DevilDaggersWebsite.Razor.Utils
@using Microsoft.AspNetCore.Html
@using Microsoft.EntityFrameworkCore
@using DevilDaggersWebsite.Enumerators;
@model DevilDaggersWebsite.Razor.Pages.CustomLeaderboards.LeaderboardModel
@inject DevilDaggersWebsite.Entities.ApplicationDbContext dbContext

<div class="leaderboard-container flex-container flex-center">
	<div class="leaderboard-title-row flex-container">
		<div class="sorter text-center" sort="rank">#</div>
		<div class="sorter text-center" sort="flag">Flag</div>
		<div class="sorter text-center" sort="username">Username</div>
		<div class="sorter text-center" sort="time">Time</div>
		<div class="sorter hidden-xs text-center" sort="kills">Kills</div>
		<div class="sorter hidden-xs text-center" sort="gems">Gems</div>
		<div class="sorter hidden-xs text-center" sort="accuracy">Accuracy</div>
		@if (Model.Leaderboard.Category != CustomLeaderboardCategory.Challenge)
		{
			<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="death-type">Death type</div>
			<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="enemies-alive">Enemies alive</div>
		}
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="homing">Homing</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="level-2">Level 2</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="level-3">Level 3</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center" sort="level-4">Level 4</div>
		<div class="sorter hidden-xs hidden-sm hidden-md text-center submit-date" sort="submit-date">Submit date</div>
	</div>
	<div class="leaderboard-body">
		@{
			IEnumerable<Donation> donations = dbContext.Donations.ToList();
			IEnumerable<Player> players = dbContext.Players.Include(p => p.PlayerTitles).ThenInclude(pt => pt.Title).ToList();
			int rank = 0;
			foreach (CustomEntry? entry in Model.Entries)
			{
				if (entry == null)
					continue;

				rank++;

				Player? player = players.FirstOrDefault(p => p.Id == entry.PlayerId);
				bool isUnanonymousDonator = donations.Any(d => d.PlayerId == entry.PlayerId) && !(player?.IsAnonymous ?? true);

				string flagCode = player?.CountryCode ?? string.Empty;
				string[] titles = player?.PlayerTitles.Select(pt => pt.Title.Name).ToArray() ?? Array.Empty<string>();

				string dagger = Model.Leaderboard.GetDagger(entry.Time);
				Death? death = GameInfo.GetDeathByType(entry.DeathType, GameVersion.V3);

				string deathStyle = $"color: #{death?.ColorCode ?? "444"};";
				HtmlString level2 = entry.LevelUpTime2 == 0 ? RazorUtils.NAString : new HtmlString(entry.LevelUpTime2.FormatTimeInteger());
				HtmlString level3 = entry.LevelUpTime3 == 0 ? RazorUtils.NAString : new HtmlString(entry.LevelUpTime3.FormatTimeInteger());
				HtmlString level4 = entry.LevelUpTime4 == 0 ? RazorUtils.NAString : new HtmlString(entry.LevelUpTime4.FormatTimeInteger());
				string submitDate = entry.SubmitDate.ToString("dd MMM yyyy, HH:mm");
				string daggers = FormatUtils.FormatDaggersInt32(entry.DaggersHit, entry.DaggersFired, false);
				string accuracy = entry.Accuracy.ToString(FormatUtils.AccuracyFormat);

				<div class="sort" @entry.ToHtmlData(rank, player?.Username ?? "[Player not found]", flagCode)>
					<div class="leaderboard-row flex-container" id="@(rank)-row">
						<div class="text-right">
							<span data-toggle="tooltip" title="ID: @entry.PlayerId" class="leaderboard-tooltip">@rank</span>
						</div>
						<div>
							@if (string.IsNullOrEmpty(flagCode))
							{
								<span><img src="/images/Flags/24x24/00.png" /></span>
							}
							else
							{
								<span class="leaderboard-tooltip" data-toggle="tooltip" title="@UserUtils.CountryNames[flagCode]"><img src="/images/Flags/24x24/@(flagCode).png" /></span>
							}
						</div>
						<div class="text-left leaderboard-username">
							@{
								<span class="@dagger">@(player?.Username ?? "[Player not found]")</span>

								if (titles != null)
								{
									foreach (string title in titles)
									{
										<span class="leaderboard-tooltip" data-toggle="tooltip" title="@title"><img src="/images/Icons/@(UserUtils.TitleImages[title]).png" /></span>
									}
								}
								if (isUnanonymousDonator)
								{
									string title = "Donator";
									<span class="leaderboard-tooltip" data-toggle="tooltip" title="@title"><img src="/images/Icons/@(UserUtils.TitleImages[title]).png" /></span>
								}
							}
						</div>
						<div class="text-right @dagger">@(entry.Time.FormatTimeInteger())</div>
						<div class="hidden-xs text-right">@entry.Kills.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="hidden-xs text-right">@entry.Gems.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="hidden-xs text-right">
							<span data-toggle="tooltip" title="@daggers" class="leaderboard-tooltip">@accuracy</span>
						</div>
						@if (Model.Leaderboard.Category != CustomLeaderboardCategory.Challenge)
						{
							<div class="hidden-xs hidden-sm hidden-md text-center" style="@deathStyle">@(death?.Name ?? "Invalid")</div>
							<div class="hidden-xs hidden-sm hidden-md text-right">@entry.EnemiesAlive.ToString(FormatUtils.LeaderboardIntFormat)</div>
						}
						<div class="hidden-xs hidden-sm hidden-md text-right">@entry.Homing.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@level2</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@level3</div>
						<div class="hidden-xs hidden-sm hidden-md text-right">@level4</div>
						<div class="hidden-xs hidden-sm hidden-md text-right submit-date">@submitDate</div>
					</div>
					<div class="leaderboard-expand flex-container" id="@(rank)-expand">
						<div class="visible-xs">
							<div class="text-left">Kills</div>
							<div class="text-right">@entry.Kills.ToString(FormatUtils.LeaderboardIntFormat)</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">Gems</div>
							<div class="text-right">@entry.Gems.ToString(FormatUtils.LeaderboardIntFormat)</div>
						</div>
						<div class="visible-xs">
							<div class="text-left">Accuracy</div>
							<div class="text-right">
								<span data-toggle="tooltip" title="@daggers" class="leaderboard-tooltip">@accuracy</span>
							</div>
						</div>
						@if (Model.Leaderboard.Category != CustomLeaderboardCategory.Challenge)
						{
							<div class="visible-xs visible-sm visible-md">
								<div class="text-left">Death type</div>
								<div class="text-right" style="@deathStyle">@(death?.Name ?? "Invalid")</div>
							</div>
							<div class="visible-xs visible-sm visible-md">
								<div class="text-left">Enemies alive</div>
								<div class="text-right">@entry.EnemiesAlive.ToString(FormatUtils.LeaderboardIntFormat)</div>
							</div>
						}
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Homing</div>
							<div class="text-right">@entry.Homing.ToString(FormatUtils.LeaderboardIntFormat)</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Level 2</div>
							<div class="text-right">@level2</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Level 3</div>
							<div class="text-right">@level3</div>
						</div>
						<div class="visible-xs visible-sm visible-md">
							<div class="text-left">Level 4</div>
							<div class="text-right">@level4</div>
						</div>
						<div class="visible-xs visible-sm visible-md submit-date">
							<div class="text-left">Submit date</div>
							<div class="text-right">@submitDate</div>
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>