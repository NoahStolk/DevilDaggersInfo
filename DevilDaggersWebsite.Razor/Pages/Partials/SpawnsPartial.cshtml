@model SpawnsPartialModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment environment
@inject ApplicationDbContext dbContext
@using DevilDaggersCore.Game
@using DevilDaggersCore.Spawnsets
@using DevilDaggersWebsite.Entities
@using DevilDaggersWebsite.Razor.Models
@using DevilDaggersWebsite.Razor.Utils
@using DevilDaggersWebsite.Utils
@using Microsoft.EntityFrameworkCore
@using System.IO
@{
	var sf = dbContext.SpawnsetFiles.AsNoTracking().Select(sf => new { sf.Name, sf.MaxDisplayWaves }).FirstOrDefault(sf => sf.Name == Model.SpawnsetName);
	if (sf == null || !Spawnset.TryParse(File.ReadAllBytes(System.IO.Path.Combine(environment.WebRootPath, "spawnsets", Model.SpawnsetName)), out Spawnset spawnset))
	{
		return;
	}

	if (spawnset.Spawns.Count == 0 || spawnset.Spawns.All(s => s.Value.Enemy == null))
	{
		<p>This spawnset has no spawns.</p>
		return;
	}

	GameVersion gameVersion = GameVersion.V31;
	if (Model.IsWikiPage)
	{
		gameVersion = sf.Name == "V1" ? GameVersion.V1 : sf.Name == "V2" ? GameVersion.V2 : GameVersion.V31;
	}

	int maxWaves = sf.MaxDisplayWaves ?? SpawnsetUtils.DefaultMaxWaves;
	string wavesQuery = httpContextAccessor.HttpContext!.Request.Query["waves"];
	if (int.TryParse(wavesQuery, out int parsed) && parsed > 0)
	{
		maxWaves = parsed;
	}

	int endLoopIndex = spawnset.GetEndLoopStartIndex();
	List<Spawn> preLoopSpawns, loopSpawns;
	if (spawnset.GameMode == GameMode.TimeAttack)
	{
		preLoopSpawns = spawnset.Spawns.Values.ToList();
		loopSpawns = new();
	}
	else
	{
		preLoopSpawns = spawnset.Spawns.Values.SkipLast(spawnset.Spawns.Count - endLoopIndex).ToList();
		loopSpawns = spawnset.Spawns.Values.Skip(endLoopIndex).ToList();
	}

	bool hasEndLoop = loopSpawns.Any(s => s.Enemy != null);

	static Upgrade GetHand(byte hand)
	{
		return GameInfo.GetUpgrades(GameVersion.V31).FirstOrDefault(u => u.Name == $"Level {hand}") ?? GameInfo.V31Level1;
	}

	Upgrade? hand = GetHand(spawnset.Hand);

	(byte effectiveHand, int effectiveGemsOrHoming, byte handModel) = spawnset.GetEffectivePlayerSettings();

	<div class="flex-container flex-column section-container spawns-main-container">
		@if (!Model.IsWikiPage)
		{
			<div class="spawns-header-container">
				<div class="flex-container flex-space-evenly spawns-flex-container">
					<div>Hand</div>
					<div>Additional gems</div>
					<div>Timer start</div>
				</div>
				<div class="flex-container flex-space-evenly spawns-flex-container">
					<div>@hand.GetLayoutAnchor()</div>
					<div>@spawnset.AdditionalGems</div>
					<div>@spawnset.TimerStart.ToString(FormatUtils.SpawnTimeFormat)</div>
				</div>
			</div>
			<div class="spawns-header-container">
				<div class="flex-container flex-space-evenly spawns-flex-container">
					<div>Effective hand</div>
					<div>Effective @(effectiveHand > 2 ? "homing" : "gems")</div>
					@if (effectiveHand != handModel)
					{
						<div>Effective hand model</div>
					}
					else
					{
						<div></div>
					}
				</div>
				<div class="flex-container flex-space-evenly spawns-flex-container">
					<div>@GetHand(effectiveHand).GetLayoutAnchor()</div>
					<div>@effectiveGemsOrHoming</div>
					@if (effectiveHand != handModel)
					{
						<div>@GetHand(handModel).GetLayoutAnchor()</div>
					}
					else
					{
						<div></div>
					}
				</div>
			</div>
		}

		@if (spawnset.HasSpawns())
		{
			<div class="spawns-container">
				<div class="flex-container spawns-flex-container @(hasEndLoop ? "loop" : "no-loop")">
					@if (hasEndLoop)
					{
						<div>Section</div>
					}
					<div class="text-right">Time</div>
					<div>Enemy</div>
					<div class="text-right">Gems (no farm)</div>
					<div class="text-right">Total gems</div>
				</div>

				@{
					double totalSeconds = spawnset.TimerStart;
					int totalGems = spawnset.Hand switch
					{
						2 => 10,
						3 => 70,
						4 => 220,
						_ => 0,
					};
					totalGems += Math.Clamp(spawnset.AdditionalGems, 0, 1000000);

					foreach (Spawn spawn in preLoopSpawns)
					{
						totalSeconds += spawn.Delay;
						if (spawn.Enemy != null)
						{
							totalGems += spawn.Enemy.NoFarmGems;

							<div class="flex-container spawns-flex-container @(hasEndLoop ? "loop" : "no-loop")">
								@if (hasEndLoop)
								{
									<div></div>
								}
								<div class="text-right">@totalSeconds.ToString(FormatUtils.SpawnTimeFormat)</div>
								<div>@(spawn.Enemy.GetLayoutAnchor(false, gameVersion))</div>
								<div class="text-right">@spawn.Enemy.NoFarmGems</div>
								<div class="text-right">@totalGems</div>
							</div>
						}
					}

					if (loopSpawns.Any(s => s.Enemy != null))
					{
						int spawns = spawnset.Spawns.Count(s => s.Value.Enemy != null);

						double endGameSecond = totalSeconds;
						for (int i = 0; i < maxWaves; i++)
						{
							if (spawns > SpawnsetUtils.MaxSpawns)
							{
								break;
							}

							<div class="text-left end-wave-separator"></div>
							double enemyTimer = 0;
							double delay = 0;
							bool firstSpawnDone = false;
							foreach (Spawn spawn in loopSpawns)
							{
								if (spawn.Enemy != null)
								{
									spawns++;
								}

								delay += spawn.Delay;
								while (enemyTimer < delay)
								{
									endGameSecond += 1f / 60f;
									enemyTimer += (1f / 60f) + (1f / 60f / 8f * i);
								}

								if (spawn.Enemy != null)
								{
									Enemy finalEnemy = spawn.Enemy;
									if (i % 3 == 2 && gameVersion >= GameVersion.V3 && finalEnemy.SpawnsetType == GameInfo.V3Gigapede.SpawnsetType)
									{
										// Change the third Gigapede into a Ghostpede.
										finalEnemy = GameInfo.V3Ghostpede;
									}

									int gems = finalEnemy.NoFarmGems;
									totalGems += gems;

									<div class="flex-container spawns-flex-container @(hasEndLoop ? "loop" : "no-loop")">
										@if (hasEndLoop)
										{
											<div>@(!firstSpawnDone ? $"Wave {i + 1}" : string.Empty)</div>
										}
										<div class="text-right">@((Math.Floor(endGameSecond * 60) / 60).ToString(FormatUtils.SpawnTimeFormat))</div>
										<div>@(finalEnemy.GetLayoutAnchor(false, gameVersion))</div>
										<div class="text-right">@gems</div>
										<div class="text-right">@totalGems</div>
									</div>

									firstSpawnDone = true;
								}
							}
						}
					}

					<div class="spawns-end">@(hasEndLoop ? "Goes on eternally..." : "End of spawnset")</div>
				}
			</div>
		}
	</div>
}
