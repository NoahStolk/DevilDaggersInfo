@page
@using DevilDaggersCore.Game
@using DevilDaggersCore.Mods
@using DevilDaggersWebsite.Caches.ModArchive;
@using DevilDaggersWebsite.Entities
@using DevilDaggersWebsite.Razor.Utils
@model ModModel
@{
	if (Model.AssetMod == null)
		return;

	ViewData["Title"] = $"Mod - {Model.AssetMod.Name}";

	bool hasTrailer = !string.IsNullOrWhiteSpace(Model.AssetMod.TrailerUrl);
	bool hasScreenshots = Model.Images.Count > 0;
}

<header>
	<h1 class="prevent-break-out">@ViewData["Title"]</h1>
</header>

<main role="main">
	<div class="section-container">
		<div class="header-container">
			<div class="row">
				<div class="col-xs-6">@(Model.AssetMod.PlayerAssetMods.Count == 1 ? "Author" : "Authors")</div>
				<div class="col-xs-6">
					@for (int i = 0; i < Model.AssetMod.PlayerAssetMods.Count; i++)
					{
						PlayerAssetMod playerAssetMod = Model.AssetMod.PlayerAssetMods[i];
						<a asp-page="/Mods" asp-route-SearchAuthor="@playerAssetMod.Player.PlayerName">@playerAssetMod.Player.PlayerName</a>
						if (i < Model.AssetMod.PlayerAssetMods.Count - 1)
						{
							<span>&amp;</span>
						}
					}
				</div>
			</div>
			<div class="row">
				<div class="col-xs-6">Last updated</div>
				<div class="col-xs-6">@(Model.AssetMod.LastUpdated == DateTime.MinValue ? "Unknown" : Model.AssetMod.LastUpdated.ToString("dd MMM yyyy"))</div>
			</div>
			<div class="row">
				<div class="col-xs-6">Description</div>
				@if (!string.IsNullOrWhiteSpace(Model.AssetMod.HtmlDescription))
				{
					<div class="col-xs-6 mod-description">
						@RazorUtils.GetLayout(Model.AssetMod.HtmlDescription, GameVersion.V31)
					</div>
				}
				else
				{
					<div class="col-xs-6">
						@RazorUtils.NAString
					</div>
				}
			</div>
			@if (Model.IsHostedOnDdInfo)
			{
				<div class="row">
					<div class="col-xs-6">Prohibited assets</div>
					<div class="col-xs-6">@(Model.ContainsProhibitedAssets ? "Yes" : "No")</div>
				</div>
				<div class="row">
					<div class="col-xs-6">File size</div>
					<div class="col-xs-6">@await Html.PartialAsync("Partials/FileSizePartial", Model.ArchiveData.FileSize)</div>
				</div>
				<div class="row">
					<div class="col-xs-6">File size (extracted)</div>
					<div class="col-xs-6">@await Html.PartialAsync("Partials/FileSizePartial", Model.ArchiveData.FileSizeExtracted)</div>
				</div>
			}
		</div>
	</div>
	<div class="section-container">
		<div class="header-container">
			<div class="row">
				@if (Model.IsHostedOnDdInfo)
				{
					<div class="col-xs-6"><a href="api/mods/@Model.AssetMod.Name/file">Download mod</a></div>
				}
				else
				{
					<div class="col-xs-6"><a target='_blank' href="@Model.AssetMod.Url">Download mod (external)</a></div>
				}
			</div>
		</div>
	</div>

	@if (hasTrailer || hasScreenshots)
	{
		@if (hasTrailer)
		{
			@if (hasScreenshots)
			{
				<h2>Trailer &amp; Screenshots</h2>
			}
			else
			{
				<h2>Trailer</h2>
			}
		}
		else
		{
			<h2>Screenshots</h2>
		}
		<div class="row">
			@if (hasTrailer)
			{
				<div class="col-md-12 col-lg-6">
					<div class="iframe-wrapper">
						<img class="ratio" src="~/images/Misc/16x9.png" />
						<iframe src="@Model.AssetMod.TrailerUrl" title="@Model.AssetMod.Name" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
					</div>
				</div>
			}
			@if (hasScreenshots)
			{
				<div class="col-md-12 col-lg-6">
					@if (Model.Images.Count == 1)
					{
						<img class="img-responsive" src="/mod-screenshots/@Model.AssetMod.Name/@Model.Images[0]" />
					}
					else
					{
						<div id="image-carousel" class="carousel slide" data-ride="carousel">
							<ol class="carousel-indicators">
								@for (int i = 0; i < Model.Images.Count; i++)
								{
									<li data-target="#image-carousel" data-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
								}
							</ol>

							<div class="carousel-inner">
								@for (int i = 0; i < Model.Images.Count; i++)
								{
									<div class="item@(i == 0 ? " active" : "")">
										<img class="carousel-img" src="/mod-screenshots/@Model.AssetMod.Name/@Model.Images[i]" />
									</div>
								}
							</div>

							<a class="left carousel-control" href="#image-carousel" data-slide="prev">
								<span class="glyphicon glyphicon-chevron-left"></span>
								<span class="sr-only">Previous</span>
							</a>
							<a class="right carousel-control" href="#image-carousel" data-slide="next">
								<span class="glyphicon glyphicon-chevron-right"></span>
								<span class="sr-only">Next</span>
							</a>
						</div>
					}
				</div>
			}
		</div>
	}

	@if (Model.ArchiveData.Binaries.Count > 0)
	{
		<h2>Binaries</h2>
		<div class="binary-summary-container">
			<div class="row">
				<div class="col-xs-4 col-sm-2 col-md-2 text-bold">Type</div>
				<div class="col-xs-8 col-sm-6 col-md-5 text-bold">Name</div>
				<div class="hidden-xs col-sm-2 col-md-2 text-bold text-right">Size (extracted)</div>
				<div class="hidden-xs col-sm-2 col-md-1 text-bold text-right">Assets</div>
				<div class="hidden-xs hidden-sm col-md-2 text-bold text-right">Prohibited assets</div>
			</div>
			@foreach (ModBinaryCacheData binary in Model.ArchiveData.Binaries.OrderBy(b => b.Name))
			{
				int prohibited = binary.Chunks.Count(mad => mad.IsProhibited);
				<div class="row">
					<div class="col-xs-4 col-sm-2 col-md-2 mod-binary-type">@binary.ModBinaryType</div>
					<div class="col-xs-8 col-sm-6 col-md-5 prevent-break-out">@binary.Name</div>
					<div class="hidden-xs col-sm-2 col-md-2 text-right">@await Html.PartialAsync("Partials/FileSizePartial", binary.Size)</div>
					<div class="hidden-xs col-sm-2 col-md-1 text-right">@binary.Chunks.Count</div>
					@if (prohibited == 0)
					{
						<div class="hidden-xs hidden-sm col-md-2 text-right">@RazorUtils.NAString</div>
					}
					else
					{
						<div class="hidden-xs hidden-sm col-md-2 text-right prohibited">@prohibited</div>
					}
				</div>
			}
		</div>

		<h2>Assets</h2>
		@foreach (ModBinaryCacheData binary in Model.ArchiveData.Binaries.OrderBy(b => b.Name))
		{
			<h3 class="prevent-break-out">@binary.Name</h3>
			<div class="binary-container">
				<div class="row">
					@foreach (IGrouping<AssetType, ModChunkCacheData> assetGroup in binary.Chunks.GroupBy(mad => mad.AssetType))
					{
						<div class="col-sm-12 col-md-6 col-lg-3 asset-container">
							<div class="asset-title-container">@assetGroup.Key assets</div>
							<div class="asset-list">
								@foreach (ModChunkCacheData asset in assetGroup)
								{
									<div class="row">
										<div class="@(asset.IsProhibited ? "prohibited" : string.Empty) col-xs-6">
											@asset.Name
										</div>
										<div class="col-xs-6 text-right">
											@await Html.PartialAsync("Partials/FileSizePartial", (long)asset.Size)
										</div>
									</div>
								}
							</div>
						</div>
					}
					@if (binary.LoudnessAssets?.Count > 0)
					{
						<div class="col-sm-12 col-md-6 col-lg-3 asset-container">
							<div class="asset-title-container">
								Modified loudness values
							</div>
							<div class="asset-list">
								@foreach ((string Name, bool IsProhibited) in binary.LoudnessAssets)
								{
									<div class="@(IsProhibited ? "prohibited" : string.Empty)">@Name</div>
								}
							</div>
						</div>
					}
				</div>
			</div>
		}
	}
</main>

@section Styles {
	<link rel='stylesheet' href='~/styles/mod.css' asp-append-version="true" />
}
