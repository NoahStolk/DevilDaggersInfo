@page
@using DevilDaggersCore.Utils
@using DevilDaggersWebsite.Razor.Utils
@model DevilDaggersWebsite.Razor.Pages.Leaderboard.PlayerModel
@{
	string? username = Model.Entry?.Username;
	ViewData["Title"] = string.IsNullOrEmpty(username) ? "Player" : username;
	string daggerCssName = Model.Dagger?.Name.ToLower() ?? string.Empty;
	string deathStyle = $"color: #{Model.Death?.ColorCode ?? "444"}";
}

<header>
	<h1>@ViewData["Title"]</h1>
</header>

<main role="main">
	<a asp-page="/Leaderboard/Index" asp-route-rank="@(((Model.Entry?.Rank - 1) / 100 * 100 + 1) ?? 0)">Back to leaderboard</a>
	@if (Model.Entry == null)
	{
		<p>Failed to retrieve player with ID @Model.PlayerId.</p>
	}
	else
	{
		<div class="flex-container player-section-container">
			<div class="flex-container player-section">
				<div class="leaderboard-data-container">
					<div class="leaderboard-data-header">Personal Best</div>
					<div class="flex-container leaderboard-data">
						<div>Time</div>
						<div class="text-right @daggerCssName">@Model.Entry.Time.FormatTimeInteger(false)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Kills</div>
						<div class="text-right">@Model.Entry.Kills.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Gems</div>
						<div class="text-right">@Model.Entry.Gems.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Accuracy</div>
						<div class="text-right">@Model.Entry.Accuracy.ToString(FormatUtils.AccuracyFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Daggers hit</div>
						<div class="text-right">@Model.Entry.DaggersHit.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Daggers fired</div>
						<div class="text-right">@Model.Entry.DaggersFired.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Death type</div>
						<div class="text-right" style="@deathStyle">@(Model.Death?.Name)</div>
					</div>
				</div>
			</div>
			<div class="flex-container player-section">
				<div class="leaderboard-data-container">
					<div class="leaderboard-data-header">Total Statistics</div>
					<div class="flex-container leaderboard-data">
						<div>Total time</div>
						<div class="text-right">@Model.Entry.TimeTotal.FormatTimeInteger(true)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Total kills</div>
						<div class="text-right">@Model.Entry.KillsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Total gems</div>
						<div class="text-right">@Model.Entry.GemsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Total accuracy</div>
						<div class="text-right">@Model.Entry.AccuracyTotal.ToString(FormatUtils.AccuracyFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Total daggers hit</div>
						<div class="text-right">@Model.Entry.DaggersHitTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Total daggers fired</div>
						<div class="text-right">@Model.Entry.DaggersFiredTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Total deaths</div>
						<div class="text-right">@Model.Entry.DeathsTotal.ToString(FormatUtils.LeaderboardIntFormat)</div>
					</div>
				</div>
			</div>
			@if (Model.Player?.Dpi.HasValue == true)
			{
				<div class="flex-container player-section">
					<div class="leaderboard-data-container">
						<div class="leaderboard-data-header">Settings</div>
						<div class="flex-container leaderboard-data">
							<div>eDPI</div>
							<div class="text-right">@Model.Player?.Edpi?.ToString(FormatUtils.MouseSensitivityFormat)</div>
						</div>
						<div class="flex-container leaderboard-data">
							<div>DPI</div>
							<div class="text-right">@Model.Player?.Dpi</div>
						</div>
						<div class="flex-container leaderboard-data">
							<div>In-game sens</div>
							<div class="text-right">@Model.Player?.InGameSens?.ToString(FormatUtils.MouseSensitivityFormat)</div>
						</div>
						<div class="flex-container leaderboard-data">
							<div>FOV</div>
							<div class="text-right">@Model.Player?.Fov</div>
						</div>
						<div class="flex-container leaderboard-data">
							<div>Gamma</div>
							<div class="text-right">@Model.Player?.Gamma</div>
						</div>
						<div class="flex-container leaderboard-data">
							<div>Hand orientation</div>
							<div class="text-right">@Model.Player?.RightHandedString</div>
						</div>
						<div class="flex-container leaderboard-data">
							<div>Hand flash</div>
							<div class="text-right">@Model.Player?.FlashEnabledString</div>
						</div>
						<div class="flex-container leaderboard-data">
							<div>Legacy audio</div>
							<div class="text-right">@Model.Player?.UsesLegacyAudioString</div>
						</div>
					</div>
				</div>
			}
			<div class="flex-container player-section">
				<div class="leaderboard-data-container">
					<div class="leaderboard-data-header">Leaderboard</div>
					<div class="flex-container leaderboard-data">
						<div>Current rank</div>
						<div class="text-right">@Model.Entry.Rank</div>
					</div>
					<div class="flex-container leaderboard-data">
						<div>Flag</div>
						<div class="text-right">
							@if (!string.IsNullOrWhiteSpace(Model.Player?.CountryCode))
							{
								<img src="/images/Flags/24x24/@(Model.Player.CountryCode).png" /> @Model.CountryName
							}
						</div>
					</div>
				</div>
			</div>
			@if (Model.BestRankRecorded.HasValue)
			{
				<div class="flex-container player-section">
					<div class="leaderboard-data-container">
						<div class="leaderboard-data-header">Leaderboard History</div>
						<div class="flex-container leaderboard-data">
							<div>Best rank recorded</div>
							<div class="text-right">@Model.BestRankRecorded</div>
						</div>
						<div class="flex-container leaderboard-data equal">
							<div>Past usernames</div>
							@if (Model.UsernameAliases.Count > 0)
							{
								<div>
									<ul class="player-section-list">
										@foreach (string alias in Model.UsernameAliases)
										{
											<li>@alias</li>
										}
									</ul>
								</div>
							}
							else
							{
								<div class="text-right">@RazorUtils.NAString</div>
							}
						</div>
						@*World records?*@
					</div>
				</div>
			}
			<div class="flex-container player-section">
				<div class="leaderboard-data-container">
					<div class="leaderboard-data-header">Custom Leaderboard Statistics</div>
					@{
						foreach (KeyValuePair<string, int> kvp in Model.CustomDaggerCounts)
						{
							<div class="flex-container leaderboard-data">
								<div>@kvp.Key.ToUpperFirst() daggers</div>
								<div class="text-right @kvp.Key">@kvp.Value</div>
							</div>
						}
					}
				</div>
			</div>
			<div class="flex-container player-section">
				<div class="leaderboard-data-container">
					<div class="leaderboard-data-header">Spawnsets &amp; Mods</div>
					<div class="flex-container leaderboard-data equal">
						<div>Spawnsets</div>
						@if (Model.SpawnsetNames.Count > 0)
						{
							<div>
								<ul class="player-section-list">
									@foreach (string spawnsetName in Model.SpawnsetNames)
									{
										<li><a asp-page="/Spawnset" asp-route-spawnset="@spawnsetName">@spawnsetName</a></li>
									}
								</ul>
							</div>
						}
						else
						{
							<div class="text-right">@RazorUtils.NAString</div>
						}
					</div>
					<div class="flex-container leaderboard-data equal">
						<div>Mods</div>
						@if (Model.ModNames.Count > 0)
						{
							<div>
								<ul class="player-section-list">
									@foreach (string modName in Model.ModNames)
									{
										<li><a asp-page="/Mod" asp-route-spawnset="@modName">@modName</a></li>
									}
								</ul>
							</div>
						}
						else
						{
							<div class="text-right">@RazorUtils.NAString</div>
						}
					</div>
				</div>
			</div>
		</div>

		@if (Model.HasValidTop100Graph)
		{
			<h2>Top 100 progression</h2>
			<p>
				Note that the graph data is based entirely on the <a asp-page="/Leaderboard/History">Leaderboard History</a>, and might therefore be incomplete.
			</p>
			<p>
				Also note that the graph data is only based on a player's highscores; the rank and username do not update until the next top 100 highscore.
			</p>

			<div class="chart" id="user-progression-chart">
				<table class="highlighter" id="user-progression-highlighter">
					<tr><td>Date</td><td id="h-date"></td></tr>
					<tr><td>Rank</td><td id="h-rank"></td></tr>
					<tr><td>Time</td><td id="h-time"></td></tr>
					<tr><td>Username</td><td id="h-username"></td></tr>
					<tr><td>Gems</td><td id="h-gems"></td></tr>
					<tr><td>Kills</td><td id="h-kills"></td></tr>
					<tr><td>Accuracy</td><td id="h-accuracy"></td></tr>
					<tr><td>Death type</td><td id="h-death-type"></td></tr>
				</table>
			</div>

			<h2>Activity</h2>
			<p>
				This data is only updated when the player is in top 100.
			</p>

			<div class="chart" id="user-activity-chart">
				<table class="highlighter" id="user-activity-highlighter">
					<tr><td>Period</td><td id="h-activity-date"></td></tr>
					<tr><td>Approximate deaths per day</td><td id="h-activity-deaths-per-day"></td></tr>
					<tr><td>Total deaths</td><td id="h-activity-deaths"></td></tr>
				</table>
			</div>
		}
	}
</main>

@section Scripts {
	<script defer src='~/plugins/jqPlot/jquery.jqplot.min.js' asp-append-version='true'></script>
	<script defer src='~/plugins/jqPlot/jqplot.dateAxisRenderer.js' asp-append-version='true'></script>
	<script defer src='~/plugins/jqPlot/jqplot.canvasTextRenderer.js' asp-append-version='true'></script>
	<script defer src='~/plugins/jqPlot/jqplot.canvasAxisLabelRenderer.js' asp-append-version='true'></script>
	<script defer src='~/plugins/jqPlot/jqplot.canvasAxisTickRenderer.js' asp-append-version='true'></script>
	<script defer src='~/plugins/jqPlot/jqplot.highlighter.js' asp-append-version='true'></script>
	<script defer src='~/plugins/jqPlot/jqplot.canvasOverlay.js' asp-append-version='true'></script>
	<script defer src='~/scripts/charts/chart.js' asp-append-version='true'></script>
	<script defer src='~/scripts/charts/history/chart-line.js' asp-append-version='true'></script>
	<script defer src='~/scripts/charts/history/user-progression.js' asp-append-version='true'></script>
	<script defer src='~/scripts/charts/history/user-activity.js' asp-append-version='true'></script>
}

@section Styles {
	<link rel='stylesheet' href='~/styles/leaderboard.css' />
	<link rel='stylesheet' href='~/styles/leaderboard-player.css' />

	<link rel='stylesheet' href='~/plugins/jqPlot/jquery.jqplot.min.css' />
	<link rel='stylesheet' href='~/styles/chart.css' />
}
