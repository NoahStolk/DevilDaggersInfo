@typeparam TGetDto
@typeparam TKey
@inject AdminApiHttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations
@using System.Reflection

<h1 class="text-red text-2xl">@Title</h1>

<ResultBar Title="Failed to retrieve overview" @bind-Message="@_errorMessage" />

@if (_page == null)
{
	<Loading />
}
else
{
	<Deletion TKey="TKey" AfterDelete="Fetch" ApiRoute="@ApiRoute" @ref="_deletion" />

	<a class="inline-block bg-gray-900 hover:bg-red w-20 h-6 text-color-text text-center" href="@($"{NavigationManager.Uri}/add")">Add new</a>
	<button class="bg-gray-900 hover:bg-red w-8 h-6 text-color-text" @onclick="() => ChangePageIndex(0)">|&lt;</button>
	<button class="bg-gray-900 hover:bg-red w-8 h-6 text-color-text" @onclick="() => ChangePageIndex(_pageIndex - 1)">&lt;</button>
	<button class="bg-gray-900 hover:bg-red w-8 h-6 text-color-text" @onclick="() => ChangePageIndex(_pageIndex + 1)">&gt;</button>
	<button class="bg-gray-900 hover:bg-red w-8 h-6 text-color-text" @onclick="() => ChangePageIndex(TotalPages - 1)">&gt;|</button>
	<Select @onchange="ChangePageSize" class="py-0 h-6 text-white bg-gray-900">
		@foreach (int i in AdminPagingConstants.PageSizeOptions)
		{
			if (i == AdminPagingConstants.PageSizeDefault)
			{
				<option class="text-white bg-gray-900" value="@i" selected>@i</option>
			}
			else
			{
				<option class="text-white bg-gray-900" value="@i">@i</option>
			}
		}
	</Select>
	<label>Page @(_pageIndex + 1) of @TotalPages (@(_pageIndex * _pageSize) - @Math.Min(_page.TotalResults, (_pageIndex + 1) * _pageSize) of @_page.TotalResults)</label>

	<div>
		<div class="grid grid-cols-@GridConfiguration">
			@foreach (PropertyInfo pi in _properties)
			{
				string name = (pi.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute)?.Name ?? pi.Name;
				<div><a class="text-color-link hover:text-color-link-hover" href="" @onclick="() => Sort(pi.Name)" @onclick:preventDefault>@name</a></div>
			}
			<div></div>
			<div></div>
		</div>
		<div>
			@{
				int j = 0;
				foreach (TGetDto result in _page.Results)
				{
					<div class="grid grid-cols-@GridConfiguration @(j++ % 2 == 0 ? "bg-gray0B" : string.Empty)">
						@foreach (PropertyInfo pi in _properties)
						{
							<div>@ReflectionUtils.GetDtoPropertyDisplayValue(pi, result)</div>
						}
						<div><a class="text-color-link hover:text-color-link-hover" href="@($"{NavigationManager.Uri}/edit/{result.Id}")">Edit</a></div>
						<div><a class="text-color-link hover:text-color-link-hover" href="" @onclick="() => _deletion?.Set(result.Id)" @onclick:preventDefault>Delete</a></div>
					</div>
				}
			}
		</div>
	</div>
}

@code
{
	[Parameter] public string Title { get; set; } = null!;
	[Parameter] public string ApiRoute { get; set; } = null!;
	[Parameter] public string GridConfiguration { get; set; } = null!;

	private int TotalPages => _page == null ? 0 : (_page.TotalResults - 1) / _pageSize + 1;

	private int _pageIndex;
	private int _pageSize = AdminPagingConstants.PageSizeDefault;
	private string? _sortBy;
	private bool _ascending;

	private Page<TGetDto>? _page;
	private string? _errorMessage;
	private PropertyInfo[] _properties = ReflectionUtils.GetDtoDisplayPropertyInfos<TGetDto>();
	private Dictionary<string, bool> _sortings = null!;

	private Deletion<TKey>? _deletion;

	protected override async Task OnInitializedAsync()
	{
		_sortings = _properties.ToDictionary(pi => pi.Name, _ => true);
		await Fetch();
	}

	private async Task ChangePageIndex(int pageIndex)
	{
		_pageIndex = Math.Clamp(pageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task ChangePageSize(ChangeEventArgs e)
	{
		_ = int.TryParse(e.Value?.ToString(), out _pageSize);
		_pageIndex = Math.Clamp(_pageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task Sort(string propertyName)
	{
		_sortBy = propertyName;
		_sortings[propertyName] = !_sortings[propertyName];
		_ascending = _sortings[propertyName];
		await Fetch();
	}

	private async Task Fetch()
	{
		try
		{
			_page = await Http.Client.GetFromJsonAsync<Page<TGetDto>>($"{ApiRoute}?pageIndex={_pageIndex}&pageSize={_pageSize}&sortBy={_sortBy}&ascending={_ascending}");
			_errorMessage = null;
			StateHasChanged();
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_errorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_errorMessage = "An error occurred while sending the request.";
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
