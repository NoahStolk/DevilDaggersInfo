@typeparam TGetDto
@typeparam TKey
@inject AdminApiHttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations
@using System.Reflection

<h1 class="text-red text-2xl">@Title</h1>

<ResultBar Title="Failed to retrieve overview" Type="danger" @bind-Message="@_errorMessage" />

@if (_page == null)
{
	<Loading />
}
else
{
	<Deletion TKey="TKey" AfterDelete="Fetch" ApiRoute="@ApiRoute" @ref="_deletion" />

	<a class="btn btn-primary" href="@($"{NavigationManager.Uri}/add")">Add new</a>
	<button class="btn btn-light" @onclick="() => ChangePageIndex(0)">|&lt;</button>
	<button class="btn btn-light" @onclick="() => ChangePageIndex(_pageIndex - 1)">&lt;</button>
	<button class="btn btn-light" @onclick="() => ChangePageIndex(_pageIndex + 1)">&gt;</button>
	<button class="btn btn-light" @onclick="() => ChangePageIndex(TotalPages - 1)">&gt;|</button>
	<Select @onchange="ChangePageSize">
		@foreach (int i in new[] { 5, 10, 15, 25, 50 })
		{
			if (i == 25)
			{
				<option value="@i" selected>@i</option>
			}
			else
			{
				<option value="@i">@i</option>
			}
		}
	</Select>
	<label>Page @(_pageIndex + 1) of @TotalPages (@(_pageIndex * _pageSize) - @Math.Min(_page.TotalResults, (_pageIndex + 1) * _pageSize) of @_page.TotalResults)</label>

	<table class="table">
		<thead>
			<tr>
				@foreach (PropertyInfo pi in _properties)
				{
					string name = (pi.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute)?.Name ?? pi.Name;
					<th><a class="text-colorlink hover:text-colorlinkhover" href="" @onclick="() => Sort(pi.Name)" @onclick:preventDefault>@name</a></th>
				}
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (TGetDto result in _page.Results)
			{
				<tr>
					@foreach (PropertyInfo pi in _properties)
					{
						<td>@ReflectionUtils.GetDtoPropertyDisplayValue(pi, result)</td>
					}
					<td><a class="text-colorlink hover:text-colorlinkhover" href="@($"{NavigationManager.Uri}/edit/{result.Id}")">Edit</a></td>
					<td><a class="text-colorlink hover:text-colorlinkhover" href="" @onclick="() => _deletion?.Set(result.Id)" @onclick:preventDefault>Delete</a></td>
				</tr>
			}
		</tbody>
	</table>
}

@code
{
	[Parameter] public string Title { get; set; } = null!;
	[Parameter] public string ApiRoute { get; set; } = null!;

	private int TotalPages => _page == null ? 0 : (_page.TotalResults - 1) / _pageSize + 1;

	private int _pageIndex;
	private int _pageSize = 25;
	private string? _sortBy;
	private bool _ascending;

	private Page<TGetDto>? _page;
	private string? _errorMessage;
	private PropertyInfo[] _properties = ReflectionUtils.GetDtoDisplayPropertyInfos<TGetDto>();
	private Dictionary<string, bool> _sortings = null!;

	private Deletion<TKey>? _deletion;

	protected override async Task OnInitializedAsync()
	{
		_sortings = _properties.ToDictionary(pi => pi.Name, _ => true);
		await Fetch();
	}

	private async Task ChangePageIndex(int pageIndex)
	{
		_pageIndex = Math.Clamp(pageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task ChangePageSize(ChangeEventArgs e)
	{
		_ = int.TryParse(e.Value?.ToString(), out _pageSize);
		_pageIndex = Math.Clamp(_pageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task Sort(string propertyName)
	{
		_sortBy = propertyName;
		_sortings[propertyName] = !_sortings[propertyName];
		_ascending = _sortings[propertyName];
		await Fetch();
	}

	private async Task Fetch()
	{
		try
		{
			_page = await Http.Client.GetFromJsonAsync<Page<TGetDto>>($"{ApiRoute}?pageIndex={_pageIndex}&pageSize={_pageSize}&sortBy={_sortBy}&ascending={_ascending}");
			_errorMessage = null;
			StateHasChanged();
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_errorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_errorMessage = "An error occurred while sending the request.";
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
