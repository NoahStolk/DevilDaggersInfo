@typeparam TGetDto
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net
@using System.Reflection

<h1>@Title</h1>

@if (results == null)
{
	<p><em>@_uninitializedState</em></p>
}
else
{
	<p>
		<a href="@($"{NavigationManager.Uri}/add")">Add</a>
	</p>

	if (_idToDelete.HasValue)
	{
		<p>Are you sure you want to delete entity with ID @_idToDelete?</p>
		if (_deleteResult != null)
		{
			<p class="@_deleteResult.CssClass">@_deleteResult.Response</p>
		}
		<button class="btn btn-danger" @onclick="ConfirmDelete">Delete permanently</button>
		<button class="btn btn-primary" @onclick="() => _idToDelete = null">Cancel</button>
	}

	<table class="table">
		<thead>
			<tr>
				@foreach (PropertyInfo pi in _properties)
				{
					<th>@pi.Name</th>
				}
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (TGetDto result in results)
			{
				<tr>
					@foreach (PropertyInfo pi in _properties)
					{
						<td>@ReflectionUtils.GetDtoPropertyDisplayValue(pi, result)</td>
					}
					<td><a href="@($"{NavigationManager.Uri}/edit/{result.Id}")">Edit</a></td>
					<td><a href="" @onclick="() => _idToDelete = result.Id" @onclick:preventDefault>Delete</a></td>
				</tr>
			}
		</tbody>
	</table>
}

@code
{
	[Parameter] public string Title { get; set; } = null!;

	[Parameter] public string ApiRoute { get; set; } = null!;

	private TGetDto[]? results;
	private string? _uninitializedState = "Loading...";
	private PropertyInfo[] _properties = Array.Empty<PropertyInfo>();
	private int? _idToDelete;
	private DeleteResult? _deleteResult;

	private class DeleteResult
	{
		public string? Response { get; set; }
		public string? CssClass { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		_properties = ReflectionUtils.GetDtoDisplayPropertyInfos<TGetDto>();

		try
		{
			results = await Http.GetFromJsonAsync<TGetDto[]>(ApiRoute);
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_uninitializedState = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_uninitializedState = "An error occurred while sending the request.";
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task ConfirmDelete()
	{
		try
		{
			HttpResponseMessage hrm = await Http.DeleteAsync($"{ApiRoute}/{_idToDelete}");
			_deleteResult = new();
			_deleteResult.Response = await hrm.Content.ReadAsStringAsync();
			_deleteResult.CssClass = hrm.StatusCode == HttpStatusCode.OK ? "bg-success" : "bg-danger";
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
