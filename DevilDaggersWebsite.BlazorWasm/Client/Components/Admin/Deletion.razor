@typeparam TKey
@inject AdminApiHttpClient Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net

@switch (State)
{
	case DeleteState.Confirm:
		{
			<div class="bg-dark-red p-2 rounded">
				<h4 class="text-xl">Delete?</h4>

				<p>Are you sure you want to delete entity with ID @IdToDelete?</p>

				<button class="bg-red w-40 py-1 rounded" @onclick="ConfirmDelete">Delete permanently</button>
				<button class="bg-gray-900 w-20 py-1 rounded" @onclick="Cancel">Cancel</button>
			</div>
		}
		break;
	case DeleteState.Error:
		{
			<ResultBar Title="Validation failed" ResultBarType="ResultBarType.ValidationError" @bind-Message="@ApiResponse" DismissEvent="Cancel" />
		}
		break;
	case DeleteState.Ok:
		{
			<ResultBar Title="Delete successful" ResultBarType="ResultBarType.Success" Message="Successfully deleted." DismissEvent="Cancel" />
		}
		break;
}

@code {
	public DeleteState State { get; set; }
	public TKey? IdToDelete { get; set; }
	public string? ApiResponse { get; set; }

	[Parameter] public Func<Task>? AfterDelete { get; set; }
	[Parameter] public string ApiRoute { get; set; } = null!;

	public void Set(TKey id)
	{
		State = DeleteState.Confirm;
		IdToDelete = id;
	}

	private async Task ConfirmDelete()
	{
		try
		{
			HttpResponseMessage hrm = await Http.Client.DeleteAsync($"{ApiRoute}/{IdToDelete}");
			if (hrm.StatusCode == HttpStatusCode.OK)
			{
				State = DeleteState.Ok;

				if (AfterDelete != null)
					await AfterDelete.Invoke();
			}
			else
			{
				State = DeleteState.Error;
				ApiResponse = await hrm.Content.ReadAsStringAsync();
			}
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	public void Cancel()
	{
		State = DeleteState.None;
		IdToDelete = default;
	}

	public enum DeleteState
	{
		None = 0,
		Confirm = 1,
		Ok = 2,
		Error = 3,
	}
}
