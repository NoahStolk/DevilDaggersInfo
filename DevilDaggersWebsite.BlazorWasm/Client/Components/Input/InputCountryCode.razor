@inherits InputBase<string>

<div class="@CssClass">
	<Dropdown TItem="string" OnSelected="e => CurrentValue = e" @ref="_dropdown">
		<InitialTip>@SelectedDisplayValue</InitialTip>
		<ChildContent>
			<InputTextImmediate @bind-Value="_searchValue" />
			<div class="select-list">
				<a class="dropdown-item" @onclick="e => _dropdown?.HandleSelect(null) ?? Task.CompletedTask">[CLEAR]</a>
				@foreach (KeyValuePair<string, string> kvp in FilteredCountries)
				{
					<a class="dropdown-item" Item="@kvp" @onclick="e => _dropdown?.HandleSelect(kvp.Key) ?? Task.CompletedTask">@kvp.Key (@kvp.Value)</a>
				}
			</div>
		</ChildContent>
	</Dropdown>
</div>

@code
{
	private string? _searchValue;

	private Dropdown<string>? _dropdown;

	private string SelectedDisplayValue => string.IsNullOrWhiteSpace(CurrentValue) ? "<None selected>" : $"{CurrentValue} ({(UserUtils.CountryNames.ContainsKey(CurrentValue) ? UserUtils.CountryNames[CurrentValue] : "???")})";

	public Dictionary<string, string> FilteredCountries => _searchValue == null ? UserUtils.CountryNames : UserUtils.CountryNames
		.Where(kvp =>
			kvp.Key.Contains(_searchValue, StringComparison.InvariantCultureIgnoreCase) ||
			kvp.Value.Contains(_searchValue, StringComparison.InvariantCultureIgnoreCase))
		.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

	protected override bool TryParseValueFromString(string? value, out string? result, out string validationMessage)
	{
		validationMessage = string.Empty;
		result = value;
		return true;
	}
}
