@inherits InputBase<string>

<Dropdown TItem="string" OnSelected="e => CurrentValue = e" @ref="_dropdown">
	<InitialTip>
		<span class="pl-2">@SelectedDisplayValue</span>
		<span class="w-6 cursor-pointer bg-gray-800 rounded inline-block text-center" @onclick="e => _dropdown?.HandleSelect(null) ?? Task.CompletedTask">✕</span>
	</InitialTip>
	<ChildContent>
		<div class="bg-gray-900">
			<div class="p-2 w-64">
				<span class="cursor-default w-16">Search:</span>
				<InputTextImmediate @bind-Value="_searchValue" class="w-48 bg-gray-700 text-color-text" />
			</div>
			<ul class="select-list w-64">
				@{
					int i = 0;
					foreach (KeyValuePair<string, string> kvp in FilteredItems)
					{
						<li class="cursor-pointer pl-2 @(i++ % 2 == 0 ? "bg-gray-800" : string.Empty)" Item="@kvp" @onclick="e => _dropdown?.HandleSelect(kvp.Key) ?? Task.CompletedTask">@kvp.Key (@kvp.Value)</li>
					}
				}
			</ul>
		</div>
	</ChildContent>
</Dropdown>

@code
{
	private string? _searchValue;

	private Dropdown<string>? _dropdown;

	private string SelectedDisplayValue => string.IsNullOrWhiteSpace(CurrentValue) ? "<None selected>" : $"{CurrentValue} ({(Values.ContainsKey(CurrentValue) ? Values[CurrentValue] : "???")})";

	[Parameter] public Dictionary<string, string> Values { get; set; } = null!;

	public Dictionary<string, string> FilteredItems => _searchValue == null ? Values : Values
		.Where(kvp =>
			kvp.Key.Contains(_searchValue, StringComparison.InvariantCultureIgnoreCase) ||
			kvp.Value.Contains(_searchValue, StringComparison.InvariantCultureIgnoreCase))
		.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

	protected override bool TryParseValueFromString(string? value, out string? result, out string validationMessage)
	{
		validationMessage = string.Empty;
		result = value;
		return true;
	}
}
