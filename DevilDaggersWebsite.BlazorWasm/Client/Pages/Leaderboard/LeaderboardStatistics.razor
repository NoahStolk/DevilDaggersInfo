@page "/leaderboard-statistics"
@inject PublicApiHttpClient Http
@using Blazorise.Charts
@using DevilDaggersCore.Game
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.LeaderboardStatistics

<h1 class="text-red text-2xl">Leaderboard Statistics</h1>

@if (_statistics == null)
{
	<Loading />
}
else
{
	@if (!_statistics.IsFetched)
	{
		<p>Statistics are not initialized.</p>
	}
	else
	{
		<p>This page contains some global statistics from the leaderboard.</p>
		<p>Statistics were last fetched on @_statistics.DateTime.ToString(FormatUtils.DateTimeUtcFormat).</p>

		<h2 class="text-red text-xl">Scores</h2>
		<p>The average time survived for all players is <span class="@GameInfo.GetDaggerFromTenthsOfMilliseconds(GameVersion.V31, (int)_statistics.Time.Average).Name.ToLower()">@((_statistics.Time.Average / 10000.0).ToString(FormatUtils.TimeFormat))</span> seconds.</p>

		<BarChart Options="_bco" @ref="_sub500BarChart" TItem="int" />
		<BarChart Options="_bco" @ref="_sub1000BarChart" TItem="int" />
		<BarChart Options="_bco" @ref="_post1000BarChart" TItem="int" />

		<h2 class="text-red text-xl">Kills</h2>
		<p>The average kills for all players is @(_statistics.Kills.Average.ToString(FormatUtils.LeaderboardIntAverageFormat)).</p>

		<h2 class="text-red text-xl">Gems</h2>
		<p>The average gems for all players is @(_statistics.Gems.Average.ToString(FormatUtils.LeaderboardIntAverageFormat)).</p>

		<h2 class="text-red text-xl">Daggers achieved</h2>
		<BarChart Options="_bco" @ref="_daggersBarChart" TItem="int" />

		<h2 class="text-red text-xl">Death types</h2>
		<BarChart Options="_bco" @ref="_deathsBarChart" TItem="int" />

		<h2 class="text-red text-xl">Enemies seen</h2>
		<BarChart Options="_bco" @ref="_enemiesBarChart" TItem="int" />
	}
}

@code
{
	private GetLeaderboardStatistics? _statistics;

	protected override async Task OnInitializedAsync()
	{
		_statistics = await Http.Client.GetFromJsonAsync<GetLeaderboardStatistics>("api/leaderboard-statistics");
	}

	private const int _post1000BarCount = 20;

	private BarChartOptions _bco = new()
	{
		MaintainAspectRatio = true,
		Responsive = true,
		AspectRatio = 3.5f,
	};

	private int[] _sub500Times = Enumerable.Range(0, 50).Select(i => i * 10).ToArray();
	private int[] _sub1000Times = Enumerable.Range(50, 50).Select(i => i * 10).ToArray();
	private int[] _post1000Times = Enumerable.Range(100, _post1000BarCount).Select(i => i * 10).ToArray();

	private BarChart<int>? _sub500BarChart;
	private BarChart<int>? _sub1000BarChart;
	private BarChart<int>? _post1000BarChart;
	private BarChart<int>? _daggersBarChart;
	private BarChart<int>? _deathsBarChart;
	private BarChart<int>? _enemiesBarChart;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender || _statistics == null)
			return;

		await DrawSub500BarChart();
		await DrawSub1000BarChart();
		await DrawPost1000BarChart();
		await DrawDaggersBarChart();
		await DrawDeathsBarChart();
		await DrawEnemiesBarChart();
	}

	private async Task DrawSub500BarChart()
	{
		if (_sub500BarChart == null)
			return;

		await _sub500BarChart.Clear();
		await _sub500BarChart.AddLabelsDatasetsAndUpdate(_sub500Times.Select(i => i.ToString()).ToArray(), new BarChartDataset<int>
		{
			Label = "Players",
			Data = _statistics?.TimeStatistics.Select(kvp => kvp.Value).Take(50).ToList(),
			BackgroundColor = _sub500Times.Select(t => $"#{GameInfo.GetDaggerFromSeconds(GameVersion.V31, t).ColorCode}").ToList(),
		});
	}

	private async Task DrawSub1000BarChart()
	{
		if (_sub1000BarChart == null)
			return;

		await _sub1000BarChart.Clear();
		await _sub1000BarChart.AddLabelsDatasetsAndUpdate(_sub1000Times.Select(i => i.ToString()).ToArray(), new BarChartDataset<int>
		{
			Label = "Players",
			Data = _statistics?.TimeStatistics.Select(kvp => kvp.Value).Skip(50).Take(50).ToList(),
			BackgroundColor = _sub1000Times.Select(t => $"#{GameInfo.GetDaggerFromSeconds(GameVersion.V31, t).ColorCode}").ToList(),
		});
	}

	private async Task DrawPost1000BarChart()
	{
		if (_post1000BarChart == null)
			return;

		await _post1000BarChart.Clear();
		await _post1000BarChart.AddLabelsDatasetsAndUpdate(_post1000Times.Select(i => i.ToString()).ToArray(), new BarChartDataset<int>
		{
			Label = "Players",
			Data = _statistics?.TimeStatistics.Select(kvp => kvp.Value).Skip(100).Take(_post1000BarCount).ToList(),
			BackgroundColor = _post1000Times.Select(t => $"#{GameInfo.GetDaggerFromSeconds(GameVersion.V31, t).ColorCode}").ToList(),
		});
	}

	private async Task DrawDaggersBarChart()
	{
		if (_daggersBarChart == null)
			return;

		await _daggersBarChart.Clear();
		await _daggersBarChart.AddLabelsDatasetsAndUpdate(_statistics?.DaggerStatistics.Select(kvp => kvp.Key).ToArray(), new BarChartDataset<int>
		{
			Label = "Players",
			Data = _statistics?.DaggerStatistics.Select(kvp => kvp.Value).ToList(),
			BackgroundColor = _statistics?.DaggerStatistics.Select(kvp => $"#{GameInfo.GetDaggers(GameVersion.V31).FirstOrDefault(d => d.Name == kvp.Key)?.ColorCode ?? "444"}").ToList(),
		});
	}

	private async Task DrawDeathsBarChart()
	{
		if (_deathsBarChart == null)
			return;

		await _deathsBarChart.Clear();
		await _deathsBarChart.AddLabelsDatasetsAndUpdate(_statistics?.DeathStatistics.Select(kvp => kvp.Key).ToArray(), new BarChartDataset<int>
		{
			Label = "Players",
			Data = _statistics?.DeathStatistics.Select(kvp => kvp.Value).ToList(),
			BackgroundColor = _statistics?.DeathStatistics.Select(kvp => $"#{GameInfo.GetDeathByName(GameVersion.V31, kvp.Key)?.ColorCode ?? "444"}").ToList(),
		});
	}

	private async Task DrawEnemiesBarChart()
	{
		if (_enemiesBarChart == null)
			return;

		await _enemiesBarChart.Clear();
		await _enemiesBarChart.AddLabelsDatasetsAndUpdate(_statistics?.EnemyStatistics.Select(kvp => kvp.Key).ToArray(), new BarChartDataset<int>
		{
			Label = "Players",
			Data = _statistics?.EnemyStatistics.Select(kvp => kvp.Value).ToList(),
			BackgroundColor = _statistics?.EnemyStatistics.Select(kvp => $"#{GameInfo.GetEnemies(GameVersion.V31).FirstOrDefault(e => e.Name == kvp.Key)?.ColorCode ?? "444"}").ToList(),
		});
	}
}
