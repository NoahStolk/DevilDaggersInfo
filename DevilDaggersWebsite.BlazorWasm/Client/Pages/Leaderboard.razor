@page "/leaderboard"
@inject PublicApiHttpClient Http
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Leaderboards
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Players
@using DevilDaggersWebsite.BlazorWasm.Client.Components.Leaderboards

<h1>Leaderboard</h1>

@if (GetLeaderboardPublic == null)
{
	@if (_apiError == null)
	{
		<Loading />
	}
	else
	{
		<p>Failed to retrieve scores from the official Devil Daggers leaderboard servers. Please try again later.</p>
		<p>If the problem persists, try contacting the Devil Daggers developer.</p>
		<p>@_apiError</p>
	}
}
else
{
	<div class="leaderboard-form-container">
		<a href="/leaderboard/search">Search players by username</a>

		<div class="input-label text-left">Rank:</div>
		<input @bind="Rank" />
		<button class="btn btn-primary" @onclick="FetchLeaderboard">Show</button>

		<div>
			Showing rank @Rank - @(Rank + 99)
		</div>
		<div>
			<a class="btn btn-default btn-page @(Rank <= 1 ? "disabled" : string.Empty)" @onclick="() => Rank = 1">|&lt;</a>
			<a class="btn btn-default btn-page @(Rank <= 1 ? "disabled" : string.Empty)" @onclick="() => Rank -= 1000">&lt;&lt;</a>
			<a class="btn btn-default btn-page @(Rank <= 1 ? "disabled" : string.Empty)" @onclick="() => Rank -= 100">&lt;</a>
			<a class="btn btn-default btn-page @(Rank >= _maxRank ? "disabled" : string.Empty)" @onclick="() => Rank += 100">&gt;</a>
			<a class="btn btn-default btn-page @(Rank >= _maxRank ? "disabled" : string.Empty)" @onclick="() => Rank += 1000">&gt;&gt;</a>
			<a class="btn btn-default btn-page @(Rank >= _maxRank ? "disabled" : string.Empty)" @onclick="() => Rank = GetLeaderboardPublic.TotalPlayers - 99">&gt;|</a>
		</div>
	</div>

	<LeaderboardGlobal Leaderboard="GetLeaderboardPublic" IsHistory="false" />
	<LeaderboardTableInfo />
	<LeaderboardTable Leaderboard="GetLeaderboardPublic" Players="Players" IsHistory="false" />
}

@code
{
	private string? _apiError;

	private int _maxRank => (GetLeaderboardPublic?.TotalPlayers ?? int.MaxValue) - 99;

	private int _rank = 1;

	public int Rank
	{
		get => _rank;
		set => _rank = Math.Clamp(value, 1, _maxRank);
	}

	public GetLeaderboardPublic? GetLeaderboardPublic { get; set; }

	public List<GetPlayerForLeaderboard>? Players { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Players = await Http.Client.GetFromJsonAsync<List<GetPlayerForLeaderboard>>("api/players/leaderboard");

		GetLeaderboardPublic = await FetchLeaderboard();

		if (GetLeaderboardPublic != null && Rank > GetLeaderboardPublic.TotalPlayers - 99)
		{
			Rank = GetLeaderboardPublic.TotalPlayers - 99;
			GetLeaderboardPublic = await FetchLeaderboard();
		}
	}

	private async Task<GetLeaderboardPublic?> FetchLeaderboard()
	{
		try
		{
			return await Http.Client.GetFromJsonAsync<GetLeaderboardPublic>($"api/leaderboards?rankStart={Rank}");
		}
		catch (Exception ex)
		{
			_apiError = ex.Message;
			return null;
		}
	}
}
