@page "/custom/leaderboard/{Id:int}"
@inject PublicApiHttpClient Http
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Public.CustomEntries
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Public.CustomLeaderboards
@using DevilDaggersCore.Game

<Heading>Custom Leaderboard</Heading>

@if (GetCustomLeaderboard == null)
{
	<Loading />
}
else
{
	<div class="text-xl font-goethe">
		<div class="grid gap-3 grid-cols-leaderboard-sm md:grid-cols-leaderboard-md lg:grid-cols-leaderboard-lg xl:grid-cols-leaderboard-xl">
			<div @onclick="() => Sort(CustomLeaderboardSorting.Rank)" class="text-right"><Tooltip Text="Sort by RANK"><img src="/images/icons/custom-x2/rank.png" /></Tooltip></div>
			<div @onclick="() => Sort(CustomLeaderboardSorting.Flag)" class="text-left"><Tooltip Text="Sort by FLAG"><img src="/images/icons/custom-x2/flag.png" /></Tooltip></div>
			<div @onclick="() => Sort(CustomLeaderboardSorting.Player)" class="text-left"><Tooltip Text="Sort by PLAYER"><img src="/images/icons/mask-x2/eye.png" /></Tooltip></div>
			<div @onclick="() => Sort(CustomLeaderboardSorting.Time)" class="text-right"><Tooltip Text="Sort by TIME"><img src="/images/icons/mask-x2/stopwatch.png" /></Tooltip></div>
			<div @onclick="() => Sort(CustomLeaderboardSorting.Kills)" class="text-right hidden md:block"><Tooltip Text="Sort by KILLS"><img src="/images/icons/mask-x2/dagger.png" /></Tooltip></div>
			<div @onclick="() => Sort(CustomLeaderboardSorting.Gems)" class="text-right hidden md:block"><Tooltip Text="Sort by GEMS"><img src="/images/icons/mask-x2/gem.png" /></Tooltip></div>
			<div @onclick="() => Sort(CustomLeaderboardSorting.Accuracy)" class="text-right hidden md:block"><Tooltip Text="Sort by ACCURACY"><img src="/images/icons/mask-x2/crosshair.png" /></Tooltip></div>
			<div @onclick="() => Sort(CustomLeaderboardSorting.DeathType)" class="text-left hidden lg:block"><Tooltip Text="Sort by DEATH&nbsp;TYPE"><img src="/images/icons/mask-x2/skull.png" /></Tooltip></div>
		</div>
		<div>
			@{
				int i = 0;

				foreach (GetCustomEntry ce in GetCustomLeaderboard.CustomEntries)
				{
					string daggerCssClass = ce.CustomLeaderboardDagger.ToString().ToLower();

					Death? death = GameInfo.GetDeathByType(GameVersion.V31, (int)ce.DeathType);
					string deathStyle = $"color: #{death?.ColorCode ?? "444"};";
					string deathName = death?.Name ?? "Unknown";

					double accuracy = ce.DaggersFired == 0 ? 0 : ce.DaggersHit / (double)ce.DaggersFired;
					string daggers = FormatUtils.FormatDaggersInt32(ce.DaggersHit, ce.DaggersFired, false);

					<div class="grid gap-3 grid-cols-leaderboard-sm md:grid-cols-leaderboard-md lg:grid-cols-leaderboard-lg xl:grid-cols-leaderboard-xl h-6 @(i++ % 2 == 0 ? "bg-gray0B" : string.Empty)">
						<EntryRank PlayerId="@ce.PlayerId" Rank="@ce.Rank" />
						<EntryFlag CountryCode="@ce.CountryCode" />
						<EntryUsername DaggerCssClass="@daggerCssClass" Id="@ce.PlayerId" Name="@ce.PlayerName" />
						<div class="text-right @daggerCssClass">@ce.Time.ToString(FormatUtils.TimeFormat)</div>
						<div class="text-right hidden md:block">@ce.EnemiesKilled.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="text-right hidden md:block">@ce.GemsCollected.ToString(FormatUtils.LeaderboardIntFormat)</div>
						<div class="text-right hidden md:block">
							<Tooltip Text="@daggers">@accuracy.ToString(FormatUtils.AccuracyFormat)</Tooltip>
						</div>
						<div class="text-left hidden lg:block" style="@deathStyle">@deathName</div>
					</div>
				}
			}
		</div>
	</div>
}

@code
{
	[Parameter] public int Id { get; set; }

	public GetCustomLeaderboard? GetCustomLeaderboard { get; set; }

	private CustomLeaderboardSorting _sortBy;
	private bool _ascending;

	private Dictionary<CustomLeaderboardSorting, bool> _sortings = new();

	protected override async Task OnInitializedAsync()
	{
		foreach (CustomLeaderboardSorting e in (CustomLeaderboardSorting[])Enum.GetValues(typeof(CustomLeaderboardSorting)))
			_sortings.Add(e, false);

		GetCustomLeaderboard = await Http.GetCustomLeaderboardById(Id);
	}

	private void Sort(CustomLeaderboardSorting sortBy)
	{
		_sortBy = sortBy;
		_sortings[sortBy] = !_sortings[sortBy];
		_ascending = _sortings[sortBy];

		GetCustomLeaderboard!.CustomEntries = _sortBy switch
		{
			CustomLeaderboardSorting.Accuracy => GetCustomLeaderboard.CustomEntries.OrderBy(ce => ce.DaggersFired == 0 ? 0 : ce.DaggersHit / (float)ce.DaggersFired, _ascending).ToList(),
			CustomLeaderboardSorting.DeathType => GetCustomLeaderboard.CustomEntries.OrderBy(ce => ce.DeathType, _ascending).ToList(),
			CustomLeaderboardSorting.Flag => GetCustomLeaderboard.CustomEntries.OrderBy(ce => ce.CountryCode, _ascending).ToList(),
			CustomLeaderboardSorting.Gems => GetCustomLeaderboard.CustomEntries.OrderBy(ce => ce.GemsCollected, _ascending).ToList(),
			CustomLeaderboardSorting.Kills => GetCustomLeaderboard.CustomEntries.OrderBy(ce => ce.EnemiesKilled, _ascending).ToList(),
			CustomLeaderboardSorting.Player => GetCustomLeaderboard.CustomEntries.OrderBy(ce => ce.PlayerName, _ascending).ToList(),
			CustomLeaderboardSorting.Rank => GetCustomLeaderboard.CustomEntries.OrderBy(ce => ce.Rank, _ascending).ToList(),
			CustomLeaderboardSorting.Time => GetCustomLeaderboard.CustomEntries.OrderBy(ce => ce.Time, _ascending).ToList(),
			_ => GetCustomLeaderboard.CustomEntries,
		};
	}

	private enum CustomLeaderboardSorting
	{
		Rank,
		Flag,
		Player,
		Time,
		Kills,
		Gems,
		Accuracy,
		DeathType,
	}
}
