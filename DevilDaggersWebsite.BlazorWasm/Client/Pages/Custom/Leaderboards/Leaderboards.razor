@page "/custom/leaderboards"
@inject PublicApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Public.CustomLeaderboards
@using DevilDaggersWebsite.BlazorWasm.Shared.Enums.Sortings.Public
@using DevilDaggersWebsite.BlazorWasm.Shared.Enums

<Heading>Custom Leaderboards</Heading>

@if (GetCustomLeaderboards == null)
{
	<Loading />
}
else
{
	<Select @onchange="ChangeCategory" class="bg-gray-900 transition-colors duration-100 h-8 py-1 rounded text-color-text">
		@foreach (CustomLeaderboardCategory e in (CustomLeaderboardCategory[])Enum.GetValues(typeof(CustomLeaderboardCategory)))
		{
			if (e == _category)
			{
				<option value="@e" selected>@e</option>
			}
			else
			{
				<option value="@e">@e</option>
			}
		}
	</Select>
	<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(0)">|&lt;</button>
	<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(_pageIndex - 1)">&lt;</button>
	<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(_pageIndex + 1)">&gt;</button>
	<button class="bg-gray-900 hover:bg-gray-700 transition-colors duration-100 w-8 h-8 py-1 rounded text-color-text" @onclick="() => ChangePageIndex(TotalPages - 1)">&gt;|</button>
	<Select @onchange="ChangePageSize" class="bg-gray-900 transition-colors duration-100 h-8 py-1 rounded text-color-text">
		@foreach (int i in PublicPagingConstants.PageSizeOptions)
		{
			if (i == _pageSize)
			{
				<option value="@i" selected>@i</option>
			}
			else
			{
				<option value="@i">@i</option>
			}
		}
	</Select>
	<div class="p-1">Page @(_pageIndex + 1) of @TotalPages (@(_pageIndex * _pageSize) - @Math.Min(GetCustomLeaderboards.TotalResults, (_pageIndex + 1) * _pageSize) of @GetCustomLeaderboards.TotalResults)</div>

	<div class="grid gap-3 sm:grid-cols-custom-leaderboard-sm md:grid-cols-custom-leaderboard-md lg:grid-cols-custom-leaderboard-lg xl:grid-cols-custom-leaderboard-xl">
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left" @onclick="() => Sort(CustomLeaderboardSorting.SpawnsetName)">Name</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(CustomLeaderboardSorting.AuthorName)">Author</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(CustomLeaderboardSorting.DateCreated)">Created</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden md:block" @onclick="() => Sort(CustomLeaderboardSorting.DateLastPlayed)">Last played</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(CustomLeaderboardSorting.TimeBronze)">Bronze</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(CustomLeaderboardSorting.TimeSilver)">Silver</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(CustomLeaderboardSorting.TimeGolden)">Golden</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(CustomLeaderboardSorting.TimeDevil)">Devil</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden xl:block" @onclick="() => Sort(CustomLeaderboardSorting.TimeLeviathan)">Leviathan</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-left hidden lg:block" @onclick="() => Sort(CustomLeaderboardSorting.TopPlayer)">Top player</a>
		<a href="" @onclick:preventDefault class="text-color-link hover:text-color-link-hover text-right hidden lg:block" @onclick="() => Sort(CustomLeaderboardSorting.WorldRecord)">WR</a>
	</div>
	@for (int i = 0; i < GetCustomLeaderboards.Results.Count; i++)
	{
		GetCustomLeaderboardOverview customLeaderboard = GetCustomLeaderboards.Results[i];
		<div class="grid gap-3 sm:grid-cols-custom-leaderboard-sm md:grid-cols-custom-leaderboard-md lg:grid-cols-custom-leaderboard-lg xl:grid-cols-custom-leaderboard-xl h-6 @(i % 2 == 0 ? "bg-gray0B" : string.Empty)">
			<div class="overflow-x-hidden text-left"><a href="/custom/leaderboard/@customLeaderboard.Id">@customLeaderboard.SpawnsetName</a></div>
			<div class="overflow-x-hidden text-left hidden md:block">@customLeaderboard.SpawnsetAuthorName</div>
			<div class="overflow-x-hidden text-left hidden md:block">@customLeaderboard.DateCreated?.ToString(FormatUtils.DateFormat)</div>
			<div class="overflow-x-hidden text-left hidden md:block">@FormatUtils.FormatDateTimeAsTimeAgo(customLeaderboard.DateLastPlayed)</div>
			<div class="overflow-x-hidden text-right hidden xl:block text-xl font-goethe bronze">@customLeaderboard.TimeBronze.ToString(FormatUtils.TimeFormat)</div>
			<div class="overflow-x-hidden text-right hidden xl:block text-xl font-goethe silver">@customLeaderboard.TimeSilver.ToString(FormatUtils.TimeFormat)</div>
			<div class="overflow-x-hidden text-right hidden xl:block text-xl font-goethe golden">@customLeaderboard.TimeGolden.ToString(FormatUtils.TimeFormat)</div>
			<div class="overflow-x-hidden text-right hidden xl:block text-xl font-goethe devil">@customLeaderboard.TimeDevil.ToString(FormatUtils.TimeFormat)</div>
			<div class="overflow-x-hidden text-right hidden xl:block text-xl font-goethe leviathan">@customLeaderboard.TimeLeviathan.ToString(FormatUtils.TimeFormat)</div>
			<div class="overflow-x-hidden text-left hidden lg:block">@customLeaderboard.TopPlayer</div>
			<div class="overflow-x-hidden text-right hidden lg:block text-xl font-goethe @(customLeaderboard.WorldRecordDagger.ToString().ToLower())">@customLeaderboard.WorldRecord?.ToString(FormatUtils.TimeFormat)</div>
		</div>
	}
}

@code
{
	private CustomLeaderboardCategory _category;
	private int _pageIndex;
	private int _pageSize;
	private CustomLeaderboardSorting _sortBy = CustomLeaderboardSorting.SpawnsetName;
	private bool _ascending = false;

	private Dictionary<CustomLeaderboardSorting, bool> _sortings = new();

	public Page<GetCustomLeaderboardOverview>? GetCustomLeaderboards { get; set; }

	private int TotalPages => GetCustomLeaderboards == null ? 0 : (GetCustomLeaderboards.TotalResults - 1) / _pageSize + 1;

	protected override async Task OnInitializedAsync()
	{
		foreach (CustomLeaderboardSorting e in (CustomLeaderboardSorting[])Enum.GetValues(typeof(CustomLeaderboardSorting)))
			_sortings.Add(e, false);

		Dictionary<string, StringValues> query = NavigationManager.GetQuery();
		_category = query.GetEnumOrDefault<CustomLeaderboardCategory>(QueryParameters.Category);
		_pageIndex = query.GetIntOrDefault(QueryParameters.PageIndex);
		_pageSize = query.GetIntOrDefault(QueryParameters.PageSize);
		_sortBy = query.GetEnumOrDefault<CustomLeaderboardSorting>(QueryParameters.SortBy);
		_ascending = query.GetBoolOrDefault(QueryParameters.Ascending);

		if (_category == default)
			_category = CustomLeaderboardCategory.Default;

		if (_pageIndex < 0)
			_pageIndex = 0;

		if (_pageSize < PublicPagingConstants.PageSizeMin || _pageSize > PublicPagingConstants.PageSizeMax)
			_pageSize = PublicPagingConstants.PageSizeDefault;

		await Fetch();
	}

	private async Task ChangePageIndex(int pageIndex)
	{
		_pageIndex = Math.Clamp(pageIndex, 0, TotalPages - 1);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageIndex, _pageIndex);

		await Fetch();
	}

	private async Task ChangePageSize(ChangeEventArgs e)
	{
		_ = int.TryParse(e.Value?.ToString(), out _pageSize);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.PageSize, _pageSize);

		_pageIndex = Math.Clamp(_pageIndex, 0, TotalPages - 1);
		await Fetch();
	}

	private async Task ChangeCategory(ChangeEventArgs e)
	{
		_ = Enum.TryParse<CustomLeaderboardCategory>(e.Value?.ToString(), out _category);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.Category, _category);

		await Fetch();
	}

	private async Task Sort(CustomLeaderboardSorting sortBy)
	{
		_sortBy = sortBy;
		_sortings[sortBy] = !_sortings[sortBy];
		_ascending = _sortings[sortBy];

		NavigationManager.AddOrModifyQueryParameter(QueryParameters.SortBy, _sortBy);
		NavigationManager.AddOrModifyQueryParameter(QueryParameters.Ascending, _ascending);

		await Fetch();
	}

	private async Task Fetch()
	{
		GetCustomLeaderboards = await Http.GetCustomLeaderboards(_category, _pageIndex, _pageSize, _sortBy, _ascending);
	}

	private static class QueryParameters
	{
		public static string Category { get; } = nameof(Category);
		public static string PageIndex { get; } = nameof(PageIndex);
		public static string PageSize { get; } = nameof(PageSize);
		public static string SortBy { get; } = nameof(SortBy);
		public static string Ascending { get; } = nameof(Ascending);
	}
}
