@page "/custom/entry/{Id:int}"
@inject PublicApiHttpClient Http
@using Blazorise.Charts
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Public.CustomEntries

@if (GetCustomEntryData == null)
{
	<Loading />
}
else
{
	<Heading>@GetCustomEntryData.PlayerName's score on @GetCustomEntryData.SpawnsetName</Heading>

	<h2 class="text-red text-xl">Gems</h2>
	<LineChart Options="_lco" @ref="_gemsChart" TItem="int" />

	<h2 class="text-red text-xl">Homing</h2>
	<LineChart Options="_lco" @ref="_homingChart" TItem="int" />

	<h2 class="text-red text-xl">Enemies</h2>
	<LineChart Options="_lco" @ref="_enemiesChart" TItem="int" />

	<h2 class="text-red text-xl">Daggers</h2>
	<LineChart Options="_lco" @ref="_daggersChart" TItem="int" />

	<h2 class="text-red text-xl">Enemies Alive Per Type</h2>
	<LineChart Options="_lco" @ref="_enemiesAlivePerTypeChart" TItem="ushort" />

	<h2 class="text-red text-xl">Enemies Killed Per Type</h2>
	<LineChart Options="_lco" @ref="_enemiesKilledPerTypeChart" TItem="ushort" />
}

@code
{
	private LineChartOptions _lco = new()
	{
		MaintainAspectRatio = true,
		Responsive = true,
		AspectRatio = 3.5f,
		ShowLines = true,
	};

	private LineChart<int>? _gemsChart;
	private LineChart<int>? _homingChart;
	private LineChart<int>? _enemiesChart;
	private LineChart<int>? _daggersChart;
	private LineChart<ushort>? _enemiesAlivePerTypeChart;
	private LineChart<ushort>? _enemiesKilledPerTypeChart;

	[Parameter] public int Id { get; set; }

	public GetCustomEntryData? GetCustomEntryData { get; set; }

	protected override async Task OnInitializedAsync()
	{
		GetCustomEntryData = await Http.GetCustomEntryDataById(Id);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender ||
			GetCustomEntryData == null ||
			_gemsChart == null ||
			_homingChart == null ||
			_enemiesChart == null ||
			_daggersChart == null ||
			_enemiesAlivePerTypeChart == null ||
			_enemiesKilledPerTypeChart == null)
			return;

		await AddLabelsDatasets(_gemsChart,
			new("Gems Collected", GetCustomEntryData.GemsCollectedData, "#f00", "#f00"),
			new("Gems Despawned", GetCustomEntryData.GemsDespawnedData, "#888", "#888"),
			new("Gems Eaten", GetCustomEntryData.GemsEatenData, "#0f0", "#0f0"),
			new("Gems Total", GetCustomEntryData.GemsTotalData, "#800", "#800"));
		await AddLabelsDatasets(_homingChart, new("Homing Stored", GetCustomEntryData.HomingStoredData, "#f0f", "#f0f"), new("Homing Eaten", GetCustomEntryData.HomingEatenData, "#f00", "#f00"));
		await AddLabelsDatasets(_enemiesChart, new("Enemies Alive", GetCustomEntryData.EnemiesAliveData, "#840", "#840"), new("Enemies Killed", GetCustomEntryData.EnemiesKilledData, "#f00", "#f00"));
		await AddLabelsDatasets(_daggersChart, new("Daggers Hit", GetCustomEntryData.DaggersHitData, "#80f", "#80f"), new("Daggers Fired", GetCustomEntryData.DaggersFiredData, "#00f", "#00f"));
		await AddLabelsDatasets(_enemiesAlivePerTypeChart,
			new("Squid Is Alive", GetCustomEntryData.Squid1sAliveData, "#80f", "#80f"),
			new("Squid IIs Alive", GetCustomEntryData.Squid2sAliveData, "#00f", "#00f"),
			new("Squid IIIs Alive", GetCustomEntryData.Squid3sAliveData, "#00f", "#00f"));
		await AddLabelsDatasets(_enemiesKilledPerTypeChart,
			new("Squid Is Killed", GetCustomEntryData.Squid1sKilledData, "#80f", "#80f"),
			new("Squid IIs Killed", GetCustomEntryData.Squid2sKilledData, "#00f", "#00f"),
			new("Squid IIIs Killed", GetCustomEntryData.Squid3sKilledData, "#00f", "#00f"));
	}

	private async Task AddLabelsDatasets<T>(LineChart<T> chart, params Dataset<T>[] datasets)
	{
		if (GetCustomEntryData == null)
			return;

		List<LineChartDataset<T>> lineChartDatasets = new();
		foreach (Dataset<T> dataset in datasets)
		{
			if (dataset.Data == null)
				continue;

			lineChartDatasets.Add(new LineChartDataset<T>
			{
				Label = dataset.Title,
				Data = dataset.Data.ToList(),
				BackgroundColor = new(dataset.BackgroundColor),
				Fill = false,
				PointRadius = 1,
				ShowLine = true,
				BorderColor = dataset.BorderColor,
				LineTension = 0.1f,
			});
		}

		await chart.AddLabelsDatasetsAndUpdate(Enumerable.Range(0, (int)GetCustomEntryData.Time).Select(i => i.ToString()).ToArray(), lineChartDatasets.ToArray());
	}

	private record Dataset<T>(string Title, T[]? Data, string BackgroundColor, string BorderColor);
}
