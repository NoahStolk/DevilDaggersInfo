@page "/admin/players/edit/{Id:int}"
@inject AdminApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Admin.Players
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net

<h1 class="text-red text-2xl">Edit</h1>

@switch (State)
{
	case ErrorState.ValidationError:
		{
			<ResultBar Title="Validation failed" ResultBarType="ResultBarType.ValidationError" @bind-Message="@_errorMessage" DismissEvent="() => State = ErrorState.None" />
		}
		break;
	case ErrorState.FatalError:
		{
			<ResultBar Title="Fatal error" ResultBarType="ResultBarType.FatalError" @bind-Message="@_errorMessage" DismissEvent="() => State = ErrorState.None" />
		}
		break;
}

@if (_editPlayer == null)
{
	<Loading />
}
else
{
	<EditForm Model="@_editPlayer" OnValidSubmit="@OnValidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.CountryCode)</label>
			<SearchDropdown Values="@UserUtils.CountryNames" @bind-Value="@_editPlayer.CountryCode" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.Dpi)</label>
			<InputNumber @bind-Value="@_editPlayer.Dpi" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.Fov)</label>
			<InputNumber @bind-Value="@_editPlayer.Fov" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.Gamma)</label>
			<InputNumber @bind-Value="@_editPlayer.Gamma" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.HasFlashHandEnabled)</label>
			<InputNullableBoolean @bind-Value="@_editPlayer.HasFlashHandEnabled" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.InGameSens)</label>
			<InputNumber @bind-Value="@_editPlayer.InGameSens" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.IsRightHanded)</label>
			<InputNullableBoolean @bind-Value="@_editPlayer.IsRightHanded" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.UsesLegacyAudio)</label>
			<InputNullableBoolean @bind-Value="@_editPlayer.UsesLegacyAudio" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.HideDonations)</label>
			<InputCheckbox @bind-Value="@_editPlayer.HideDonations" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.HidePastUsernames)</label>
			<InputCheckbox @bind-Value="@_editPlayer.HidePastUsernames" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.HideSettings)</label>
			<InputCheckbox @bind-Value="@_editPlayer.HideSettings" />
		</div>

		<span>TODO relations</span>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.IsBanned)</label>
			<InputCheckbox @bind-Value="@_editPlayer.IsBanned" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.BanDescription)</label>
			<InputText @bind-Value="@_editPlayer.BanDescription" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.BanResponsibleId)</label>
			<InputNumber @bind-Value="@_editPlayer.BanResponsibleId" />
		</div>

		<div>
			<label class="@_inputLabelCss">@nameof(EditPlayer.IsBannedFromDdcl)</label>
			<InputCheckbox @bind-Value="@_editPlayer.IsBannedFromDdcl" />
		</div>

		<button class="bg-gray-900 hover:bg-gray-500 p-1 rounded text-color-text" type="submit">Submit</button>
	</EditForm>
}

@code
{
	private const string _inputLabelCss = "w-64";

	private EditPlayer? _editPlayer;
	private string? _errorMessage;

	public ErrorState State { get; set; }

	[Parameter] public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			GetPlayer getPlayer = await Http.Client.GetFromJsonAsync<GetPlayer>($"api/admin/players/{Id}") ?? throw new($"Response could not be deserialized to {nameof(GetPlayer)}.");
			_editPlayer = new()
			{
				AssetModIds = getPlayer.AssetModIds,
				CountryCode = getPlayer.CountryCode,
				Dpi = getPlayer.Dpi,
				Fov = getPlayer.Fov,
				Gamma = getPlayer.Gamma,
				HasFlashHandEnabled = getPlayer.HasFlashHandEnabled,
				HideDonations = getPlayer.HideDonations,
				HidePastUsernames = getPlayer.HidePastUsernames,
				HideSettings = getPlayer.HideSettings,
				InGameSens = getPlayer.InGameSens,
				IsRightHanded = getPlayer.IsRightHanded,
				TitleIds = getPlayer.TitleIds,
				UsesLegacyAudio = getPlayer.UsesLegacyAudio,
				BanDescription = getPlayer.BanDescription,
				BanResponsibleId = getPlayer.BanResponsibleId,
				IsBanned = getPlayer.IsBanned,
				IsBannedFromDdcl = getPlayer.IsBannedFromDdcl,
			};
			State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_errorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_errorMessage = "An error occurred while sending the request.";

			State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task OnValidSubmit()
	{
		if (_editPlayer == null)
			return;

		try
		{
			HttpResponseMessage hrm = await Http.Client.PutAsJsonAsync<EditPlayer>($"api/admin/players/{Id}", _editPlayer);

			if (hrm.StatusCode == HttpStatusCode.OK)
			{
				NavigationManager.NavigateTo("/admin/players");
			}
			else
			{
				_errorMessage = await hrm.Content.ReadAsStringAsync();
				State = hrm.StatusCode.IsUserError() ? ErrorState.ValidationError : ErrorState.FatalError;
			}
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
