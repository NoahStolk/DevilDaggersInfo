@page "/admin/players/add"
@inject AdminApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Admin.Players
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net

<h1 class="text-red text-2xl">Add</h1>

@switch (State)
{
	case ErrorState.ValidationError:
		{
			<ResultBar Title="Validation failed" ResultBarType="ResultBarType.ValidationError" @bind-Message="@_errorMessage" DismissEvent="() => State = ErrorState.None" />
		}
		break;
	case ErrorState.FatalError:
		{
			<ResultBar Title="Fatal error" ResultBarType="ResultBarType.FatalError" @bind-Message="@_errorMessage" DismissEvent="() => State = ErrorState.None" />
		}
		break;
}

<EditForm Model="@_addPlayer" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.Id)</label>
		<InputNumber @bind-Value="_addPlayer.Id" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.CountryCode)</label>
		<SearchDropdown Values="@UserUtils.CountryNames" @bind-Value="@_addPlayer.CountryCode" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.Dpi)</label>
		<InputNumber @bind-Value="@_addPlayer.Dpi" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.Fov)</label>
		<InputNumber @bind-Value="@_addPlayer.Fov" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.Gamma)</label>
		<InputNumber @bind-Value="@_addPlayer.Gamma" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.HasFlashHandEnabled)</label>
		<InputNullableBoolean @bind-Value="@_addPlayer.HasFlashHandEnabled" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.InGameSens)</label>
		<InputNumber @bind-Value="@_addPlayer.InGameSens" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.IsRightHanded)</label>
		<InputNullableBoolean @bind-Value="@_addPlayer.IsRightHanded" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.UsesLegacyAudio)</label>
		<InputNullableBoolean @bind-Value="@_addPlayer.UsesLegacyAudio" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.HideDonations)</label>
		<InputCheckbox @bind-Value="@_addPlayer.HideDonations" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.HidePastUsernames)</label>
		<InputCheckbox @bind-Value="@_addPlayer.HidePastUsernames" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.HideSettings)</label>
		<InputCheckbox @bind-Value="@_addPlayer.HideSettings" />
	</div>

	<span>TODO relations</span>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.IsBanned)</label>
		<InputCheckbox @bind-Value="@_addPlayer.IsBanned" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.BanDescription)</label>
		<InputText @bind-Value="@_addPlayer.BanDescription" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.BanResponsibleId)</label>
		<InputNumber @bind-Value="@_addPlayer.BanResponsibleId" />
	</div>

	<div>
		<label class="@_inputLabelCss">@nameof(AddPlayer.IsBannedFromDdcl)</label>
		<InputCheckbox @bind-Value="@_addPlayer.IsBannedFromDdcl" />
	</div>

	<button class="bg-gray-900 hover:bg-gray-500 p-1 rounded text-color-text" type="submit">Submit</button>
</EditForm>

@code
{
	private const string _inputLabelCss = "w-64";

	private AddPlayer _addPlayer = new();
	private string? _errorMessage;

	public ErrorState State { get; set; }

	private async Task OnValidSubmit()
	{
		try
		{
			HttpResponseMessage hrm = await Http.Client.PostAsJsonAsync($"api/admin/players", _addPlayer);

			if (hrm.StatusCode == HttpStatusCode.OK)
				NavigationManager.NavigateTo("/admin/players");
			else
				_errorMessage = await hrm.Content.ReadAsStringAsync();

			State = hrm.StatusCode.IsUserError() ? ErrorState.ValidationError : ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
