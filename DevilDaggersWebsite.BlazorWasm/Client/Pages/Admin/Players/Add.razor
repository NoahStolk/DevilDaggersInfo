@page "/admin/players/add"
@inject AdminApiHttpClient Http
@inject NavigationManager NavigationManager
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Admin.Mods
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Admin.Players
@using DevilDaggersWebsite.BlazorWasm.Shared.Dto.Admin.Titles
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net

<h1 class="text-red text-2xl">Add</h1>

@switch (State)
{
	case ErrorState.ValidationError:
		{
			<ResultBar Title="Validation failed" ResultBarType="ResultBarType.ValidationError" DismissEvent="Dismiss">
				@_errorMessage
			</ResultBar>
		}
		break;
	case ErrorState.FatalError:
		{
			<ResultBar Title="Fatal error" ResultBarType="ResultBarType.FatalError" DismissEvent="Dismiss">
				@_errorMessage
			</ResultBar>
		}
		break;
}

<EditForm Model="@_addPlayer" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<AdminInput Label="@nameof(AddPlayer.Id)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addPlayer.Id" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.CountryCode)"><SearchDropdown Values="@UserUtils.CountryNames" @bind-Value="@_addPlayer.CountryCode" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.Dpi)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addPlayer.Dpi" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.Fov)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addPlayer.Fov" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.Gamma)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="_addPlayer.Gamma" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.HasFlashHandEnabled)"><InputNullableBoolean @bind-Value="@_addPlayer.HasFlashHandEnabled" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.InGameSens)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="@_addPlayer.InGameSens" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.IsRightHanded)"><InputNullableBoolean @bind-Value="@_addPlayer.IsRightHanded" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.UsesLegacyAudio)"><InputNullableBoolean @bind-Value="@_addPlayer.UsesLegacyAudio" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.HideDonations)"><InputCheckbox @bind-Value="@_addPlayer.HideDonations" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.HidePastUsernames)"><InputCheckbox @bind-Value="@_addPlayer.HidePastUsernames" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.HideSettings)"><InputCheckbox @bind-Value="@_addPlayer.HideSettings" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.AssetModIds)"><MultiSearchDropdown Values="@_modNames" @bind-Value="@_addPlayer.AssetModIds" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.TitleIds)"><MultiSearchDropdown Values="@_titleNames" @bind-Value="@_addPlayer.TitleIds" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.IsBanned)"><InputCheckbox @bind-Value="@_addPlayer.IsBanned" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.BanDescription)"><InputText class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="@_addPlayer.BanDescription" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.BanResponsibleId)"><InputNumber class="w-64 pl-2 bg-gray-900 text-color-text" @bind-Value="@_addPlayer.BanResponsibleId" /></AdminInput>
	<AdminInput Label="@nameof(AddPlayer.IsBannedFromDdcl)"><InputCheckbox @bind-Value="@_addPlayer.IsBannedFromDdcl" /></AdminInput>

	<button class="bg-gray-900 hover:bg-gray-500 p-1 rounded text-color-text" type="submit">Submit</button>
</EditForm>

@code
{
	private Dictionary<int, string>? _modNames;
	private Dictionary<int, string>? _titleNames;
	private AddPlayer _addPlayer = new();
	private string? _errorMessage;

	public ErrorState State { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			List<GetModName> getModNames = await Http.Client.GetFromJsonAsync<List<GetModName>>($"api/admin/mods/names") ?? throw new($"Response could not be deserialized to {nameof(List<GetModName>)}.");
			_modNames = getModNames.ToDictionary(m => m.Id, m => m.Name);

			List<GetTitle> getTitles = await Http.Client.GetFromJsonAsync<List<GetTitle>>($"api/admin/titles/names") ?? throw new($"Response could not be deserialized to {nameof(List<GetTitle>)}.");
			_titleNames = getTitles.ToDictionary(t => t.Id, t => t.Name);

			State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				_errorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				_errorMessage = "An error occurred while sending the request.";

			State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task OnValidSubmit()
	{
		try
		{
			HttpResponseMessage hrm = await Http.Client.PostAsJsonAsync($"api/admin/players", _addPlayer);

			if (hrm.StatusCode == HttpStatusCode.OK)
				NavigationManager.NavigateTo("/admin/players");
			else
				_errorMessage = await hrm.Content.ReadAsStringAsync();

			State = hrm.StatusCode.IsUserError() ? ErrorState.ValidationError : ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private void Dismiss()
	{
		State = ErrorState.None;
		StateHasChanged();
	}
}
